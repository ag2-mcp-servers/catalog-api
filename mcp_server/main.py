# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:52:30+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query, UploadFile

from models import (
    ApiAddonPvtGiftlistGetListIdGetResponse,
    ApiCatalogPvtAttachmentsGetResponse,
    ApiCatalogPvtCategoryCategoryIdPutRequest,
    ApiCatalogPvtCollectionCollectionIdGetResponse,
    ApiCatalogPvtCollectionCollectionIdPositionPostRequest,
    ApiCatalogPvtCollectionCollectionIdPutRequest,
    ApiCatalogPvtCollectionCollectionIdPutResponse,
    ApiCatalogPvtCollectionCollectionIdSubcollectionGetResponse,
    ApiCatalogPvtCollectionPostRequest,
    ApiCatalogPvtCollectionPostRequest1,
    ApiCatalogPvtCollectionPostResponse,
    ApiCatalogPvtProductPostRequest,
    ApiCatalogPvtProductPostResponse,
    ApiCatalogPvtProductProductIdGetResponse,
    ApiCatalogPvtProductProductIdPutRequest,
    ApiCatalogPvtProductProductIdPutResponse,
    ApiCatalogPvtProductProductIdSalespolicyGetResponse,
    ApiCatalogPvtProductProductIdSimilarcategoryCategoryIdPostResponse,
    ApiCatalogPvtProductProductIdSimilarcategoryGetResponse,
    ApiCatalogPvtProductProductIdSpecificationGetResponse,
    ApiCatalogPvtProductProductIdSpecificationPostRequest,
    ApiCatalogPvtProductProductIdSpecificationPostResponse,
    ApiCatalogPvtProductProductIdSpecificationvaluePutRequest,
    ApiCatalogPvtProductProductIdSpecificationvaluePutResponse,
    ApiCatalogPvtSkuattachmentPostRequest,
    ApiCatalogPvtSkuattachmentPostResponse,
    ApiCatalogPvtSkucomplementPostRequest,
    ApiCatalogPvtSkuservicePostRequest,
    ApiCatalogPvtSkuserviceSkuServiceIdPutRequest,
    ApiCatalogPvtSkuservicetypeattachmentPostRequest,
    ApiCatalogPvtSkuservicetypeattachmentPostResponse,
    ApiCatalogPvtSpecificationgroupGroupIdPutRequest,
    ApiCatalogPvtSpecificationgroupGroupIdPutResponse,
    ApiCatalogPvtSpecificationgroupPostResponse,
    ApiCatalogPvtSpecificationNonstructuredGetResponse,
    ApiCatalogPvtSpecificationNonstructuredIdGetResponse,
    ApiCatalogPvtSpecificationPostRequest,
    ApiCatalogPvtSpecificationPostResponse,
    ApiCatalogPvtSpecificationSpecificationIdGetResponse,
    ApiCatalogPvtSpecificationSpecificationIdPutRequest,
    ApiCatalogPvtSpecificationSpecificationIdPutResponse,
    ApiCatalogPvtSpecificationvaluePostRequest,
    ApiCatalogPvtSpecificationvaluePostResponse,
    ApiCatalogPvtSpecificationvalueSpecificationValueIdGetResponse,
    ApiCatalogPvtSpecificationvalueSpecificationValueIdPutRequest,
    ApiCatalogPvtSpecificationvalueSpecificationValueIdPutResponse,
    ApiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutResponse,
    ApiCatalogPvtStockkeepingunitGetResponse,
    ApiCatalogPvtStockkeepingunitkitPostRequest,
    ApiCatalogPvtStockkeepingunitPostRequest,
    ApiCatalogPvtStockkeepingunitPostResponse,
    ApiCatalogPvtStockkeepingunitSkuIdAttachmentGetResponse,
    ApiCatalogPvtStockkeepingunitSkuIdEanGetResponse,
    ApiCatalogPvtStockkeepingunitSkuIdFileGetResponse,
    ApiCatalogPvtStockkeepingunitSkuIdFilePostResponse,
    ApiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdPutResponse,
    ApiCatalogPvtStockkeepingunitSkuIdGetResponse,
    ApiCatalogPvtStockkeepingunitSkuIdPutRequest,
    ApiCatalogPvtStockkeepingunitSkuIdPutResponse,
    ApiCatalogPvtStockkeepingunitSkuIdSpecificationGetResponse,
    ApiCatalogPvtStockkeepingunitSkuIdSpecificationPostRequest,
    ApiCatalogPvtStockkeepingunitSkuIdSpecificationPutRequest,
    ApiCatalogPvtStockkeepingunitSkuIdSpecificationPutResponse,
    ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest,
    ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutResponse,
    ApiCatalogPvtSubcollectionPostRequest,
    ApiCatalogPvtSubcollectionPostResponse,
    ApiCatalogPvtSubcollectionSubCollectionIdBrandPostRequest,
    ApiCatalogPvtSubcollectionSubCollectionIdBrandPostResponse,
    ApiCatalogPvtSubcollectionSubCollectionIdCategoryPostRequest,
    ApiCatalogPvtSubcollectionSubCollectionIdCategoryPostResponse,
    ApiCatalogPvtSubcollectionSubCollectionIdGetResponse,
    ApiCatalogPvtSubcollectionSubCollectionIdPutRequest,
    ApiCatalogPvtSubcollectionSubCollectionIdPutResponse,
    ApiCatalogPvtSubcollectionSubCollectionIdStockkeepingunitPostRequest,
    ApiCatalogPvtSubcollectionSubCollectionIdStockkeepingunitPostResponse,
    ApiCatalogSystemPubCategoryTreeCategoryLevelsGetResponse,
    ApiCatalogSystemPubProductsVariationsProductIdGetResponse,
    ApiCatalogSystemPubSaleschannelSalesChannelIdGetResponse,
    ApiCatalogSystemPubSkuStockkeepingunitidsbyrefidsPostRequest,
    ApiCatalogSystemPubSkuStockkeepingunitidsbyrefidsPostResponse,
    ApiCatalogSystemPubSpecificationFieldGetFieldIdGetResponse,
    ApiCatalogSystemPubSpecificationFieldvalueFieldIdGetResponse,
    ApiCatalogSystemPvtBrandListGetResponse,
    ApiCatalogSystemPvtBrandPagedlistGetResponse,
    ApiCatalogSystemPvtCommercialconditionCommercialConditionIdGetResponse,
    ApiCatalogSystemPvtCommercialconditionListGetResponse,
    ApiCatalogSystemPvtProductsGetProductAndSkuIdsGetResponse,
    ApiCatalogSystemPvtProductsProductgetbyrefidRefIdGetResponse,
    ApiCatalogSystemPvtProductsProductgetProductIdGetResponse,
    ApiCatalogSystemPvtProductsProductIdSpecificationGetResponse,
    ApiCatalogSystemPvtProductsProductIdSpecificationPostRequest,
    ApiCatalogSystemPvtSaleschannelListGetResponse,
    ApiCatalogSystemPvtSellerListGetResponse,
    ApiCatalogSystemPvtSellerPostResponse,
    ApiCatalogSystemPvtSellerPutResponse,
    ApiCatalogSystemPvtSellerSellerIdGetResponse,
    ApiCatalogSystemPvtSellersSellerIdGetResponse,
    ApiCatalogSystemPvtSkuAssociateattachmentsPostRequest,
    ApiCatalogSystemPvtSkuComplementsParentSkuIdTypeGetResponse,
    ApiCatalogSystemPvtSkusellerSellerIdSellerSkuIdGetResponse,
    ApiCatalogSystemPvtSkuStockkeepingunitByProductIdProductIdGetResponse,
    ApiCatalogSystemPvtSkuStockkeepingunitidsbysaleschannelGetResponse,
    ApiCatalogSystemPvtSkuStockkeepingunitidsGetResponse,
    ApiCatalogSystemPvtSpecificationFieldValueFieldValueIdGetResponse,
    ApiCatalogSystemPvtSpecificationFieldValuePostResponse,
    ApiCatalogSystemPvtSpecificationGroupbycategoryCategoryIdGetResponse,
    AttachmentRequest,
    AttachmentResponse,
    BrandCreateUpdate,
    BrandGet,
    Category,
    CategorySpecification,
    CreateCategoryRequest,
    CreateSellerRequest,
    GetSKUAltID,
    GetSKUandContext,
    SkuComplement,
    SKUFileURL,
    SkuKit,
    SKUService,
    SKUServiceTypeRequest,
    SKUServiceTypeResponse,
    SKUServiceValueRequest,
    SKUServiceValueResponse,
    SKUSpecificationResponse,
    SpecificationGroupInsertRequest,
    SpecificationsGroup,
    SpecificationsInsertFieldRequest,
    SpecificationsInsertFieldUpdateRequest,
    SpecificationsInsertFieldValueRequest,
    SpecificationsUpdateFieldValueRequest,
    SupplierRequest,
    SupplierResponse,
    UpdateSellerRequest,
)

app = MCPProxy(
    contact={},
    description="\r\n> Check the new [Catalog onboarding guide](https://developers.vtex.com/docs/guides/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.\r\n\r\nMethods for collecting product/SKU catalog data, categories, brands and other information. All content that comes between `{{}}` keys must be replaced with the correct data before performing the request.\r\n\r\n\r\n## Index\r\n\r\n- [Product](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/products/GetProductAndSkuIds) - Here you can consult, create, or update a Product. For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/1wmX3QvQVxbKVmalhIE5Ru).\r\n- [Product Specification](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/products/-productId-/specification) - You can consult, create, or update additional information of a Product.  For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/2NQoBv8m4Yz3oQaLgDRagP#product-specification).\r\n- [SKU](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/sku/stockkeepingunitids) - Here you can consult, create, or update an SKU. For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/3mJbIqMlz6oKDmyZ2bKJoA).\r\n- [SKU Complement](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/stockkeepingunit/-skuId-/complement) - You can consult, create, or update an SKU Complement. An SKU Complement is a new SKU that has a Parent SKU.\r\n- [SKU EAN](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/sku/stockkeepingunitbyean/-ean-) -  Here you can consult, create, or update an SKU unique identification code (barcode).\r\n- [SKU Attachment](https://developers.vtex.com/docs/api-reference/catalog-api#post-/api/catalog/pvt/skuattachment) - You can consult, create, or update an SKU Attachment. An attachment is used to add custom information about the item. For more information, check [this article](https://help.vtex.com/tutorial/what-is-an-attachment--aGICk0RVbqKg6GYmQcWUm?locale=en).\r\n- [SKU File](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/stockkeepingunit/-skuId-/file) - Here you can consult, create, or update an SKU File. An SKU File is an image associated with an SKU.\r\n- [SKU Kit](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/stockkeepingunitkit) - You can consult, create, or update an SKU Kit. A kit is an SKU composed of one or more SKUs. For more information, check [this article](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28?locale=en).\r\n- [SKU Seller](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/skuseller/-sellerId-/-sellerSkuId-) - Here you can consult and delete an SKU Seller. An SKU Seller is a seller associated with an SKU. For more information, check [this article](https://help.vtex.com/tutorial/what-is-a-seller--5FkLvhZ3Few4CWWIuYOK2w?locale=en).\r\n- [SKU Service](https://developers.vtex.com/docs/api-reference/catalog-api#put-/api/catalog/pvt/skuservice/-skuServiceId-) - You can create, update, or delete an SKU Service. A service is an item that may come with a product, optionally, and with a cost. For more information, check [this article](https://help.vtex.com/tutorial/what-is-a-service--46Ha8CEEQoC6Y40i6akG0y?locale=en).\r\n- [SKU Service Attachment](https://developers.vtex.com/docs/api-reference/catalog-api#post-/api/catalog/pvt/skuservicetypeattachment) - Here you can associate or disassociate an Attachment to an SKU Service.\r\n- [SKU Service Type](https://developers.vtex.com/docs/api-reference/catalog-api#post-/api/catalog/pvt/skuservicetype) - You can create, update, or delete an SKU Service Type. A service type is the behavior configuration of a service.\r\n- [SKU Service Value](https://developers.vtex.com/docs/api-reference/catalog-api#post-/api/catalog/pvt/skuservicevalue) - Here you can create, update, or delete an SKU Service Value. Service value is how much the customer will be charged for the service.\r\n- [SKU Specification](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/stockkeepingunit/-skuId-/specification) - You can consult, create, or delete an SKU Specification. SKU Specification is used to create site browsing filters and to differentiate SKUs within the product page. For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/2NQoBv8m4Yz3oQaLgDRagP?locale=en#sku-specifications).\r\n- [Legacy Subcollection](https://developers.vtex.com/docs/api-reference/catalog-api#post-/api/catalog/pvt/subcollection/-subCollectionId-/stockkeepingunit) - Here you can can consult, create, or delete an SKU, Brand or Category from a Subcollection, as well as create, delete and update subcollections. A subcollection is a group type associated with a collection. For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/3moFonW33dgOYDrU21Z1X0#group-types).\r\n- [Category](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pub/category/tree/-categoryLevels-) - You consult, create, or update a Category. A category is a hierarchical level of product classification. For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/2gkZDjXRqfsq62TlAkj4uf).\r\n- [Similar Category](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/product/-productId-/similarcategory/) - Here you can create and delete a Similar Category to a Product. This way the Product will be shown in both categories (main and similar).\r\n- [Category Specification](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pub/specification/field/listByCategoryId/-categoryId-) - You can consult all Specifications by Category. For more information about Specification, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/2NQoBv8m4Yz3oQaLgDRagP).\r\n- [Brand](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/brand/list) - You can consult, create, update, or delete a Brand. A brand is a product property. For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/7i3sB8fgkqUp5NoH5yJtfh).\r\n- [Attachment](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/attachment/-attachmentid-) - You can consult, create, or update an Attachment. An attachment is used to add custom information about the item. For more information, check [this article](https://help.vtex.com/tutorial/what-is-an-attachment--aGICk0RVbqKg6GYmQcWUm?locale=en).\r\n- [Collection Beta](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/collection/search) - The new [Beta Collections module](https://help.vtex.com/announcements/new-beta-collections-module-easily-create-and-manage-product-collections--6KvFxylC5SNsbVm8L8XZpZ#) launch allowed us to engineer new endpoints that create and manage Collections. For more information, check [this article](https://help.vtex.com/en/tutorial/creating-collections-beta--yJBHqNMViOAnnnq4fyOye?&utm_source=autocomplete#).\r\n- [Legacy Collection](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/collection/-collectionId-) - Here you can consult, create, update, or delete a Collection. A collection is a group of items. For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/4hN41yU8IPeb8HKmmaXoca?locale=en).\r\n- [Specification](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/specification/-specificationId-) - Here you can consult, create, or delete a Specification. A specification is used to create site browsing filters and to differentiate SKUs and Products within the product page. For more information, check [this article](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/2NQoBv8m4Yz3oQaLgDRagP?locale=en).\r\n- [Specification Field](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pub/specification/fieldGet/-fieldId-) - You can consult, create, or update a Specification Field. A specification field allows you to present more detailed items. \r\n- [Specification Field Value](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/specification/fieldValue/-fieldValueId-) - Here you can consult, create, or update a Specification Field Value. \r\n- [Specification Value](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/specificationvalue/-specificationValueId-) - You can consult, create, or update a Specification Value.\r\n- [Specification Group](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/specification/groupbycategory/-categoryId-) - Here you can consult, create, or update a Specification Group.\r\n- [Non Structured Specification](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/specification/nonstructured/-Id-) - You can consult or delete a Non Structured Specification.\r\n- [Sales Channel](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/saleschannel/list) - Here you can consult Sales Channel.\r\n- [Seller](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/seller/list) - You can consult, create, or update a Seller. A seller is the _product owner_. For more information, check [this article](https://help.vtex.com/tutorial/what-is-a-seller--5FkLvhZ3Few4CWWIuYOK2w?locale=en).\r\n- [Supplier](https://developers.vtex.com/docs/api-reference/catalog-api#post-/api/catalog/pvt/supplier) - Here you can consult, create, or update a Supplier.\r\n- [Trade Policy](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog/pvt/product/-productId-/salespolicy) - You can create, update, or delete a Trade Policy. Trade policy is required when one of the above factors is different among the sale channel. For more information, check [this article](https://help.vtex.com/tutorial/what-is-a-sales-policy--563tbcL0TYKEKeOY4IAgAE?locale=en).\r\n- [Product Indexing](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/products/GetIndexedInfo/-productId-) - Here you can consult Product Indexed information.\r\n- [Commercial Conditions](https://developers.vtex.com/docs/api-reference/catalog-api#get-/api/catalog_system/pvt/commercialcondition/list) - Here you can consult commercial conditions registered in the store.\r\n\r\n\r\n## Common parameters\r\n\r\n| Parameter name              | Description                                                                             |\r\n|---------------------------|-----------------------------------------------------------------------------------------|\r\n| `{{accountName}}`         | Store account name                                                                      |\r\n| `{{environment}`          | The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta |\r\n| `{{X-VTEX-API-AppKey}}`   | Located in the headers of the requests, user authentication key                         |\r\n| `{{X-VTEX-API-AppToken}}` | Located in the headers of the requests, authentication password                         |",
    title='Catalog API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL.',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.get(
    '/api/addon/pvt/giftlist/get/{listId}',
    description=""" Retrieves information about a Gift List by its ID. """,
    tags=['gift_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_list(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    list_id: int = Path(..., alias='listId'),
):
    """
    Get Gift List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/addon/pvt/review/GetProductRate/{productId}',
    description=""" Retrieves the review rate of a product by this product's ID. """,
    tags=['product_management', 'product_information'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def review_rate_product(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Get Product Review Rate by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/attachment',
    description=""" Creates a new SKU attachment.
 >⚠️ To understand the specific syntax for Assembly Options attachments, read the [Assembly Options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH#assembly-options-syntax) documentation. 
## Request body example

```json
{
  "Name": "Test",
  "IsRequired": true,
  "IsActive": true,
  "Domains": [
    {
      "FieldName": "Basic test",
      "MaxCaracters": "",
      "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
    },
    {
      "FieldName": "teste",
      "MaxCaracters": "",
      "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
    }
  ]
}
```
## Response body example

```json
{
  "Id": 8,
  "Name": "Test",
  "IsRequired": true,
  "IsActive": true,
  "Domains": [
    {
      "FieldName": "Basic test",
      "MaxCaracters": "",
      "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
    },
    {
      "FieldName": "teste",
      "MaxCaracters": "",
      "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
    }
  ]
}
``` """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_attachment(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: AttachmentRequest = None,
):
    """
    Create attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/attachment/{attachmentid}',
    description=""" Deletes a previously existing SKU attachment. """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_attachment__attachmentid(
    attachmentid: str,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/attachment/{attachmentid}',
    description=""" Gets information about a registered attachment. 
 >⚠️ To understand the specific syntax for Assembly Options attachments, read the [Assembly Options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH#assembly-options-syntax) documentation.
## Response body example

```json
{
  "Id": 8,
  "Name": "Test",
  "IsRequired": true,
  "IsActive": true,
  "Domains": [
    {
      "FieldName": "Basic test",
      "MaxCaracters": "",
      "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
    },
    {
      "FieldName": "teste",
      "MaxCaracters": "",
      "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
    }
  ]
}
``` """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_attachment__attachmentid(
    attachmentid: str,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/attachment/{attachmentid}',
    description=""" Updates a previously existing SKU attachment with new information. 
 >⚠️ To understand the specific syntax for Assembly Options attachments, read the [Assembly Options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH#assembly-options-syntax) documentation. 
## Request body example

```json
{
  "Name": "Test",
  "IsRequired": true,
  "IsActive": true,
  "Domains": [
    {
      "FieldName": "Basic test",
      "MaxCaracters": "",
      "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
    },
    {
      "FieldName": "teste",
      "MaxCaracters": "",
      "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
    }
  ]
}
```
## Response body example

```json
{
  "Id": 8,
  "Name": "Test",
  "IsRequired": true,
  "IsActive": true,
  "Domains": [
    {
      "FieldName": "Basic test",
      "MaxCaracters": "",
      "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
    },
    {
      "FieldName": "teste",
      "MaxCaracters": "",
      "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
    }
  ]
}
``` """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_attachment__attachmentid(
    attachmentid: str,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: AttachmentRequest = None,
):
    """
    Update attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/attachments',
    description=""" Retrieves information about all registered attachments. 
 >⚠️ To understand the specific syntax for Assembly Options attachments, read the [Assembly Options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH#assembly-options-syntax) documentation. 
## Response body example

```json
{
    "Page": 1,
    "Size": 11,
    "TotalRows": 11,
    "TotalPage": 1,
    "Data": [
        {
            "Id": 1,
            "Name": "Acessórios do bicho",
            "IsRequired": true,
            "IsActive": true,
            "Domains": [
                {
                    "FieldName": "extra",
                    "MaxCaracters": "",
                    "DomainValues": "[0-3]#1[1-2][1]pricetable1;#3[0-2][0]pricetable2;#5[0-2][0]pricetable3"
                }
            ]
        },
        {
            "Id": 2,
            "Name": "Sobrenome",
            "IsRequired": false,
            "IsActive": true,
            "Domains": []
        },
        {
            "Id": 3,
            "Name": "Assinatura Teste",
            "IsRequired": false,
            "IsActive": true,
            "Domains": [
                {
                    "FieldName": " vtex.subscription.key.frequency",
                    "MaxCaracters": "",
                    "DomainValues": "1 day, 7 day, 1 month, 6 month"
                },
                {
                    "FieldName": "vtex.subscription.key.validity.begin",
                    "MaxCaracters": "",
                    "DomainValues": "1"
                },
                {
                    "FieldName": "vtex.subscription.key.validity.end",
                    "MaxCaracters": "",
                    "DomainValues": "31"
                },
                {
                    "FieldName": "vtex.subscription.key.purchaseday",
                    "MaxCaracters": "",
                    "DomainValues": "1, 2, 20, 31"
                }
            ]
        },
        {
            "Id": 5,
            "Name": "teste",
            "IsRequired": false,
            "IsActive": true,
            "Domains": []
        },
        {
            "Id": 6,
            "Name": "teste2",
            "IsRequired": false,
            "IsActive": true,
            "Domains": []
        },
        {
            "Id": 7,
            "Name": "vtex.subscription.teste3",
            "IsRequired": false,
            "IsActive": true,
            "Domains": []
        },
        {
            "Id": 8,
            "Name": "teste api nova",
            "IsRequired": true,
            "IsActive": true,
            "Domains": [
                {
                    "FieldName": "Basic teste",
                    "MaxCaracters": "",
                    "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
                },
                {
                    "FieldName": "teste",
                    "MaxCaracters": "",
                    "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
                }
            ]
        },
        {
            "Id": 9,
            "Name": "vtex.subscription.teste",
            "IsRequired": false,
            "IsActive": true,
            "Domains": []
        },
        {
            "Id": 10,
            "Name": "Montagens",
            "IsRequired": false,
            "IsActive": true,
            "Domains": []
        },
        {
            "Id": 11,
            "Name": "vtex.subscription.subscription",
            "IsRequired": false,
            "IsActive": true,
            "Domains": [
                {
                    "FieldName": "vtex.subscription.key.frequency",
                    "MaxCaracters": "15",
                    "DomainValues": "1 month"
                },
                {
                    "FieldName": "vtex.subscription.key.purchaseday",
                    "MaxCaracters": "15",
                    "DomainValues": "1,15,28"
                }
            ]
        },
        {
            "Id": 12,
            "Name": "T-Shirt Customization",
            "IsRequired": false,
            "IsActive": true,
            "Domains": [
                {
                    "FieldName": "T-Shirt Name",
                    "MaxCaracters": "15",
                    "DomainValues": "[]"
                }
            ]
        }
    ]
}
``` """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_attachments(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get all attachments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/brand',
    description=""" Creates a new Brand.
## Request and response body example

```json
{
  "Id": 2000013,
  "Name": "Orma Carbon",
  "Text": "Orma Carbon",
  "Keywords": "orma",
  "SiteTitle": "Orma Carbon",
  "Active": true,
  "MenuHome": true,
  "AdWordsRemarketingCode": "",
  "LomadeeCampaignCode": "",
  "Score": null,
  "LinkId": "orma-carbon"
}
``` """,
    tags=['brand_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_brand(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: BrandCreateUpdate = None,
):
    """
    Create Brand
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/brand/{brandId}',
    description=""" Deletes an existing Brand. """,
    tags=['brand_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_brand__brand_id(
    brand_id: str = Path(..., alias='brandId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete Brand
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/brand/{brandId}',
    description=""" Retrieves information about a specific Brand and its context.
## Response body example

```json
{
  "Id": 2000013,
  "Name": "Orma Carbon",
  "Text": "Orma Carbon",
  "Keywords": "orma",
  "SiteTitle": "Orma Carbon",
  "Active": true,
  "MenuHome": true,
  "AdWordsRemarketingCode": "",
  "LomadeeCampaignCode": "",
  "Score": null,
  "LinkId": "orma-carbon"
}
``` """,
    tags=['brand_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_brand__brand_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    brand_id: str = Path(..., alias='brandId'),
):
    """
    Get Brand and context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/brand/{brandId}',
    description=""" Updates a previously existing Brand.
## Request and response body example

```json
{
  "Id": 2000013,
  "Name": "Orma Carbon",
  "Text": "Orma Carbon",
  "Keywords": "orma",
  "SiteTitle": "Orma Carbon",
  "Active": true,
  "MenuHome": true,
  "AdWordsRemarketingCode": "",
  "LomadeeCampaignCode": "",
  "Score": null,
  "LinkId": "orma-carbon"
}
``` """,
    tags=['brand_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_brand__brand_id(
    brand_id: str = Path(..., alias='brandId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: BrandCreateUpdate = None,
):
    """
    Update Brand
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/category',
    description=""" Creates a new Category.

If there is a need to create a new category with a specific custom ID, specify the `Id` (integer) in the request. Otherwise, VTEX will generate the ID automatically.

## Request body example (automatically generated ID)

```json
{
    "Name": "Home Appliances",
    "FatherCategoryId": null,
    "Title": "Home Appliances",
    "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
    "Keywords": "Kitchen, Laundry, Appliances",
    "IsActive": true,
    "LomadeeCampaignCode": null,
    "AdWordsRemarketingCode": null,
    "ShowInStoreFront": true,
    "ShowBrandFilter": true,
    "ActiveStoreFrontLink": true,
    "GlobalCategoryId": 604,
    "StockKeepingUnitSelectionMode": "SPECIFICATION",
    "Score": null
}
```

## Request body example (custom ID)

```json
{
    "Id": 1,
    "Name": "Home Appliances",
    "FatherCategoryId": null,
    "Title": "Home Appliances",
    "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
    "Keywords": "Kitchen, Laundry, Appliances",
    "IsActive": true,
    "LomadeeCampaignCode": null,
    "AdWordsRemarketingCode": null,
    "ShowInStoreFront": true,
    "ShowBrandFilter": true,
    "ActiveStoreFrontLink": true,
    "GlobalCategoryId": 604,
    "StockKeepingUnitSelectionMode": "SPECIFICATION",
    "Score": null
}
```

## Response body example

```json
{
    "Id": 1,
    "Name": "Home Appliances",
    "FatherCategoryId": null,
    "Title": "Home Appliances",
    "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
    "Keywords": "Kitchen, Laundry, Appliances",
    "IsActive": true,
    "LomadeeCampaignCode": "",
    "AdWordsRemarketingCode": "",
    "ShowInStoreFront": true,
    "ShowBrandFilter": true,
    "ActiveStoreFrontLink": true,
    "GlobalCategoryId": 604,
    "StockKeepingUnitSelectionMode": "LIST",
    "Score": null,
    "LinkId": "Alimentacao",
    "HasChildren": true
}
``` """,
    tags=['category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_category(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: CreateCategoryRequest = None,
):
    """
    Create Category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/category/{categoryId}',
    description=""" Retrieves general information about a Category. 
## Response body example

```json
{
    "Id": 1,
    "Name": "Home Appliances",
    "FatherCategoryId": null,
    "Title": "Home Appliances",
    "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
    "Keywords": "Kitchen, Laundry, Appliances",
    "IsActive": true,
    "LomadeeCampaignCode": "",
    "AdWordsRemarketingCode": "",
    "ShowInStoreFront": true,
    "ShowBrandFilter": true,
    "ActiveStoreFrontLink": true,
    "GlobalCategoryId": 3367,
    "StockKeepingUnitSelectionMode": "LIST",
    "Score": null,
    "LinkId": "Alimentacao",
    "HasChildren": true
}
``` """,
    tags=['category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_category__category_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    category_id: int = Path(..., alias='categoryId'),
):
    """
    Get Category by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/category/{categoryId}',
    description=""" Updates a previously existing Category.

## Request body example

```json
{
    "Name": "Home Appliances",
    "FatherCategoryId": null,
    "Title": "Home Appliances",
    "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
    "Keywords": "Kitchen, Laundry, Appliances",
    "IsActive": true,
    "LomadeeCampaignCode": null,
    "AdWordsRemarketingCode": null,
    "ShowInStoreFront": true,
    "ShowBrandFilter": true,
    "ActiveStoreFrontLink": true,
    "GlobalCategoryId": 604,
    "StockKeepingUnitSelectionMode": "SPECIFICATION",
    "Score": null
}
```

## Response body example

```json
{
    "Id": 1,
    "Name": "Home Appliances",
    "FatherCategoryId": null,
    "Title": "Home Appliances",
    "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
    "Keywords": "Kitchen, Laundry, Appliances",
    "IsActive": true,
    "LomadeeCampaignCode": "",
    "AdWordsRemarketingCode": "",
    "ShowInStoreFront": true,
    "ShowBrandFilter": true,
    "ActiveStoreFrontLink": true,
    "GlobalCategoryId": 604,
    "StockKeepingUnitSelectionMode": "LIST",
    "Score": null,
    "LinkId": "Alimentacao",
    "HasChildren": true
}
``` """,
    tags=['category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_category__category_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    category_id: int = Path(..., alias='categoryId'),
    body: ApiCatalogPvtCategoryCategoryIdPutRequest = None,
):
    """
    Update Category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/collection',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Creates a new Collection.
## Request body example

```json
{
    "Name": "Winter",
    "Searchable": false,
    "Highlight": false,
    "DateFrom": "2021-09-27T10:47:00",
    "DateTo": "2027-09-27T10:47:00"
}
```

## Response body example

```json
{
    "Id": 159,
    "Name": "Winter",
    "Description": null,
    "Searchable": false,
    "Highlight": false,
    "DateFrom": "2021-09-27T10:47:00",
    "DateTo": "2027-09-27T10:47:00",
    "TotalProducts": 0,
    "Type": "Manual"
}
``` """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_collection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtCollectionPostRequest = None,
):
    """
    Create Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/collection/',
    description=""" Creates a new collection. """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def p_o_s_t__create_collection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtCollectionPostRequest1 = ...,
):
    """
    Create Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/collection/inactive',
    description=""" Retrieves a list of Collection IDs of the inactive Collections. """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def g_e_t__all_inactive_collections(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get All Inactive Collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/collection/stockkeepingunit/importfileexample',
    description=""" Imports a sample of the imported XLS file. You need to save the response file to your device. """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def g_e_t__importfileexample(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Import Collection file example
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/collection/{collectionId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Deletes a previously existing Collection. """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_collection__collection_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    collection_id: int = Path(..., alias='collectionId'),
):
    """
    Delete Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/collection/{collectionId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Retrieves general information of a Collection.

## Response body example

```json
{
    "Id": 159,
    "Name": "Winter",
    "Description": null,
    "Searchable": false,
    "Highlight": false,
    "DateFrom": "2021-09-27T10:47:00",
    "DateTo": "2027-09-27T10:47:00",
    "TotalProducts": 0,
    "Type": "Manual"
}
``` """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_collection__collection_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    collection_id: int = Path(..., alias='collectionId'),
):
    """
    Get Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/collection/{collectionId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Updates a previously created Collection.
## Request body example

```json
{
    "Name": "Winter",
    "Searchable": false,
    "Highlight": false,
    "DateFrom": "2021-09-27T10:47:00",
    "DateTo": "2027-09-27T10:47:00"
}
```

## Response body example

```json
{
    "Id": 159,
    "Name": "Winter",
    "Description": null,
    "Searchable": false,
    "Highlight": false,
    "DateFrom": "2021-09-27T10:47:00",
    "DateTo": "2027-09-27T10:47:00",
    "TotalProducts": 0,
    "Type": "Manual"
}
``` """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_collection__collection_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    collection_id: int = Path(..., alias='collectionId'),
    body: ApiCatalogPvtCollectionCollectionIdPutRequest = None,
):
    """
    Update Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/collection/{collectionId}/position',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Edits the position of an SKU that already exists in the Subcollection,  which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
## Request body example

```json
{
     "skuId": 1,
     "position": 1,
     "subCollectionId": 17
}
``` """,
    tags=['collection_management', 'sku_management', 'subcollection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_collection__collection_id_position(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    collection_id: int = Path(..., alias='collectionId'),
    body: ApiCatalogPvtCollectionCollectionIdPositionPostRequest = None,
):
    """
    Reposition SKU on the Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/collection/{collectionId}/products',
    description=""" Retrieves information about the products from a collection. """,
    tags=[
        'collection_management',
        'product_management',
        'category_management',
        'brand_management',
        'supplier_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def g_e_t__productsfromacollection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    collection_id: int = Path(..., alias='collectionId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    filter: Optional[str] = Query(None, alias='Filter'),
    active: Optional[bool] = Query(None, alias='Active'),
    visible: Optional[bool] = Query(None, alias='Visible'),
    category_id: Optional[int] = Query(None, alias='CategoryId'),
    brand_id: Optional[int] = Query(None, alias='BrandId'),
    supplier_id: Optional[int] = Query(None, alias='SupplierId'),
    sales_channel_id: Optional[int] = Query(None, alias='SalesChannelId'),
    release_from: Optional[str] = Query(None, alias='ReleaseFrom'),
    release_to: Optional[str] = Query(None, alias='ReleaseTo'),
    specification_product: Optional[str] = Query(None, alias='SpecificationProduct'),
    specification_field_id: Optional[int] = Query(None, alias='SpecificationFieldId'),
):
    """
    Get products from a collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/collection/{collectionId}/stockkeepingunit/importexclude',
    description=""" Removes products from a collection from the request body file. The file must be an imported template. """,
    tags=['collection_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def p_o_s_t__removeproductsbyimportfile(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    collection_id: int = Path(..., alias='collectionId'),
    file: UploadFile = ...,
):
    """
    Remove products from Collection by imported file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/collection/{collectionId}/stockkeepingunit/importinsert',
    description=""" Adds products to a collection from the request body file. The file must be an imported template. """,
    tags=['collection_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def p_o_s_t__addproductsbyimportfile(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    collection_id: int = Path(..., alias='collectionId'),
    file: UploadFile = ...,
):
    """
    Add products to Collection by imported file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/collection/{collectionId}/subcollection',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Retrieves all Subcollections given a Collection ID. A Subcollection is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
## Response body example

```json
[
    {
        "Id": 12,
        "CollectionId": 149,
        "Name": "Subcollection",
        "Type": "Inclusive",
        "PreSale": false,
        "Release": true
    },
    {
        "Id": 13,
        "CollectionId": 149,
        "Name": "Test",
        "Type": "Exclusive",
        "PreSale": true,
        "Release": false
    },
    {
        "Id": 14,
        "CollectionId": 149,
        "Name": "asdfghj",
        "Type": "Inclusive",
        "PreSale": false,
        "Release": false
    }
]
``` """,
    tags=['subcollection_management', 'collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_collection__collection_id_subcollection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    collection_id: int = Path(..., alias='collectionId'),
):
    """
    Get Subcollection by Collection ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/product',
    description=""" This endpoint allows two types of request:

**Type 1:** Creating a new Product as well as a new Category path (including subcategories) and a new Brand by using `CategoryPath` and `BrandName` parameters.

**Type 2:** Creating a new Product given an existing `BrandId` and an existing `CategoryId`.

When creating a product, regardless of the type of request, if there is a need to create a new product with a specific custom product ID, specify the `Id` (integer) in the request body. Otherwise, VTEX will generate the ID automatically.

 ## Request body examples

 ### Type 1

 Request to create a product, associating it to a new Category and a new Brand by using `CategoryPath` and `BrandName`:

```json
{
    "Name": "Black T-Shirt",
    "CategoryPath": "Mens/Clothing/T-Shirts",
    "BrandName": "Nike",
    "RefId": "31011706925",
    "Title": "Black T-Shirt",
    "LinkId": "tshirt-black",
    "Description": "This is a cool Tshirt",
    "ReleaseDate": "2022-01-01T00:00:00",
    "IsVisible": true,
    "IsActive": true,
    "TaxCode": "",
    "MetaTagDescription": "tshirt black",
    "ShowWithoutStock": true,
    "Score": 1
}
```

 ### Type 2

Request to create a product, associating it to an existing `CategoryId` and `BrandId`:

```json
{
   "Name": "insert product test",
   "DepartmentId": 1,
   "CategoryId": 2,
   "BrandId": 2000000,
   "LinkId": "insert-product-test",
   "RefId": "310117869",
   "IsVisible": true,
   "Description": "texto de descrição",
   "DescriptionShort": "Utilize o CEP 04548-005 para frete grátis",
   "ReleaseDate": "2019-01-01T00:00:00",
   "KeyWords": "teste,teste2",
   "Title": "product de teste",
   "IsActive": true,
   "TaxCode": "",
   "MetaTagDescription": "tag test",
   "SupplierId": 1,
   "ShowWithoutStock": true,
   "AdWordsRemarketingCode": null,
   "LomadeeCampaignCode": null,
   "Score": 1
}
```

 ## Response body example

```json
{
   "Id": 52,
   "Name": "insert product test",
   "DepartmentId": 1,
   "CategoryId": 2,
   "BrandId": 2000000,
   "LinkId": "insert-product-test",
   "RefId": "310117869",
   "IsVisible": true,
   "Description": "texto de descrição",
   "DescriptionShort": "Utilize o CEP 04548-005 para frete grátis",
   "ReleaseDate": "2019-01-01T00:00:00",
   "KeyWords": "teste,teste2",
   "Title": "product de teste",
   "IsActive": true,
   "TaxCode": "",
   "MetaTagDescription": "tag test",
   "SupplierId": 1,
   "ShowWithoutStock": true,
   "AdWordsRemarketingCode": null,
   "LomadeeCampaignCode": null,
   "Score": 1
}
```
  
> 📘 Onboarding guide 
>
> Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey. """,
    tags=['product_management', 'brand_management', 'category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_product(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtProductPostRequest = None,
):
    """
    Create Product with Category and Brand
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/product/{productId}',
    description=""" Retrieves a specific Product by its ID. This information is exactly what is needed to create a new Product. 
> 📘 Onboarding guide 
>
> Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey. """,
    tags=['product_management', 'product_information'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_productbyid(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Get Product by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/product/{productId}',
    description=""" Updates an existing Product. """,
    tags=['product_management', 'product_information'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_product__product_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    body: ApiCatalogPvtProductProductIdPutRequest = None,
):
    """
    Update Product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/product/{productId}/salespolicy',
    description=""" Retrieves a list of Trade Policies associated to a Product based on the Product's ID. 
## Response body example

```json
[
    {
        "ProductId": 1,
        "StoreId": 1
    },
    {
        "ProductId": 1,
        "StoreId": 2
    },
    {
        "ProductId": 1,
        "StoreId": 3
    },
    {
        "ProductId": 1,
        "StoreId": 4
    }
]
``` """,
    tags=['trade_policy_operations', 'product_management', 'product_information'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_product__product_id_salespolicy(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Get Trade Policies by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/product/{productId}/salespolicy/{tradepolicyId}',
    description=""" Disassociates a Trade Policy of a Product. """,
    tags=['trade_policy_operations', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def remove_product_from_trade_policy(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    tradepolicy_id: int = Path(..., alias='tradepolicyId'),
):
    """
    Remove Product from Trade Policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/product/{productId}/salespolicy/{tradepolicyId}',
    description=""" Associates an existing Trade Policy with a Product. """,
    tags=['trade_policy_operations', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def associate_product_with_trade_policy(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    tradepolicy_id: int = Path(..., alias='tradepolicyId'),
):
    """
    Associate Product with Trade Policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/product/{productId}/similarcategory/',
    description=""" Retrieves Similar Categories from a Product.

## Response body example

```json
[
    {
        "ProductId": 1,
        "CategoryId": 1
    },
    {
        "ProductId": 1,
        "CategoryId": 20
    }
]
``` """,
    tags=['similar_category_management', 'category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_product__product_id_similarcategory_(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Get Similar Categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/product/{productId}/similarcategory/{categoryId}',
    description=""" Deletes a Similar Category from a Product. """,
    tags=['similar_category_management', 'category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_similar_category(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    category_id: int = Path(..., alias='categoryId'),
):
    """
    Delete Similar Category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/product/{productId}/similarcategory/{categoryId}',
    description=""" Adds a Similar Category to a Product.

## Response body example

```json
{
    "ProductId": 1,
    "StoreId": 1
}
``` """,
    tags=['similar_category_management', 'category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def add_similar_category_to_product(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    category_id: int = Path(..., alias='categoryId'),
):
    """
    Add Similar Category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/product/{productId}/specification',
    description=""" Deletes all Product Specifications given a specific Product ID. """,
    tags=['product_specification_handling', 'specification_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_all_product_specifications(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Delete all Product Specifications by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/product/{productId}/specification',
    description=""" Retrieves information of all specifications of a product by the product's ID.

 ### Response body example

```json
[
    {
        "Id": 227,
        "ProductId": 1,
        "FieldId": 33,
        "FieldValueId": 135,
        "Text": "ValueA"
    },
    {
        "Id": 228,
        "ProductId": 1,
        "FieldId": 34,
        "FieldValueId": 1,
        "Text": "Giant"
    }
]
``` """,
    tags=[
        'product_specification_handling',
        'product_management',
        'product_information',
        'specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_product_specificationby_product_i_d(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Get Product Specification and its information by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/product/{productId}/specification',
    description=""" Associates a previously defined Specification to a Product.

### Request body example

```json
{
    "FieldId": 19,
    "FieldValueId": 1,
    "Text": "test"
}
```

### Response body example

```json
{
    "Id": 41,
    "FieldId": 19,
    "FieldValueId": 1,
    "Text": "test"
}
``` """,
    tags=[
        'product_specification_handling',
        'specification_handling',
        'product_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_product__product_id_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    body: ApiCatalogPvtProductProductIdSpecificationPostRequest = None,
):
    """
    Associate Product Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/product/{productId}/specification/{specificationId}',
    description=""" Deletes a specific Product Specification given a Product ID and a Specification ID. """,
    tags=['product_specification_handling', 'specification_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def deletea_product_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    specification_id: int = Path(..., alias='specificationId'),
):
    """
    Delete a specific Product Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/product/{productId}/specificationvalue',
    description=""" Associates a specification to a product using specification name and group name. Automatically creates the informed group, specification and values if they had not been created before.

 ## Request body example

```json
{
    "FieldName": "Material",
    "GroupName": "Additional Information",
    "RootLevelSpecification": false,
    "FieldValues": [
        "Cotton",
       "Polyester"
        ]
}
```
 
 
## Response body example

```json
[
    {
        "Id": 53,
        "ProductId": 3,
        "FieldId": 21,
        "FieldValueId": 60,
        "Text": "Cotton"
    },
    {
        "Id": 54,
        "ProductId": 3,
        "FieldId": 21,
        "FieldValueId": 61,
        "Text": "Polyester"
    }
]
```
 """,
    tags=[
        'product_specification_handling',
        'specification_management',
        'specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_product__product_id_specificationvalue(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    body: ApiCatalogPvtProductProductIdSpecificationvaluePutRequest = None,
):
    """
    Associate product specification using specification name and group name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/skuattachment',
    description=""" Dissociates attachments and SKUs based on an SKU ID or an attachment ID. """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_skuattachment(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: Optional[int] = Query(None, alias='skuId'),
    attachment_id: Optional[int] = Query(None, alias='attachmentId'),
):
    """
    Dissociate attachments and SKUs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/skuattachment',
    description=""" Associates an existing SKU to an existing Attachment. 
## Request body example

```json
{
    "AttachmentId": 1,
    "SkuId": 7
}
```

## Response body example

```json
{
    "Id": 31,
    "AttachmentId": 1,
    "SkuId": 7
}
``` """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_skuattachment(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtSkuattachmentPostRequest = None,
):
    """
    Associate SKU Attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/skuattachment/{skuAttachmentAssociationId}',
    description=""" Deletes the association of an SKU to an Attachment. """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_sku_attachment_by_association_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_attachment_association_id: int = Path(..., alias='skuAttachmentAssociationId'),
):
    """
    Delete SKU Attachment by Attachment Association ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/skucomplement',
    description=""" Creates a new SKU Complement on a Parent SKU. 

## Request body example

```json
{
    "SkuId": 2,
    "ParentSkuId": 1,
    "ComplementTypeId": 2
}
```
 
## Response body example

```json
{
    "Id": 62,
    "SkuId": 2,
    "ParentSkuId": 1,
    "ComplementTypeId": 2
}
``` """,
    tags=['sku_complement_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_s_k_u_complement(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtSkucomplementPostRequest = None,
):
    """
    Create SKU Complement
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/skucomplement/{skuComplementId}',
    description=""" Deletes a previously existing SKU Complement by SKU Complement ID. """,
    tags=['sku_complement_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_s_k_u_complementby_s_k_u_complement_i_d(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_complement_id: int = Path(..., alias='skuComplementId'),
):
    """
    Delete SKU Complement by SKU Complement ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/skucomplement/{skuComplementId}',
    description=""" Retrieves an existing SKU Complement by its SKU Complement ID. 
 
## Response body example

```json
{
    "Id": 62,
    "SkuId": 2,
    "ParentSkuId": 1,
    "ComplementTypeId": 2
}
``` """,
    tags=['sku_complement_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_s_k_u_complementby_s_k_u_complement_i_d(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_complement_id: int = Path(..., alias='skuComplementId'),
):
    """
    Get SKU Complement by SKU Complement ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/skuservice',
    description=""" Associates an SKU Service to an SKU. """,
    tags=['sku_service_operations', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_skuservice(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtSkuservicePostRequest = None,
):
    """
    Associate SKU Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/skuservice/{skuServiceId}',
    description=""" Dissociates an SKU Service from an SKU. """,
    tags=['sku_service_operations', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_skuservice__sku_service_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_id: int = Path(..., alias='skuServiceId'),
):
    """
    Dissociate SKU Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/skuservice/{skuServiceId}',
    description=""" Retrieves an SKU Service. 
## Response body example

```json
{
    "Id": 1,
    "SkuServiceTypeId": 1,
    "SkuServiceValueId": 1,
    "SkuId": 1,
    "Name": "name",
    "Text": "text",
    "IsActive": false
}
``` """,
    tags=['sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_skuservice__sku_service_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_id: int = Path(..., alias='skuServiceId'),
):
    """
    Get SKU Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/skuservice/{skuServiceId}',
    description=""" Updates an SKU Service. 
## Request body example

```json
{
    "Name": "name",
    "Text": "text",
    "IsActive": false
}
```

## Response body example

```json
{
    "Id": 1,
    "SkuServiceTypeId": 1,
    "SkuServiceValueId": 1,
    "SkuId": 1,
    "Name": "name",
    "Text": "text",
    "IsActive": false
}
``` """,
    tags=['sku_service_operations', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_skuservice__sku_service_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_id: int = Path(..., alias='skuServiceId'),
    body: ApiCatalogPvtSkuserviceSkuServiceIdPutRequest = None,
):
    """
    Update SKU Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/skuservicetype',
    description=""" Creates a new SKU Service Type. 
## Request body example

```json
{
    "Name": "Test API Sku Services",
    "IsActive": true,
    "ShowOnProductFront": true,
    "ShowOnCartFront": true,
    "ShowOnAttachmentFront": true,
    "ShowOnFileUpload": true,
    "IsGiftCard": true,
    "IsRequired": true
}
```

## Response body example

```json
{
    "Id": 2,
    "Name": "Teste API Sku Services",
    "IsActive": true,
    "ShowOnProductFront": true,
    "ShowOnCartFront": true,
    "ShowOnAttachmentFront": true,
    "ShowOnFileUpload": true,
    "IsGiftCard": true,
    "IsRequired": true
}
``` """,
    tags=['sku_service_type_management', 'sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_skuservicetype(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SKUServiceTypeRequest = None,
):
    """
    Create SKU Service Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/skuservicetype/{skuServiceTypeId}',
    description=""" Deletes an existing SKU Service Type. """,
    tags=['sku_service_type_management', 'sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_skuservicetype__sku_service_type_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_type_id: int = Path(..., alias='skuServiceTypeId'),
):
    """
    Delete SKU Service Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/skuservicetype/{skuServiceTypeId}',
    description=""" Retrieves information about an existing SKU Service Type. 
## Response body example:

```json
{
    "Id": 2,
    "Name": "Test API SKU Services",
    "IsActive": true,
    "ShowOnProductFront": true,
    "ShowOnCartFront": true,
    "ShowOnAttachmentFront": true,
    "ShowOnFileUpload": true,
    "IsGiftCard": true,
    "IsRequired": true
}
``` """,
    tags=['sku_service_type_management', 'sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_skuservicetype__sku_service_type_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_type_id: int = Path(..., alias='skuServiceTypeId'),
):
    """
    Get SKU Service Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/skuservicetype/{skuServiceTypeId}',
    description=""" Updates an existing SKU Service Type.  
## Request body example

```json
{
    "Name": "Test API Sku Services",
    "IsActive": true,
    "ShowOnProductFront": true,
    "ShowOnCartFront": true,
    "ShowOnAttachmentFront": true,
    "ShowOnFileUpload": true,
    "IsGiftCard": true,
    "IsRequired": true
}
```

## Response body example

```json
{
    "Id": 2,
    "Name": "Teste API Sku Services",
    "IsActive": true,
    "ShowOnProductFront": true,
    "ShowOnCartFront": true,
    "ShowOnAttachmentFront": true,
    "ShowOnFileUpload": true,
    "IsGiftCard": true,
    "IsRequired": true
}
``` """,
    tags=['sku_service_type_management', 'sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_skuservicetype__sku_service_type_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_type_id: int = Path(..., alias='skuServiceTypeId'),
    body: SKUServiceTypeRequest = None,
):
    """
    Update SKU Service Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/skuservicetypeattachment',
    description=""" Dissociates an Attachment by its Attachment ID or SKU Service Type ID from an SKU Service Type. """,
    tags=['attachment_management', 'sku_attachment_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_skuservicetypeattachment(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    attachment_id: Optional[int] = Query(None, alias='attachmentId'),
    sku_service_type_id: Optional[int] = Query(None, alias='skuServiceTypeId'),
):
    """
    Dissociate Attachment by Attachment ID or SKU Service Type ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/skuservicetypeattachment',
    description=""" Associates an Attachment for an existing SKU Service Type. 
## Request body example

```json
{
    "AttachmentId": 1,
    "SkuServiceTypeId": 1
}
```

## Response body example

```json
{
    "Id": 1,
    "AttachmentId": 1,
    "SkuServiceTypeId": 1
}
``` """,
    tags=[
        'sku_attachment_management',
        'sku_service_operations',
        'sku_service_type_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_skuservicetypeattachment(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtSkuservicetypeattachmentPostRequest = None,
):
    """
    Associate SKU Service Attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/skuservicetypeattachment/{skuServiceTypeAttachmentId}',
    description=""" Dissociates an Attachment from an SKU Service Type """,
    tags=[
        'sku_attachment_management',
        'sku_service_operations',
        'sku_service_type_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def dissociate_sku_service_type_attachment(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_type_attachment_id: int = Path(..., alias='skuServiceTypeAttachmentId'),
):
    """
    Dissociate Attachment from SKU Service Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/skuservicevalue',
    description=""" Creates an SKU Service Value for an existing SKU Service Type. 
## Request body example

```json
{
    "SkuServiceTypeId": 2,
    "Name": "Test ServiceValue API",
    "Value": 10.5,
    "Cost": 10.5
}
```

## Response body example

```json
{
    "Id": 2,
    "SkuServiceTypeId": 2,
    "Name": "Test ServiceValue API",
    "Value": 10.5,
    "Cost": 10.5
}
``` """,
    tags=['sku_service_value_management', 'sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_skuservicevalue(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SKUServiceValueRequest = None,
):
    """
    Create SKU Service Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/skuservicevalue/{skuServiceValueId}',
    description=""" Deletes an existing SKU Service Value. """,
    tags=['sku_service_value_management', 'sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_skuservicevalue__sku_service_value_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_value_id: int = Path(..., alias='skuServiceValueId'),
):
    """
    Delete SKU Service Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/skuservicevalue/{skuServiceValueId}',
    description=""" Retrieves an existing SKU Service Value. 
## Response body example

```json
{
    "Id": 2,
    "SkuServiceTypeId": 2,
    "Name": "Test ServiceValue API",
    "Value": 10.5,
    "Cost": 10.5
}
``` """,
    tags=['sku_service_value_management', 'sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_skuservicevalue__sku_service_value_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_value_id: int = Path(..., alias='skuServiceValueId'),
):
    """
    Get SKU Service Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/skuservicevalue/{skuServiceValueId}',
    description=""" Updates an existing SKU Service Value. 
## Request body example

```json
{
    "SkuServiceTypeId": 2,
    "Name": "Test ServiceValue API",
    "Value": 10.5,
    "Cost": 10.5
}
```

## Response body example

```json
{
    "Id": 2,
    "SkuServiceTypeId": 2,
    "Name": "Test ServiceValue API",
    "Value": 10.5,
    "Cost": 10.5
}
``` """,
    tags=['sku_service_value_management', 'sku_service_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_skuservicevalue__sku_service_value_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_service_value_id: int = Path(..., alias='skuServiceValueId'),
    body: SKUServiceValueRequest = None,
):
    """
    Update SKU Service Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/specification',
    description=""" Creates a new Product or SKU Specification. 
## Request body example

```json
{
    "FieldTypeId": 1,
    "CategoryId": 4,
    "FieldGroupId": 20,
    "Name": "Material",
    "Description": "Composition of the product.",
    "Position": 1,
    "IsFilter": true,
    "IsRequired": true,
    "IsOnProductDetails": false,
    "IsStockKeepingUnit": false,
    "IsActive": true,
    "IsTopMenuLinkActive": false,
    "IsSideMenuLinkActive": true,
    "DefaultValue": "Cotton"
}
```

## Response body example

```json
{
    "Id": 88,
    "FieldTypeId": 1,
    "CategoryId": 4,
    "FieldGroupId": 20,
    "Name": "Material",
    "Description": "Composition of the product.",
    "Position": 1,
    "IsFilter": true,
    "IsRequired": true,
    "IsOnProductDetails": false,
    "IsStockKeepingUnit": false,
    "IsWizard": false,
    "IsActive": true,
    "IsTopMenuLinkActive": false,
    "IsSideMenuLinkActive": true,
    "DefaultValue": "Cotton"
}
```
 """,
    tags=[
        'specification_management',
        'product_specification_handling',
        'specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtSpecificationPostRequest = None,
):
    """
    Create Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/specification/nonstructured',
    description=""" Deletes unmapped Specifications of a Seller'S SKU in a Marketplace by SKU ID. """,
    tags=[
        'product_specification_handling',
        'sku_specification_management',
        'specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_specification_nonstructured(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Query(..., alias='skuId'),
):
    """
    Delete Non Structured Specification by SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/specification/nonstructured',
    description=""" Gets general information about unmapped Specifications of a Seller's SKU in a Marketplace by SKU ID. 
## Response body example

```json
[
{
    "Id": 1010,
    "SkuId": 310119072,
    "SpecificationName": "size",
    "SpecificationValue": "Small"
}
]
``` """,
    tags=[
        'product_specification_handling',
        'specification_handling',
        'sku_specification_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_specification_nonstructured(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Query(..., alias='skuId'),
):
    """
    Get Non Structured Specification by SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/specification/nonstructured/{Id}',
    description=""" Deletes unmapped Specifications of a Seller'S SKU in a Marketplace by its unique ID. """,
    tags=[
        'product_specification_handling',
        'specification_handling',
        'specification_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_specification_nonstructured___id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    id: int = Path(..., alias='Id'),
):
    """
    Delete Non Structured Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/specification/nonstructured/{Id}',
    description=""" Retrieves general information about unmapped Specifications of a Seller's SKU in a Marketplace. 
## Response body example

```json
{
    "Id": 1010,
    "SkuId": 310119072,
    "SpecificationName": "size",
    "SpecificationValue": "Small"
}
``` """,
    tags=['specification_management', 'specification_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_specification_nonstructured___id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    id: int = Path(..., alias='Id'),
):
    """
    Get Non Structured Specification by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/specification/{specificationId}',
    description=""" Retrieves information of a Product or SKU Specification. 
## Response body example

```json
{
    "Id": 88,
    "FieldTypeId": 1,
    "CategoryId": 4,
    "FieldGroupId": 20,
    "Name": "Material",
    "Description": "Composition of the product.",
    "Position": 1,
    "IsFilter": true,
    "IsRequired": true,
    "IsOnProductDetails": false,
    "IsStockKeepingUnit": false,
    "IsWizard": false,
    "IsActive": true,
    "IsTopMenuLinkActive": false,
    "IsSideMenuLinkActive": true,
    "DefaultValue": "Cotton"
}
```
 """,
    tags=[
        'specification_management',
        'specification_handling',
        'product_specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_specification__specification_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    specification_id: int = Path(..., alias='specificationId'),
):
    """
    Get Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/specification/{specificationId}',
    description=""" Updates a Product or SKU Specification. 
## Request body example

```json
{
    "FieldTypeId": 1,
    "CategoryId": 4,
    "FieldGroupId": 20,
    "Name": "Material",
    "Description": "Composition of the product.",
    "Position": 1,
    "IsFilter": true,
    "IsRequired": true,
    "IsOnProductDetails": false,
    "IsStockKeepingUnit": false,
    "IsActive": true,
    "IsTopMenuLinkActive": false,
    "IsSideMenuLinkActive": true,
    "DefaultValue": "Leather"
}
```

## Response body example

```json
{
    "Id": 88,
    "FieldTypeId": 1,
    "CategoryId": 4,
    "FieldGroupId": 20,
    "Name": "Material",
    "Description": "Composition of the product.",
    "Position": 1,
    "IsFilter": true,
    "IsRequired": true,
    "IsOnProductDetails": false,
    "IsStockKeepingUnit": false,
    "IsWizard": false,
    "IsActive": true,
    "IsTopMenuLinkActive": false,
    "IsSideMenuLinkActive": true,
    "DefaultValue": "Leather"
}
```
 """,
    tags=['specification_management', 'specification_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_specification__specification_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    specification_id: int = Path(..., alias='specificationId'),
    body: ApiCatalogPvtSpecificationSpecificationIdPutRequest = None,
):
    """
    Update Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/specificationgroup',
    description=""" Create a specification group. 
>⚠️ It is also possible to create a Specification Group by using an alternative legacy route: `/api/catalog_system/pvt/specification/group`. 
## Request body example

```json
{
    "CategoryId": 1,
    "Name": "Sizes"
}
```

## Response body example

```json
{
  "Id": 6,
  "CategoryId": 1,
  "Name": "Sizes",
  "Position": 3
}
``` """,
    tags=['specification_group_management', 'specification_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specification_group_insert2(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SpecificationGroupInsertRequest = ...,
):
    """
    Create Specification Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/specificationgroup/{groupId}',
    description=""" Update a specification group. 
>⚠️ It is also possible to update a Specification Group by using an alternative legacy route: `/api/catalog_system/pvt/specification/group`.

## Request and response body example

```json
{
    "CategoryId": 1,
    "Id": 17,
    "Name": "NewGroupName",
    "Position": 1
}
``` """,
    tags=['specification_group_management', 'specification_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_specificationgroup__group_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: int = Path(..., alias='groupId'),
    body: ApiCatalogPvtSpecificationgroupGroupIdPutRequest = None,
):
    """
    Update Specification Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/specificationvalue',
    description=""" Creates a new Specification Value for a Category. 
## Request body example

```json
{
    "FieldId": 193,
    "Name": "Metal",
    "IsActive": true,
    "Position": 1
  }
```

## Response body example

```json
{
  "FieldValueId": 360,
  "FieldId": 193,
  "Name": "Metal",
  "Text": null,
  "IsActive": true,
  "Position": 1
}
``` """,
    tags=[
        'specification_value_management',
        'specification_handling',
        'specification_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_specificationvalue(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtSpecificationvaluePostRequest = None,
):
    """
    Create Specification Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/specificationvalue/{specificationValueId}',
    description=""" Retrieves general information about a Specification Value. 
## Response body example

```json
{
    "FieldValueId": 143,
    "FieldId": 34,
    "Name": "Cotton",
    "Text": "Cotton fibers",
    "IsActive": true,
    "Position": 100
}
``` """,
    tags=[
        'specification_value_management',
        'specification_handling',
        'product_specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_specificationvalue__specification_value_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    specification_value_id: int = Path(..., alias='specificationValueId'),
):
    """
    Get Specification Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/specificationvalue/{specificationValueId}',
    description=""" Updates a new Specification Value for a Category. 
## Request body example

```json
{
    "FieldId": 193,
    "Name": "Metal",
    "Text": null,
    "IsActive": true,
    "Position": 1
  }
```

## Response body example

```json
{
  "FieldValueId": 360,
  "FieldId": 193,
  "Name": "Metal",
  "Text": null,
  "IsActive": true,
  "Position": 1
}
``` """,
    tags=[
        'specification_value_management',
        'specification_management',
        'product_specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_specificationvalue__specification_value_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    specification_value_id: int = Path(..., alias='specificationValueId'),
    body: ApiCatalogPvtSpecificationvalueSpecificationValueIdPutRequest = None,
):
    """
    Update Specification Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunit',
    description=""" Retrieves information about a specific SKU by its `RefId`. 

### Response body example

```json
{
    "Id": 1,
    "ProductId": 1,
    "IsActive": true,
    "Name": "Royal Canin Feline Urinary 500g",
    "RefId": "0001",
    "PackagedHeight": 6.0000,
    "PackagedLength": 24.0000,
    "PackagedWidth": 14.0000,
    "PackagedWeightKg": 550.0000,
    "Height": null,
    "Length": null,
    "Width": null,
    "WeightKg": null,
    "CubicWeight": 1.0000,
    "IsKit": false,
    "CreationDate": "2020-03-12T15:42:00",
    "RewardValue": null,
    "EstimatedDateArrival": null,
    "ManufacturerCode": "",
    "CommercialConditionId": 1,
    "MeasurementUnit": "un",
    "UnitMultiplier": 1.0000,
    "ModalType": null,
    "KitItensSellApart": false,
    "Videos": null
}
``` """,
    tags=['product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_stockkeepingunit(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    ref_id: str = Query(..., alias='refId'),
):
    """
    Get SKU by RefId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/stockkeepingunit',
    description=""" 

Creates a new SKU.

If there is a need to create a new SKU with a specific custom ID, specify the `Id` (integer) in the request. Otherwise, VTEX will generate the ID automatically.

### Request body example (custom ID)

```json
{
   "Id": 1, 
   "ProductId": 310117069,
   "IsActive": true,
   "ActivateIfPossible": true,
   "Name": "sku test",
   "RefId": "125478",
   "Ean": "8949461894984",
   "PackagedHeight": 10,
   "PackagedLength": 10,
   "PackagedWidth": 10,
   "PackagedWeightKg": 10,
   "Height": null,
   "Length": null,
   "Width": null,
   "WeightKg": null,
   "CubicWeight": 0.1667,
   "IsKit": false,
   "CreationDate": null,
   "RewardValue": null,
   "EstimatedDateArrival": null,
   "ManufacturerCode": "123",
   "CommercialConditionId": 1,
   "MeasurementUnit": "un",
   "UnitMultiplier": 2.0000,
   "ModalType": null,
   "KitItensSellApart": false,
   "Videos": [ "https://www.youtube.com/" ]
}
``` 

### Request body example (automatically generated ID)

```json
{
   "ProductId": 310117069,
   "IsActive": true,
   "ActivateIfPossible": true,
   "Name": "sku test",
   "RefId": "125478",
   "Ean": "8949461894984",
   "PackagedHeight": 10,
   "PackagedLength": 10,
   "PackagedWidth": 10,
   "PackagedWeightKg": 10,
   "Height": null,
   "Length": null,
   "Width": null,
   "WeightKg": null,
   "CubicWeight": 0.1667,
   "IsKit": false,
   "CreationDate": null,
   "RewardValue": null,
   "EstimatedDateArrival": null,
   "ManufacturerCode": "123",
   "CommercialConditionId": 1,
   "MeasurementUnit": "un",
   "UnitMultiplier": 2.0000,
   "ModalType": null,
   "KitItensSellApart": false,
   "Videos": [ "https://www.youtube.com/" ]
}
``` 

### Response body example

```json
{
   "Id":1,
   "ProductId": 310117069,
   "IsActive": true,
   "ActivateIfPossible": true,
   "Name": "sku test",
   "RefId": "125478",
   "Ean": "8949461894984",
   "PackagedHeight": 10,
   "PackagedLength": 10,
   "PackagedWidth": 10,
   "PackagedWeightKg": 10,
   "Height": null,
   "Length": null,
   "Width": null,
   "WeightKg": null,
   "CubicWeight": 0.1667,
   "IsKit": false,
   "CreationDate": null,
   "RewardValue": null,
   "EstimatedDateArrival": null,
   "ManufacturerCode": "123",
   "CommercialConditionId": 1,
   "MeasurementUnit": "un",
   "UnitMultiplier": 2.0000,
   "ModalType": null,
   "KitItensSellApart": false,
   "Videos": [ "https://www.youtube.com/" ]
}
``` """,
    tags=['sku_management', 'sku_service_operations', 'sku_specification_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_stockkeepingunit(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtStockkeepingunitPostRequest = None,
):
    """
    Create SKU
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/stockkeepingunit/copy/{skuIdfrom}/{skuIdto}/file/',
    description=""" Copy all existing files from an SKU to another SKU. 
## Response body example

```json
[
    {
        "Id": 1964,
        "ArchiveId": 155404,
        "SkuId": 1,
        "IsMain": true,
        "Label": ""
    },
    {
        "Id": 1965,
        "ArchiveId": 155429,
        "SkuId": 1,
        "IsMain": false,
        "Label": ""
    }
]
``` """,
    tags=['sku_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def copy_sku_files(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_idfrom: int = Path(..., alias='skuIdfrom'),
    sku_idto: int = Path(..., alias='skuIdto'),
):
    """
    Copy Files from an SKU to another SKU
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunit/disassociate/{skuId}/file/{skuFileId}',
    description=""" Disassociates an SKU File from an SKU. """,
    tags=['sku_attachment_management', 'sku_file_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def disassociate_sku_file(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    sku_file_id: int = Path(..., alias='skuFileId'),
):
    """
    Disassociate SKU File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunit/{skuId}',
    description=""" Retrieves a specific SKU by its ID.

### Response body example

```json
{
    "Id": 1,
    "ProductId": 1,
    "IsActive": true,
    "ActivateIfPossible": true,
    "Name": "Ração Royal Canin Feline Urinary 500g",
    "RefId": "0001",
    "PackagedHeight": 6.5000,
    "PackagedLength": 24.0000,
    "PackagedWidth": 14.0000,
    "PackagedWeightKg": 550.0000,
    "Height": 2.2000,
    "Length": 4.4000,
    "Width": 3.3000,
    "WeightKg": 1.1000,
    "CubicWeight": 0.4550,
    "IsKit": false,
    "CreationDate": "2021-06-08T15:25:00",
    "RewardValue": null,
    "EstimatedDateArrival": null,
    "ManufacturerCode": "",
    "CommercialConditionId": 1,
    "MeasurementUnit": "un",
    "UnitMultiplier": 300.0000,
    "ModalType": null,
    "KitItensSellApart": false,
    "Videos": [
        "www.google.com"
    ]
}
```  
> 📘 Onboarding guide 
>
> Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey. """,
    tags=['sku_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def sku(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Get SKU
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/stockkeepingunit/{skuId}',
    description=""" Updates an existing SKU. 

### Request body example

```json
{
   "Id": 310118448,
   "ProductId": 310117069,
   "IsActive": true,
   "ActivateIfPossible": true,
   "Name": "sku test",
   "RefId": "125478",
   "PackagedHeight": 10,
   "PackagedLength": 10,
   "PackagedWidth": 10,
   "PackagedWeightKg": 10,
   "Height": null,
   "Length": null,
   "Width": null,
   "WeightKg": null,
   "CubicWeight": 0.1667,
   "IsKit": false,
   "CreationDate": null,
   "RewardValue": null,
   "EstimatedDateArrival": null,
   "ManufacturerCode": "123",
   "CommercialConditionId": 1,
   "MeasurementUnit": "un",
   "UnitMultiplier": 2.0000,
   "ModalType": null,
   "KitItensSellApart": false,
   "Videos": [ "https://www.youtube.com/" ]
}
```

### Response body example

```json
{
    "Id": 310118449,
    "ProductId": 1,
    "IsActive": true,
    "ActivateIfPossible": true,
    "Name": "sku test",
    "RefId": "1254789",
    "PackagedHeight": 10.0,
    "PackagedLength": 10.0,
    "PackagedWidth": 10.0,
    "PackagedWeightKg": 10.0,
    "Height": null,
    "Length": null,
    "Width": null,
    "WeightKg": null,
    "CubicWeight": 0.1667,
    "IsKit": false,
    "CreationDate": "2020-04-22T12:12:47.5219561",
    "RewardValue": null,
    "EstimatedDateArrival": null,
    "ManufacturerCode": "123",
    "CommercialConditionId": 1,
    "MeasurementUnit": "un",
    "UnitMultiplier": 2.0000,
    "ModalType": null,
    "KitItensSellApart": false,
    "Videos": [ "https://www.youtube.com/" ]
}
``` """,
    tags=['sku_management', 'sku_specification_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_stockkeepingunit__sku_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    body: ApiCatalogPvtStockkeepingunitSkuIdPutRequest = None,
):
    """
    Update SKU
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/attachment',
    description=""" Retrieves existing SKU Attachments by SKU ID. 
## Response body example

```json
[
    {
        "Id": 97,
        "AttachmentId": 1,
        "SkuId": 1
    }
]
``` """,
    tags=['sku_attachment_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_stockkeepingunit__sku_id_attachment(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Get SKU Attachments by SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/complement',
    description=""" Retrieves an existing SKU Complement by its SKU ID. 

## Response body example

```json
[
    {
        "Id": 61,
        "SkuId": 7,
        "ParentSkuId": 1,
        "ComplementTypeId": 1
    }
]
``` """,
    tags=['sku_complement_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_s_k_u_complementby_s_k_u_i_d(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Get SKU Complement by SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/complement/{complementTypeId}',
    description=""" Retrieves all the existing SKU Complements with the same Complement Type ID of a specific SKU. 

## Response body example

```json
[
    {
        "Id": 61,
        "SkuId": 7,
        "ParentSkuId": 1,
        "ComplementTypeId": 1
    }
]
``` """,
    tags=['sku_complement_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_s_k_u_complementsby_complement_type_i_d(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    complement_type_id: int = Path(..., alias='complementTypeId'),
):
    """
    Get SKU Complements by Complement Type ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/ean',
    description=""" Deletes all EAN values of an SKU. """,
    tags=['sku_ean_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_stockkeepingunit__sku_id_ean(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Delete all SKU EAN values
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/ean',
    description=""" Retrieves the EAN of the SKU. 
## Response body example

```json
[
    "1234567890123"
]
``` """,
    tags=['sku_management', 'sku_ean_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_stockkeepingunit__sku_id_ean(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Get EAN by SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/ean/{ean}',
    description=""" Deletes the EAN value of an SKU. """,
    tags=['sku_management', 'sku_ean_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_stockkeepingunit__sku_id_ean__ean(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    ean: str = ...,
):
    """
    Delete SKU EAN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/ean/{ean}',
    description=""" Creates or updates the EAN value of an SKU. """,
    tags=['sku_ean_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_stockkeepingunit__sku_id_ean__ean(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    ean: str = ...,
):
    """
    Create SKU EAN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/file',
    description=""" Deletes all SKU Image Files. """,
    tags=['sku_file_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_stockkeepingunit__sku_id_file(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Delete All SKU Files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/file',
    description=""" Gets general information about all Files in the SKU. 
## Response body example

```json
[
    {
        "Id": 549,
        "ArchiveId": 155485,
        "SkuId": 310118490,
        "Name": "chimera-cat-quimera-5",
        "IsMain": true,
        "Label": "miau"
    },
    {
        "Id": 550,
        "ArchiveId": 155486,
        "SkuId": 310118490,
        "Name": "Gato-siames",
        "IsMain": false,
        "Label": "Gato siames"
    },
    {
        "Id": 555,
        "ArchiveId": 155491,
        "SkuId": 310118490,
        "Name": "Cat-Sleeping-Pics",
        "IsMain": false,
        "Label": null
    }
]
``` """,
    tags=['sku_file_management', 'sku_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_stockkeepingunit__sku_id_file(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Get SKU Files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/file',
    description=""" Creates a new Image for an SKU based on its URL or on a form-data request body. 
## Request body example

```json
{
      "IsMain": true,
      "Label": "",
      "Name": "Royal-Canin-Feline-Urinary-SO",
      "Text": null,
      "Url": "https://1.bp.blogspot.com/_SLQk9aAv9-o/S7NNbJPv7NI/AAAAAAAAAN8/V1LcO0ViDc4/s1600/waterbottle.jpg"
      
}
```

## Response body example

```json
{
      "Id": 503,
      "ArchiveId": 155491,
      "SkuId": 1,
      "Name": "Royal-Canin-Feline-Urinary-SO",
      "IsMain": true,
      "Label": ""
}
``` """,
    tags=['sku_file_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_stockkeepingunit__sku_id_file(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    body: SKUFileURL = None,
):
    """
    Create SKU File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/file/{skuFileId}',
    description=""" Deletes a specific SKU Image File. """,
    tags=['sku_file_management', 'sku_attachment_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_sku_image_file(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    sku_file_id: int = Path(..., alias='skuFileId'),
):
    """
    Delete SKU Image File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/file/{skuFileId}',
    description=""" Updates a new Image on an SKU based on its URL or on a form-data request body. 
## Request body example

```json
{
    "IsMain": true,
    "Label": null,
    "Name": "toilet-paper",
    "Text": null,
    "Url": "https://images-na.ssl-images-amazon.com/images/I/81DLLXaGI7L._SL1500_.jpg"
}
```

## Response body example

```json
{
    "Id": 508,
    "ArchiveId": 155491,
    "SkuId": 7,
    "IsMain": true,
    "Label": null
}
``` """,
    tags=['sku_file_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_stockkeepingunit__sku_id_file__sku_file_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    sku_file_id: int = Path(..., alias='skuFileId'),
    body: SKUFileURL = None,
):
    """
    Update SKU File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/specification',
    description=""" Deletes all SKU Specifications. """,
    tags=[
        'sku_specification_management',
        'product_specification_handling',
        'sku_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_stockkeepingunit__sku_id_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Delete all SKU Specifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/specification',
    description=""" Retrieves information about an SKU's Specifications. 
## Response body example

```json
[
    {
        "Id": 427,
        "SkuId": 7,
        "FieldId": 32,
        "FieldValueId": 131,
        "Text": "500g"
    },
    {
        "Id": 428,
        "SkuId": 7,
        "FieldId": 40,
        "FieldValueId": 133,
        "Text": "A"
    }
]
``` """,
    tags=[
        'sku_specification_management',
        'product_specification_handling',
        'sku_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_stockkeepingunit__sku_id_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Get SKU Specifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/specification',
    description=""" Associates a previously created Specification to an SKU. 
## Request body example

```json
{
    "FieldId": 65,
    "FieldValueId": 138
}
```

## Response body example

```json
{
    "Id": 730,
    "SkuId": 31,
    "FieldId": 65,
    "FieldValueId": 138,
    "Text": "Size"
}
``` """,
    tags=[
        'sku_specification_management',
        'product_specification_handling',
        'product_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_stockkeepingunit__sku_id_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    body: ApiCatalogPvtStockkeepingunitSkuIdSpecificationPostRequest = None,
):
    """
    Associate SKU Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/specification',
    description=""" Updates an existing Specification on an existing SKU. This endpoint only updates the `FieldValueId`. 
## Request body example

```json
{
  "Id": 65,
  "SkuId": 21,
  "FieldId": 32,
  "FieldValueId": 131,
  "Text": "Red"
}
```

## Response body example

```json
{
  "Id": 65,
  "SkuId": 21,
  "FieldId": 32,
  "FieldValueId": 131,
  "Text": "Red"
}
``` """,
    tags=[
        'sku_specification_management',
        'product_specification_handling',
        'specification_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_stockkeepingunit__sku_id_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    body: ApiCatalogPvtStockkeepingunitSkuIdSpecificationPutRequest = None,
):
    """
    Update SKU Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/specification/{specificationId}',
    description=""" Deletes a specific SKU Specification. """,
    tags=['sku_specification_management', 'product_specification_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_sku_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    specification_id: int = Path(..., alias='specificationId'),
):
    """
    Delete SKU Specification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/stockkeepingunit/{skuId}/specificationvalue',
    description=""" Associates a specification to an SKU using specification name and group name. Automatically creates the informed group, specification and values if they had not been created before.

 ## Request body example

```json
{
    "FieldName": "Size",
    "GroupName": "Sizes",
    "RootLevelSpecification": false,
    "FieldValues": [
        "M"
        ]
}
```
 
 
## Response body example

```json
[
    {
        "Id": 419,
        "SkuId": 5,
        "FieldId": 22,
        "FieldValueId": 62,
        "Text": "M"
    }
]
```
 """,
    tags=[
        'sku_specification_management',
        'specification_management',
        'product_specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_stockkeepingunit__sku_id_specificationvalue(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    body: ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest = None,
):
    """
    Associate SKU specification using specification name and group name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunitkit',
    description=""" Deletes all Kit’s components based on the Parent SKU ID or deletes a specific Kit’s component based on the SKU ID. """,
    tags=['sku_kit_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_stockkeepingunitkit(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: Optional[int] = Query(None, alias='skuId'),
    parent_sku_id: Optional[int] = Query(None, alias='parentSkuId'),
):
    """
    Delete SKU Kit by SKU ID or Parent SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunitkit',
    description=""" Retrieves general information about the components of an SKU Kit by SKU ID or Parent SKU ID. 
## Response body example

```json
{
    "Id": 7,
    "StockKeepingUnitParent": 7,
    "StockKeepingUnitId": 1,
    "Quantity": 1,
    "UnitPrice": 50.0000
}
``` """,
    tags=['sku_kit_management', 'product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_stockkeepingunitkit(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: Optional[int] = Query(None, alias='skuId'),
    parent_sku_id: Optional[int] = Query(None, alias='parentSkuId'),
):
    """
    Get SKU Kit by SKU ID or Parent SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/stockkeepingunitkit',
    description=""" Adds a component to a specific Kit. 
## Request body example

```json
{
    "StockKeepingUnitParent": 7,
    "StockKeepingUnitId": 1,
    "Quantity": 1,
    "UnitPrice": 50.0000
}
``` 
## Response body example

```json
{
    "Id": 7,
    "StockKeepingUnitParent": 7,
    "StockKeepingUnitId": 1,
    "Quantity": 1,
    "UnitPrice": 50.0000
}
``` """,
    tags=['sku_kit_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_stockkeepingunitkit(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtStockkeepingunitkitPostRequest = None,
):
    """
    Create SKU Kit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/stockkeepingunitkit/{kitId}',
    description=""" Deletes a specific Kit’s component based on its Kit ID. """,
    tags=['sku_kit_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_stockkeepingunitkit__kit_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    kit_id: int = Path(..., alias='kitId'),
):
    """
    Delete SKU Kit by KitId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/stockkeepingunitkit/{kitId}',
    description=""" Retrieves general information about a component of a Kit. """,
    tags=['sku_kit_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_stockkeepingunitkit__kit_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    kit_id: int = Path(..., alias='kitId'),
):
    """
    Get SKU Kit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/subcollection',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Creates a new Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection. A Subcollection can be either “Exclusive” (all the products contained in it will not be used) or “Inclusive” (all the products contained in it will be used).
## Request body example

```json
{
    "CollectionId": 149,
    "Name": "Test",
    "Type": "Exclusive",
    "PreSale": true,
    "Release": false
}
```
## Response body example

```json
{
    "Id": 13,
    "CollectionId": 149,
    "Name": "Test",
    "Type": "Exclusive",
    "PreSale": true,
    "Release": false
}
``` """,
    tags=['subcollection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_subcollection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogPvtSubcollectionPostRequest = None,
):
    """
    Create Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/subcollection/{subCollectionId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Deletes a previously created Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection. """,
    tags=['subcollection_management', 'collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_subcollection__sub_collection_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
):
    """
    Delete Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog/pvt/subcollection/{subCollectionId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Retrieves information about a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
## Response body example

```json
{
    "Id": 13,
    "CollectionId": 149,
    "Name": "Test",
    "Type": "Exclusive",
    "PreSale": true,
    "Release": false
}
``` """,
    tags=['subcollection_management', 'collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_pvt_subcollection__sub_collection_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
):
    """
    Get Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/subcollection/{subCollectionId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Updates a previously created Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.

## Request or response body example

```json
{
    "CollectionId": 149,
    "Name": "Test",
    "Type": "Exclusive",
    "PreSale": true,
    "Release": false
}
``` """,
    tags=['subcollection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_subcollection__sub_collection_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
    body: ApiCatalogPvtSubcollectionSubCollectionIdPutRequest = None,
):
    """
    Update Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/subcollection/{subCollectionId}/brand',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Associates a single Brand to a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
## Request body example

```json
{
    "BrandId": 2000000
}
```

## Response body example

```json
{
    "SubCollectionId": 17,
    "BrandId": 2000000
}
``` """,
    tags=['brand_management', 'subcollection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_subcollection__sub_collection_id_brand(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
    body: ApiCatalogPvtSubcollectionSubCollectionIdBrandPostRequest = None,
):
    """
    Associate Brand to Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/subcollection/{subCollectionId}/brand/{brandId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Deletes a Brand from a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection. """,
    tags=['brand_management', 'subcollection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_brand_from_subcollection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
    brand_id: int = Path(..., alias='brandId'),
):
    """
    Delete Brand from Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/subcollection/{subCollectionId}/brand/{categoryId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Deletes a Category from a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection. """,
    tags=['category_management', 'subcollection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_category_from_subcollection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
    category_id: int = Path(..., alias='categoryId'),
):
    """
    Delete Category from Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/subcollection/{subCollectionId}/category',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Associates a single Category to a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
## Request body example

```json
{
    "CategoryId": 1
}
```

## Response body example

```json
{
    "SubCollectionId": 17,
    "CategoryId": 1
}
``` """,
    tags=['subcollection_management', 'category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_subcollection__sub_collection_id_category(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
    body: ApiCatalogPvtSubcollectionSubCollectionIdCategoryPostRequest = None,
):
    """
    Associate Category to Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/subcollection/{subCollectionId}/stockkeepingunit',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Associates a single SKU to a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
## Request body example

```json
{
    "SkuId": 1
}
```

## Response body example

```json
{
    "SubCollectionId": 17,
    "SkuId": 1
}
``` """,
    tags=['sku_management', 'subcollection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def add_sku_to_subcollection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
    body: ApiCatalogPvtSubcollectionSubCollectionIdStockkeepingunitPostRequest = None,
):
    """
    Add SKU to Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/subcollection/{subCollectionId}/stockkeepingunit/{skuId}',
    description="""  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).

Deletes an SKU from a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection. """,
    tags=['sku_management', 'subcollection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_sku_from_subcollection(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sub_collection_id: int = Path(..., alias='subCollectionId'),
    sku_id: int = Path(..., alias='skuId'),
):
    """
    Delete SKU from Subcollection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog/pvt/supplier',
    description=""" Creates a new Supplier. 
## Request body example

```json
{
    "Name": "Supplier",
    "CorporateName": "TopStore",
    "StateInscription": "",
    "Cnpj": "33304981001272",
    "Phone": "3333333333",
    "CellPhone": "4444444444",
    "CorportePhone": "5555555555",
    "Email": "email@email.com",
    "IsActive": true
}
```

## Response body example

```json
{
    "Id": 1,
    "Name": "Supplier",
    "CorporateName": "TopStore",
    "StateInscription": "",
    "Cnpj": "33304981001272",
    "Phone": "3333333333",
    "CellPhone": "4444444444",
    "CorportePhone": "5555555555",
    "Email": "email@email.com",
    "IsActive": true
}
``` """,
    tags=['supplier_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def post_api_catalog_pvt_supplier(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SupplierRequest = None,
):
    """
    Create Supplier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/catalog/pvt/supplier/{supplierId}',
    description=""" Deletes an existing Supplier. """,
    tags=['supplier_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_api_catalog_pvt_supplier__supplier_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    supplier_id: int = Path(..., alias='supplierId'),
):
    """
    Delete Supplier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog/pvt/supplier/{supplierId}',
    description=""" Updates general information of an existing Supplier. 
## Request body example

```json
{
    "Name": "Supplier",
    "CorporateName": "TopStore",
    "StateInscription": "",
    "Cnpj": "33304981001272",
    "Phone": "3333333333",
    "CellPhone": "4444444444",
    "CorportePhone": "5555555555",
    "Email": "email@email.com",
    "IsActive": true
}
```

## Response body example

```json
{
    "Id": 1,
    "Name": "Supplier",
    "CorporateName": "TopStore",
    "StateInscription": "",
    "Cnpj": "33304981001272",
    "Phone": "3333333333",
    "CellPhone": "4444444444",
    "CorportePhone": "5555555555",
    "Email": "email@email.com",
    "IsActive": true
}
``` """,
    tags=['supplier_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_api_catalog_pvt_supplier__supplier_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    supplier_id: int = Path(..., alias='supplierId'),
    body: SupplierRequest = None,
):
    """
    Update Supplier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pub/category/tree/{categoryLevels}',
    description=""" Retrieves the Category Tree of your store. Get all the category levels registered in the Catalog or define the level up to which you want to get.  
> 📘 Onboarding guide 
>
> Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey. 
## Response body example

```json
[
    {
        "id": 1,
        "name": "Alimentação",
        "hasChildren": true,
        "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao",
        "children": [
            {
                "id": 6,
                "name": "Bebedouro",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/bebedouro",
                "children": [],
                "Title": "Bebedouro para Gatos",
                "MetaTagDescription": ""
            },
            {
                "id": 7,
                "name": "Comedouro",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/comedouro",
                "children": [],
                "Title": "Comedouro para Gatos",
                "MetaTagDescription": ""
            },
            {
                "id": 8,
                "name": "Biscoitos",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/biscoitos",
                "children": [],
                "Title": "Biscoitos para Gatos",
                "MetaTagDescription": ""
            },
            {
                "id": 9,
                "name": "Petiscos",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/petiscos",
                "children": [],
                "Title": "Petiscos para Gatos",
                "MetaTagDescription": ""
            },
            {
                "id": 10,
                "name": "Ração Seca",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/racao-seca",
                "children": [],
                "Title": "Ração Seca para Gatos",
                "MetaTagDescription": ""
            },
            {
                "id": 11,
                "name": "Ração Úmida",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/racao-umida",
                "children": [],
                "Title": "Ração Úmida para Gatos",
                "MetaTagDescription": ""
            }
        ],
        "Title": "Alimentação para Gatos",
        "MetaTagDescription": ""
    },
    {
        "id": 2,
        "name": "Brinquedos",
        "hasChildren": true,
        "url": "https://lojadobreno.vtexcommercestable.com.br/brinquedos",
        "children": [
            {
                "id": 12,
                "name": "Bolinhas",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/brinquedos/bolinhas",
                "children": [],
                "Title": "Bolinhas para Gatos",
                "MetaTagDescription": ""
            },
            {
                "id": 13,
                "name": "Ratinhos",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/brinquedos/ratinhos",
                "children": [],
                "Title": "Ratinhos",
                "MetaTagDescription": ""
            },
            {
                "id": 19,
                "name": "Arranhador para gato",
                "hasChildren": false,
                "url": "https://lojadobreno.vtexcommercestable.com.br/brinquedos/arranhador-para-gato",
                "children": [],
                "Title": "Brinquedo Arranhador para gatos",
                "MetaTagDescription": "Arranhador gatos é indispensável no lar com felinos. Ideais para afiar as unhas e garantir a diversão"
            }
        ],
        "Title": "Brinquedos para Gatos",
        "MetaTagDescription": ""
    }
]
``` """,
    tags=['category_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def category_tree(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    category_levels: str = Path(..., alias='categoryLevels'),
):
    """
    Get Category Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pub/products/variations/{productId}',
    description=""" Retrieves data about the product and all SKUs related to it by the product's ID.
## Response body example

```json
{
    "productId": 9,
    "name": "Camisa Masculina",
    "salesChannel": "2",
    "available": true,
    "displayMode": "lista",
    "dimensions": [
        "Cores",
        "Tamanho",
        "País de origem",
        "Gênero"
    ],
    "dimensionsInputType": {
        "Cores": "Combo",
        "Tamanho": "Combo",
        "País de origem": "Combo",
        "Gênero": "Combo"
    },
    "dimensionsMap": {
        "Cores": [
            "Amarelo",
            "Azul",
            "Vermelho"
        ],
        "Tamanho": [
            "P",
            "M",
            "G"
        ],
        "País de origem": [
            "Brasil"
        ],
        "Gênero": [
            "Masculino"
        ]
    },
    "skus": [
        {
            "sku": 310118454,
            "skuname": "Amarela - G",
            "dimensions": {
                "Cores": "Amarelo",
                "Tamanho": "G",
                "País de origem": "Brasil",
                "Gênero": "Masculino"
            },
            "available": false,
            "availablequantity": 0,
            "cacheVersionUsedToCallCheckout": null,
            "listPriceFormated": "R$ 0,00",
            "listPrice": 0,
            "taxFormated": "R$ 0,00",
            "taxAsInt": 0,
            "bestPriceFormated": "R$ 9.999.876,00",
            "bestPrice": 999987600,
            "spotPrice": 999987600,
            "installments": 0,
            "installmentsValue": 0,
            "installmentsInsterestRate": null,
            "image": "https://lojadobreno.vteximg.com.br/arquivos/ids/155467-292-292/image-5d7ad76ad1954c53adecab4138319034.jpg?v=637321899584500000",
            "sellerId": "1",
            "seller": "lojadobreno",
            "measures": {
                "cubicweight": 1.0000,
                "height": 5.0000,
                "length": 20.0000,
                "weight": 200.0000,
                "width": 20.0000
            },
            "unitMultiplier": 1.0000,
            "rewardValue": 0
        },
        {
            "sku": 310118455,
            "skuname": "Vermelha - M",
            "dimensions": {
                "Cores": "Vermelho",
                "Tamanho": "M",
                "País de origem": "Brasil",
                "Gênero": "Masculino"
            },
            "available": true,
            "availablequantity": 99999,
            "cacheVersionUsedToCallCheckout": "38395F1AEF59DF5CEAEDE472328145CD_",
            "listPriceFormated": "R$ 0,00",
            "listPrice": 0,
            "taxFormated": "R$ 0,00",
            "taxAsInt": 0,
            "bestPriceFormated": "R$ 20,00",
            "bestPrice": 2000,
            "spotPrice": 2000,
            "installments": 1,
            "installmentsValue": 2000,
            "installmentsInsterestRate": 0,
            "image": "https://lojadobreno.vteximg.com.br/arquivos/ids/155468-292-292/image-601a6099aace48b89d26fc9f22e8e611.jpg?v=637321906602470000",
            "sellerId": "pedrostore",
            "seller": "pedrostore",
            "measures": {
                "cubicweight": 0.4167,
                "height": 5.0000,
                "length": 20.0000,
                "weight": 200.0000,
                "width": 20.0000
            },
            "unitMultiplier": 1.0000,
            "rewardValue": 0
        }
    ]
}
``` """,
    tags=['product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def product_variations(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Get Product's SKUs by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pub/saleschannel/{salesChannelId}',
    description=""" Retrieves a specific sales channel by its ID. 

## Response body example

```json
{
    "Id": 1,
    "Name": "Loja Principal",
    "IsActive": true,
    "ProductClusterId": null,
    "CountryCode": "BRA",
    "CultureInfo": "pt-BR",
    "TimeZone": "E. South America Standard Time",
    "CurrencyCode": "BRL",
    "CurrencySymbol": "R$",
    "CurrencyLocale": 1046,
    "CurrencyFormatInfo": {
        "CurrencyDecimalDigits": 1,
        "CurrencyDecimalSeparator": ",",
        "CurrencyGroupSeparator": ".",
        "CurrencyGroupSize": 3,
        "StartsWithCurrencySymbol": true
    },
    "Origin": null,
    "Position": 2,
    "ConditionRule": null,
    "CurrencyDecimalDigits": 1
}
``` """,
    tags=['sales_channel_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def sales_channelby_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sales_channel_id: str = Path(..., alias='salesChannelId'),
):
    """
    Get Sales Channel by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pub/sku/stockkeepingunitidsbyrefids',
    description=""" Receives a list of Reference IDs and returns a list with the corresponding SKU IDs.

>⚠️ The list of Reference IDs in the request body cannot have repeated Reference IDs, or the API will return an error 500. 

## Request body example

```json
[
    "123",
    "D25133K-B2",
    "14-556",
    "DCF880L2-BR"
]
```

### Response body example

```json
{
    "123": "435",
    "D25133K-B2": "4351",
    "14-556": "3155",
    "DCF880L2-BR": "4500"
}
``` """,
    tags=['product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def sku_idlistby_ref_idlist(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogSystemPubSkuStockkeepingunitidsbyrefidsPostRequest = None,
):
    """
    Retrieve SKU ID list by Reference ID list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pub/specification/field/listByCategoryId/{categoryId}',
    description=""" Retrieves all specifications from a category by its ID.

## Response body example

```json
[
    {
        "Name": "Specification A",
        "CategoryId": 1,
        "FieldId": 33,
        "IsActive": true,
        "IsStockKeepingUnit": false
    },
    {
        "Name": "Specification B",
        "CategoryId": 1,
        "FieldId": 34,
        "IsActive": true,
        "IsStockKeepingUnit": false
    },
    {
        "Name": "Specification C",
        "CategoryId": 1,
        "FieldId": 35,
        "IsActive": false,
        "IsStockKeepingUnit": false
    }
]
``` """,
    tags=['category_management', 'specification_management', 'specification_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_by_category_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    category_id: int = Path(..., alias='categoryId'),
):
    """
    Get Specifications By Category ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pub/specification/field/listTreeByCategoryId/{categoryId}',
    description=""" Lists all specifications including the current category and the level zero specifications from a category by its ID. 

## Response body example

```json
[
    {
        "Name": "Specification A",
        "CategoryId": 1,
        "FieldId": 33,
        "IsActive": true,
        "IsStockKeepingUnit": false
    },
    {
        "Name": "Specification B",
        "CategoryId": 1,
        "FieldId": 34,
        "IsActive": true,
        "IsStockKeepingUnit": false
    },
    {
        "Name": "Specification C",
        "CategoryId": 1,
        "FieldId": 35,
        "IsActive": false,
        "IsStockKeepingUnit": false
    }
]
``` """,
    tags=['category_management', 'specification_management', 'specification_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_tree_by_category_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    category_id: int = Path(..., alias='categoryId'),
):
    """
    Get Specifications Tree By Category ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pub/specification/fieldGet/{fieldId}',
    description=""" Retrieves details from a specification field by this field's ID. 
>⚠️ This is a legacy endpoint. We recommend using [Get Specification](https://developers.vtex.com/vtex-rest-api/reference/get_api-catalog-pvt-specification-specificationid) instead.

## Response body example

```json
{
    "Name": "Material",
    "CategoryId": 4,
    "FieldId": 88,
    "IsActive": true,
    "IsRequired": true,
    "FieldTypeId": 1,
    "FieldTypeName": "Texto",
    "FieldValueId": null,
    "Description": "Composition of the product.",
    "IsStockKeepingUnit": false,
    "IsFilter": true,
    "IsOnProductDetails": false,
    "Position": 1,
    "IsWizard": false,
    "IsTopMenuLinkActive": false,
    "IsSideMenuLinkActive": true,
    "DefaultValue": null,
    "FieldGroupId": 20,
    "FieldGroupName": "Clothes specifications"
}
```

 """,
    tags=[
        'specification_management',
        'product_specification_handling',
        'specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_field(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    field_id: int = Path(..., alias='fieldId'),
):
    """
    Get Specification Field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pub/specification/fieldvalue/{fieldId}',
    description=""" Gets a list of all specification values from a Specification Field by this field's ID. 

## Response body example

```json
[
    {
        "FieldValueId": 52,
        "Value": "0 a 6 meses",
        "IsActive": true,
        "Position": 1
    },
    {
        "FieldValueId": 53,
        "Value": "1 a 2 anos",
        "IsActive": true,
        "Position": 4
    },
    {
        "FieldValueId": 54,
        "Value": "3 a 4 anos",
        "IsActive": true,
        "Position": 3
    },
    {
        "FieldValueId": 55,
        "Value": "5 a 6 anos",
        "IsActive": true,
        "Position": 2
    },
    {
        "FieldValueId": 56,
        "Value": "7 a 8 anos",
        "IsActive": true,
        "Position": 5
    },
    {
        "FieldValueId": 57,
        "Value": "9 a 10 anos",
        "IsActive": true,
        "Position": 6
    },
    {
        "FieldValueId": 58,
        "Value": "Acima de 10 anos",
        "IsActive": true,
        "Position": 7
    }
]
``` """,
    tags=[
        'specification_management',
        'specification_value_management',
        'product_specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_values_by_field_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    field_id: int = Path(..., alias='fieldId'),
):
    """
    Get Specification Values By Field ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pub/specification/groupGet/{groupId}',
    description=""" Retrieves details from a specification group by the ID of the group. 
## Response body example

```json
{
  "CategoryId": 1,
  "Id": 6,
  "Name": "Sizes",
  "Position": 3
}
``` """,
    tags=['specification_group_management', 'specification_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_group_get(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    Get Specification Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/brand/list',
    description=""" Retrieves all Brands registered in the store's Catalog. 
>⚠️ This route's response is limited to 20k results. If you need to obtain more results, please use the [Get Brand List](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-get-brand-list) endpoint instead to get a paginated response. 
## Response body example

```json
[
  {
    "id": 9280,
    "name": "Brand",
    "isActive": true,
    "title": "Brand",
    "metaTagDescription": "Brand",
    "imageUrl": null
  },
  {
    "id": 2000000,
    "name": "Orma Carbon",
    "isActive": true,
    "title": "Orma Carbon",
    "metaTagDescription": "Orma Carbon",
    "imageUrl": null
  },
  {
    "id": 2000001,
    "name": "Pedigree",
    "isActive": true,
    "title": "Pedigree",
    "metaTagDescription": "",
    "imageUrl": null
  }
]
``` """,
    tags=['brand_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def brand_list(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Brand List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/brand/pagedlist',
    description=""" Retrieves all Brands registered in the store's Catalog by page number.
## Response body example

```json
{
  "items": [
    {
      "id": 2000000,
      "name": "Farm",
      "isActive": true,
      "title": "Farm",
      "metaTagDescription": "Farm",
      "imageUrl": null
    },
    {
      "id": 2000001,
      "name": "Adidas",
      "isActive": true,
      "title": "",
      "metaTagDescription": "",
      "imageUrl": null
    },
    {
      "id": 2000002,
      "name": "Brastemp",
      "isActive": true,
      "title": "Brastemp",
      "metaTagDescription": "Brastemp",
      "imageUrl": null
    }
  ],
    "paging": {
      "page": 1,
        "perPage": 3,
          "total": 6,
            "pages": 2
    }
}
``` """,
    tags=['brand_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def brand_list_per_page(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    page_size: int = Query(..., alias='pageSize'),
    page: int = ...,
):
    """
    Get Brand List Per Page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/brand/{brandId}',
    description=""" Retrieves a specific Brand by its ID.
## Response body example

```json
{
  "id": 7000000,
  "name": "Pedigree",
  "isActive": true,
  "title": "Pedigree",
  "metaTagDescription": "Pedigree",
  "imageUrl": null
}
``` """,
    tags=['brand_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def brand(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    brand_id: str = Path(..., alias='brandId'),
):
    """
    Get Brand
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/collection/search',
    description=""" Retrieves a list of all collections matching a filter. """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def g_e_t__all_collections(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    page: int = ...,
    page_size: int = Query(..., alias='pageSize'),
    order_by_asc: bool = Query(..., alias='orderByAsc'),
):
    """
    Get All Collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/collection/search/{searchTerms}',
    description=""" Retrieves a list of collections matching a filter. """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def g_e_t__collectionsbyseachterms(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    search_terms: str = Path(..., alias='searchTerms'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    order_by_asc: Optional[bool] = Query(None, alias='orderByAsc'),
):
    """
    Get Collections by search terms
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/commercialcondition/list',
    description=""" Lists all commercial conditions on the store. 
## Response body example

```json
[
    {
        "Id": 1,
        "Name": "Padrão",
        "IsDefault": true
    },
    {
        "Id": 2,
        "Name": "Teste Fast",
        "IsDefault": false
    }
]
``` """,
    tags=['commercial_conditions'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_all_commercial_conditions(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get all commercial conditions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/commercialcondition/{commercialConditionId}',
    description=""" Retrieves information of a commercial condition by its ID. 
## Response body example

```json
{
    "Id": 1,
    "Name": "Padrão",
    "IsDefault": true
}
``` """,
    tags=['commercial_conditions'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_commercial_conditions(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    commercial_condition_id: int = Path(..., alias='commercialConditionId'),
):
    """
    Get commercial condition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/products/GetIndexedInfo/{productId}',
    description=""" Retrieve details of a Product's Indexed Information in XML format. 
## Response body example

```xml
"
<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
<response>\n
    <lst name=\"responseHeader\">
        <bool name=\"zkConnected\">true</bool>
        <int name=\"status\">0</int>
        <int name=\"QTime\">2</int>
        <lst name=\"params\">
            <str name=\"fl\">*</str>
            <arr name=\"fq\">
                <str>instanceId:394dbdc8-b1f4-4dea-adfa-1ec104f3bfe1</str>
                <str>productId:1</str>
            </arr>
        </lst>
    </lst>
    <result name=\"response\" numFound=\"0\" start=\"0\" maxScore=\"0.0\"></result>
    <lst name=\"facet_counts\">
        <lst name=\"facet_queries\"/>
        <lst name=\"facet_fields\"/>
        <lst name=\"facet_ranges\"/>
        <lst name=\"facet_intervals\"/>
        <lst name=\"facet_heatmaps\"/></lst>\n
</response>\n"
``` """,
    tags=['product_management', 'product_information'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def indexed_info(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Get Product Indexed Information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/products/GetProductAndSkuIds',
    description=""" Retrieves the IDs of products and SKUs. 
> 📘 Onboarding guide 
>
> Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey. """,
    tags=['product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def product_and_sku_ids(
    category_id: Optional[int] = Query(None, alias='categoryId'),
    field_from: Optional[int] = Query(None, alias='_from'),
    field_to: Optional[int] = Query(None, alias='_to'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Product and SKU IDs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/products/productget/{productId}',
    description=""" Retrieves a specific product's general information as name, description and the trade policies that it is included. """,
    tags=['product_management', 'product_information'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def productand_trade_policy(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Get Product and its general context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/products/productgetbyrefid/{refId}',
    description=""" Retrieves a specific product by its Reference ID. """,
    tags=['product_management', 'product_information'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def productby_ref_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    ref_id: str = Path(..., alias='refId'),
):
    """
    Get Product by RefId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/products/{productId}/specification',
    description=""" Retrieves all specifications of a product by the product's ID.
> 📘 Onboarding guide 
>
> Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.

### Response body example

```json
[
    {
        "Value": [
            "Iron",
            "Plastic"
        ],
        "Id": 30,
        "Name": "Material"
    }
]
``` """,
    tags=[
        'product_specification_handling',
        'product_management',
        'specification_management',
        'product_information',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_product_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Get Product Specification by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pvt/products/{productId}/specification',
    description=""" Updates the value of a product specification by the product's ID. The ID or name can be used to identify what product specification will be updated. Specification fields must be previously created in your Catalog.

### Request body example

```json
[
    {
        "Value": [
            "Iron",
            "Plastic"
        ],
        "Id": 30,
        "Name": "Material"
    }
]
``` """,
    tags=[
        'product_management',
        'product_specification_handling',
        'specification_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_product_specification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
    body: ApiCatalogSystemPvtProductsProductIdSpecificationPostRequest = ...,
):
    """
    Update Product Specification by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/saleschannel/list',
    description=""" Retrieves a list with details about the store's sales channels. 
## Response body example

```json
[
    {
        "Id": 1,
        "Name": "Loja Principal",
        "IsActive": true,
        "ProductClusterId": null,
        "CountryCode": "BRA",
        "CultureInfo": "pt-BR",
        "TimeZone": "E. South America Standard Time",
        "CurrencyCode": "BRL",
        "CurrencySymbol": "R$",
        "CurrencyLocale": 1046,
        "CurrencyFormatInfo": {
            "CurrencyDecimalDigits": 1,
            "CurrencyDecimalSeparator": ",",
            "CurrencyGroupSeparator": ".",
            "CurrencyGroupSize": 3,
            "StartsWithCurrencySymbol": true
        },
        "Origin": null,
        "Position": 2,
        "ConditionRule": null,
        "CurrencyDecimalDigits": 1
    }
]
``` """,
    tags=['sales_channel_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def sales_channel_list(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Sales Channel List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pvt/seller',
    description=""" Creates a new seller. """,
    tags=['seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_seller(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: CreateSellerRequest = ...,
):
    """
    Create Seller
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog_system/pvt/seller',
    description=""" Updates a seller. """,
    tags=['seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_seller(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: UpdateSellerRequest = ...,
):
    """
    Update Seller
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/seller/list',
    description=""" Retrieves the seller's details by its ID. """,
    tags=['seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def seller_list(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sc: Optional[int] = None,
    seller_type: Optional[int] = Query(None, alias='sellerType'),
    is_better_scope: Optional[bool] = Query(None, alias='isBetterScope'),
):
    """
    Get Seller List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/seller/{sellerId}',
    description=""" Retrieves the seller's details by its ID. """,
    tags=['seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_sellerby_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    seller_id: str = Path(..., alias='sellerId'),
):
    """
    Get Seller by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sellers/{sellerId}',
    description=""" Retrieves the seller's details by its ID. """,
    tags=['seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_sellersby_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    seller_id: str = Path(..., alias='sellerId'),
):
    """
    Get Seller by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pvt/sku/associateattachments',
    description=""" Associates attachments to an SKU based on a given SKU ID and attachment names.

This request removes existing SKU attachment associations and recreates the associations with the attachments being sent. 
## Request body example

```json
{
    "SkuId": 1,
    "AttachmentNames": [
        "T-Shirt Customization"
    ]
}
``` """,
    tags=['attachment_management', 'sku_attachment_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def associateattachmentsto_s_k_u(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCatalogSystemPvtSkuAssociateattachmentsPostRequest = ...,
):
    """
    Associate attachments to an SKU
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sku/complements/{parentSkuId}/{type}',
    description=""" Retrieves all the existing SKU complements with the same complement type ID of a specific SKU. 
 
## Response body example

```json
{
    "ParentSkuId": 1,
    "ComplementSkuIds": [
        7
    ],
    "Type": "1"
}
``` """,
    tags=['sku_complement_management', 'product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_s_k_ucomplementsbytype(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    parent_sku_id: int = Path(..., alias='parentSkuId'),
    type: int = ...,
):
    """
    Get SKU complements by type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sku/stockkeepingunitByProductId/{productId}',
    description=""" Retrieves a list with the SKUs related to a product by the product's ID.

### Response body example

```json
[
    {
        "IsPersisted": true,
        "IsRemoved": false,
        "Id": 2000035,
        "ProductId": 2000024,
        "IsActive": true,
        "Name": "33 - Preto",
        "Height": 8,
        "RealHeight": null,
        "Width": 15,
        "RealWidth": null,
        "Length": 8,
        "RealLength": null,
        "WeightKg": 340,
        "RealWeightKg": null,
        "ModalId": 1,
        "RefId": "",
        "CubicWeight": 0.2,
        "IsKit": false,
        "IsDynamicKit": null,
        "InternalNote": null,
        "DateUpdated": "2015-11-06T19:10:00",
        "RewardValue": 0.01,
        "CommercialConditionId": 1,
        "EstimatedDateArrival": "",
        "FlagKitItensSellApart": false,
        "ManufacturerCode": "",
        "ReferenceStockKeepingUnitId": null,
        "Position": 0,
        "EditionSkuId": null,
        "ApprovedAdminId": 123,
        "EditionAdminId": 123,
        "ActivateIfPossible": true,
        "SupplierCode": null,
        "MeasurementUnit": "un",
        "UnitMultiplier": 2.0000,
        "IsInventoried": null,
        "IsTransported": null,
        "IsGiftCardRecharge": null,
        "ModalType": ""
    }
]
``` """,
    tags=['product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def skulistby_product_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: int = Path(..., alias='productId'),
):
    """
    Get SKU list by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sku/stockkeepingunitbyalternateId/{alternateId}',
    description=""" Retrieves an SKU by its Alternate ID.

### Response body example

```json
{
    "Id": 310118450,
    "ProductId": 2,
    "NameComplete": "Caixa de Areia Azul Petmate sku test",
    "ComplementName": "",
    "ProductName": "Caixa de Areia Azul Petmate",
    "ProductDescription": "",
    "ProductRefId": "",
    "TaxCode": "",
    "SkuName": "sku test",
    "IsActive": true,
    "IsTransported": true,
    "IsInventoried": true,
    "IsGiftCardRecharge": false,
    "ImageUrl": "https://lojadobreno.vteximg.com.br/arquivos/ids/155451-55-55/caixa-areia-azul-petmate.jpg?v=637139451191670000",
    "DetailUrl": "/caixa-de-areia-azul-petmate/p",
    "CSCIdentification": null,
    "BrandId": "2000005",
    "BrandName": "Petmate",
    "IsBrandActive": true,
    "Dimension": {
        "cubicweight": 0.2083,
        "height": 10.0000,
        "length": 10.0000,
        "weight": 10.0000,
        "width": 10.0000
    },
    "RealDimension": {
        "realCubicWeight": 0.000,
        "realHeight": 0.0,
        "realLength": 0.0,
        "realWeight": 0.0,
        "realWidth": 0.0
    },
    "ManufacturerCode": "123",
    "IsKit": false,
    "KitItems": [],
    "Services": [],
    "Categories": [],
    "CategoriesFullPath": [
        "/3/15/",
        "/3/",
        "/1/"
    ],
    "Attachments": [],
    "Collections": [],
    "SkuSellers": [
        {
            "SellerId": "1",
            "StockKeepingUnitId": 310118450,
            "SellerStockKeepingUnitId": "310118450",
            "IsActive": true,
            "FreightCommissionPercentage": 0.0,
            "ProductCommissionPercentage": 0.0
        }
    ],
    "SalesChannels": [
        1,
        3
    ],
    "Images": [
        {
            "ImageUrl": "https://lojadobreno.vteximg.com.br/arquivos/ids/155451/caixa-areia-azul-petmate.jpg?v=637139451191670000",
            "ImageName": null,
            "FileId": 155451
        }
    ],
    "Videos": [],
    "SkuSpecifications": [],
    "ProductSpecifications": [],
    "ProductClustersIds": "151,158",
    "PositionsInClusters": {
        "151": 1,
        "158": 2
    },
    "ProductClusterNames": {
        "151": "asdfghj",
        "158": "Coleção halloween"
    },
    "ProductClusterHighlights": {
        "151": "asdfghj"
    },
    "ProductCategoryIds": "/3/15/",
    "IsDirectCategoryActive": true,
    "ProductGlobalCategoryId": 5000,
    "ProductCategories": {
        "15": "Caixa de Areia",
        "3": "Higiene",
        "1": "Alimentação"
    },
    "CommercialConditionId": 1,
    "RewardValue": 0.0,
    "AlternateIds": {
        "RefId": "1"
    },
    "AlternateIdValues": [
        "1"
    ],
    "EstimatedDateArrival": null,
    "MeasurementUnit": "un",
    "UnitMultiplier": 1.0000,
    "InformationSource": null,
    "ModalType": null,
    "KeyWords": "",
    "ReleaseDate": "2020-01-06T00:00:00Z",
    "ProductIsVisible": true,
    "ShowIfNotAvailable": true,
    "IsProductActive": true,
    "ProductFinalScore": 0
}
``` """,
    tags=['sku_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def skuby_alternate_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    alternate_id: int = Path(..., alias='alternateId'),
):
    """
    Get SKU by Alternate ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sku/stockkeepingunitbyean/{ean}',
    description=""" Retrieves an SKU by its EAN ID. 
## Response body example

```json
{
    "Id": 2001773,
    "ProductId": 2001426,
    "NameComplete": "Tabela de Basquete",
    "ProductName": "Tabela de Basquete",
    "ProductDescription": "Tabela de Basquete",
    "SkuName": "Tabela de Basquete",
    "IsActive": true,
    "IsTransported": true,
    "IsInventoried": true,
    "IsGiftCardRecharge": false,
    "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168952-55-55/7508800GG.jpg",
    "DetailUrl": "/tabela-de-basquete/p",
    "CSCIdentification": null,
    "BrandId": "2000018",
    "BrandName": "MARCA ARGOLO TESTE",
    "Dimension": {
        "cubicweight": 81.6833,
        "height": 65,
        "length": 58,
        "weight": 10000,
        "width": 130
    },
    "RealDimension": {
        "realCubicWeight": 274.1375,
        "realHeight": 241,
        "realLength": 65,
        "realWeight": 9800,
        "realWidth": 105
    },
    "ManufacturerCode": "",
    "IsKit": false,
    "KitItems": [],
    "Services": [],
    "Categories": [],
    "Attachments": [
        {
            "Id": 3,
            "Name": "Mensagem",
            "Keys": [
                "nome;20",
                "foto;40"
            ],
            "Fields": [
                {
                    "FieldName": "nome",
                    "MaxCaracters": "20",
                    "DomainValues": "Adalberto,Pedro,João"
                },
                {
                    "FieldName": "foto",
                    "MaxCaracters": "40",
                    "DomainValues": null
                }
            ],
            "IsActive": true,
            "IsRequired": false
        }
    ],
    "Collections": [],
    "SkuSellers": [
        {
            "SellerId": "1",
            "StockKeepingUnitId": 2001773,
            "SellerStockKeepingUnitId": "2001773",
            "IsActive": true,
            "FreightCommissionPercentage": 0,
            "ProductCommissionPercentage": 0
        }
    ],
    "SalesChannels": [
        1,
        2,
        3,
        10
    ],
    "Images": [
        {
            "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168952/7508800GG.jpg",
            "ImageName": "",
            "FileId": 168952
        },
        {
            "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168953/7508800_1GG.jpg",
            "ImageName": "",
            "FileId": 168953
        },
        {
            "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168954/7508800_2GG.jpg",
            "ImageName": "",
            "FileId": 168954
        }
    ],
    "SkuSpecifications": [
        {
            "FieldId": 102,
            "FieldName": "Cor",
            "FieldValueIds": [
                266
            ],
            "FieldValues": [
                "Padrão"
            ]
        }
    ],
    "ProductSpecifications": [
        {
            "FieldId": 7,
            "FieldName": "Faixa Etária",
            "FieldValueIds": [
                58,
                56,
                55,
                52
            ],
            "FieldValues": [
                "5 a 6 anos",
                "7 a 8 anos",
                "9 a 10 anos",
                "Acima de 10 anos"
            ]
        },
        {
            "FieldId": 23,
            "FieldName": "Fabricante",
            "FieldValueIds": [],
            "FieldValues": [
                "Xalingo"
            ]
        }
    ],
    "ProductClustersIds": "176,187,192,194,211,217,235,242",
    "ProductCategoryIds": "/59/",
    "ProductGlobalCategoryId": null,
    "ProductCategories": {
        "59": "Brinquedos"
    },
    "CommercialConditionId": 1,
    "RewardValue": 100.0,
    "AlternateIds": {
        "Ean": "8781",
        "RefId": "878181"
    },
    "AlternateIdValues": [
        "8781",
        "878181"
    ],
    "EstimatedDateArrival": "",
    "MeasurementUnit": "un",
    "UnitMultiplier": 2.0000,
    "InformationSource": null,
    "ModalType": ""
}
``` """,
    tags=['sku_ean_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def skuby_e_a_n(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    ean: str = ...,
):
    """
    Get SKU by EAN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sku/stockkeepingunitbyid/{skuId}',
    description=""" Retrieves context of an SKU.
> 📘 Onboarding guide 
>
> Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.

 ## Response body example

```json
{
    "Id": 2001773,
    "ProductId": 2001426,
    "NameComplete": "Tabela de Basquete",
    "ComplementName": "",
    "ProductName": "Tabela de Basquete",
    "ProductDescription": "Tabela de Basquete",
    "SkuName": "Tabela de Basquete",
    "ProductRefId": "0987",
    "TaxCode": "",
    "IsActive": true,
    "IsTransported": true,
    "IsInventoried": true,
    "IsGiftCardRecharge": false,
    "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168952-55-55/7508800GG.jpg",
    "DetailUrl": "/tabela-de-basquete/p",
    "CSCIdentification": null,
    "BrandId": "2000018",
    "BrandName": "MARCA ARGOLO TESTE",
    "IsBrandActive": true,
    "Dimension": {
        "cubicweight": 81.6833,
        "height": 65,
        "length": 58,
        "weight": 10000,
        "width": 130
    },
    "RealDimension": {
        "realCubicWeight": 274.1375,
        "realHeight": 241,
        "realLength": 65,
        "realWeight": 9800,
        "realWidth": 105
    },
    "ManufacturerCode": "",
    "IsKit": false,
    "KitItems": [],
    "Services": [],
    "Categories": [],
    "CategoriesFullPath": [
        "/1/10/",
        "/1/",
        "/20/"
    ],
    "Attachments": [
        {
            "Id": 3,
            "Name": "Mensagem",
            "Keys": [
                "nome;20",
                "foto;40"
            ],
            "Fields": [
                {
                    "FieldName": "nome",
                    "MaxCaracters": "20",
                    "DomainValues": "Adalberto,Pedro,João"
                },
                {
                    "FieldName": "foto",
                    "MaxCaracters": "40",
                    "DomainValues": null
                }
            ],
            "IsActive": true,
            "IsRequired": false
        }
    ],
    "Collections": [],
    "SkuSellers": [
        {
            "SellerId": "1",
            "StockKeepingUnitId": 2001773,
            "SellerStockKeepingUnitId": "2001773",
            "IsActive": true,
            "FreightCommissionPercentage": 0,
            "ProductCommissionPercentage": 0
        }
    ],
    "SalesChannels": [
        1,
        2,
        3,
        10
    ],
    "Images": [
        {
            "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168952/7508800GG.jpg",
            "ImageName": "",
            "FileId": 168952
        },
        {
            "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168953/7508800_1GG.jpg",
            "ImageName": "",
            "FileId": 168953
        },
        {
            "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168954/7508800_2GG.jpg",
            "ImageName": "",
            "FileId": 168954
        }
    ],
    "Videos": [
        "www.google.com"
    ],
    "SkuSpecifications": [
        {
            "FieldId": 102,
            "FieldName": "Cor",
            "FieldValueIds": [
                266
            ],
            "FieldValues": [
                "Padrão"
            ],
            "IsFilter": false,
            "FieldGroupId": 11,
            "FieldGroupName": "Especificações"
        }
    ],
    "ProductSpecifications": [
        {
            "FieldId": 7,
            "FieldName": "Faixa Etária",
            "FieldValueIds": [
                58,
                56,
                55,
                52
            ],
            "FieldValues": [
                "5 a 6 anos",
                "7 a 8 anos",
                "9 a 10 anos",
                "Acima de 10 anos"
            ],
            "IsFilter": true,
            "FieldGroupId": 17,
            "FieldGroupName": "NewGroupName 2"
        },
        {
            "FieldId": 23,
            "FieldName": "Fabricante",
            "FieldValueIds": [],
            "FieldValues": [
                "Xalingo"
            ],
            "IsFilter": false,
            "FieldGroupId": 17,
            "FieldGroupName": "NewGroupName 2"
        }
    ],
    "ProductClustersIds": "176,187,192,194,211,217,235,242",
    "PositionsInClusters": {
        "151": 3,
        "152": 0,
        "158": 1
    },
    "ProductClusterNames": {
        "151": "asdfghj",
        "152": "George",
        "158": "Coleção halloween"
    },
    "ProductClusterHighlights": {
        "151": "asdfghj",
        "152": "George"
    },
    "ProductCategoryIds": "/59/",
    "IsDirectCategoryActive": false,
    "ProductGlobalCategoryId": null,
    "ProductCategories": {
        "59": "Brinquedos"
    },
    "CommercialConditionId": 1,
    "RewardValue": 100.0,
    "AlternateIds": {
        "Ean": "8781",
        "RefId": "878181"
    },
    "AlternateIdValues": [
        "8781",
        "878181"
    ],
    "EstimatedDateArrival": "",
    "MeasurementUnit": "un",
    "UnitMultiplier": 2.0000,
    "InformationSource": "Indexer",
    "ModalType": "",
    "KeyWords": "basquete, tabela",
    "ReleaseDate": "2020-01-06T00:00:00",
    "ProductIsVisible": true,
    "ShowIfNotAvailable": true,
    "IsProductActive": true,
    "ProductFinalScore": 0
}
``` """,
    tags=['sku_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def sku_context(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: int = Path(..., alias='skuId'),
    sc: Optional[int] = None,
):
    """
    Get SKU and context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sku/stockkeepingunitidbyrefid/{refId}',
    description=""" Retrieves an SKU ID by the SKU's Reference ID. 

### Response body example

```json
"310118450"
``` """,
    tags=['product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def sku_idby_ref_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    ref_id: str = Path(..., alias='refId'),
):
    """
    Get SKU ID by Reference ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sku/stockkeepingunitids',
    description=""" Retrieves the IDs of all SKUs in your store. Presents the results with page size and pagination.
> 📘 Onboarding guide 
>
> Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.

### Response body example

```json
[
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
]
``` """,
    tags=['product_management', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def listall_s_k_u_i_ds(
    page: int,
    pagesize: int = ...,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    List all SKU IDs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/sku/stockkeepingunitidsbysaleschannel',
    description=""" Retrieves a list of SKU IDs of a Trade Policy. 
## Response body example

```json
[
    405380,
    405381,
    405382,
    405383,
    405384,
    405385,
    405386,
    405387,
    405388,
    405389,
    405390,
    405391,
    405392,
    405393,
    405394,
    405395,
    405396,
    405397,
    405398,
    405399,
    405400,
    405556
]
``` """,
    tags=['trade_policy_operations', 'sku_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_api_catalog_system_pvt_sku_stockkeepingunitidsbysaleschannel(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sc: int = ...,
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    only_assigned: Optional[bool] = Query(None, alias='onlyAssigned'),
):
    """
    List all SKUs of a Trade Policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}',
    description="""  > ⚠️ Check out the updated version of the SKU Seller endpoints in our [SKU Bindings API documentation](https://developers.vtex.com/vtex-rest-api/reference/getbyskuid). If you are doing this integration for the first time, we recommend that you follow the updated documentation.

The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.

With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.

There are two information expected by the marketplace in this request: the `sellerId`, which identifies the seller, and the `sellerSkuId`, which identifies the binding of the seller with the SKU.

Both information are passed through the request URL. The body of the request should be empty. """,
    tags=['sku_management', 'seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def change_notification_seller_id_sku_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    seller_id: str = Path(..., alias='sellerId'),
    seller_sku_id: str = Path(..., alias='sellerSkuId'),
):
    """
    Change Notification with Seller ID and Seller SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pvt/skuseller/changenotification/{skuId}',
    description="""  > ⚠️ Check out the updated version of the SKU Seller endpoints in our [SKU Bindings API documentation](https://developers.vtex.com/vtex-rest-api/reference/getbyskuid). If you are doing this integration for the first time, we recommend that you follow the updated documentation.

The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.

With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.

The body of the request should be empty.
## Example

Let's say your seller has the ID `123` in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID `700`.

In this case, you would have to replace the `sellerId` parameter with the value `123` and the `skuId` parameter with the value `700`. The URL of the request would be the following.

```
https://{{accountName}}.vtexcommercestable.com.br/api/catalog_system/pvt/skuseller/changenotification/123/700
```

## Response codes

The following response codes are possible for this request.

* 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: "Seller StockKeepingUnit `{{skuId}}` not found for this seller id `{{sellerId}}`". This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.
* 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU's inventory and price.
* 429 - Failure due to too many requests.
* 403 - Failure in the authentication. """,
    tags=['sku_management', 'product_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def change_notification(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    sku_id: str = Path(..., alias='skuId'),
):
    """
    Change Notification with SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}',
    description="""  > ⚠️ Check out the updated version of the SKU Seller endpoints in our [SKU Bindings API documentation](https://developers.vtex.com/vtex-rest-api/reference/getbyskuid). If you are doing this integration for the first time, we recommend that you follow the updated documentation.

Remove a seller's SKU binding, given the seller ID and the SKU ID in the seller's store. """,
    tags=['sku_management', 'seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_s_k_usellerassociation(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    seller_id: str = Path(..., alias='sellerId'),
    seller_sku_id: str = Path(..., alias='sellerSkuId'),
):
    """
    Remove a seller's SKU binding
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}',
    description="""  > ⚠️ Check out the updated version of the SKU Seller endpoints in our [SKU Bindings API documentation](https://developers.vtex.com/vtex-rest-api/reference/getbyskuid). If you are doing this integration for the first time, we recommend that you follow the updated documentation.

Retrieves the details of a seller's SKU given a seller ID and the SKU ID in the seller's store. 
## Response body example

```json
{
    "IsPersisted": true,
    "IsRemoved": false,
    "SkuSellerId": 799,
    "SellerId": "myseller",
    "StockKeepingUnitId": 50,
    "SellerStockKeepingUnitId": "502",
    "IsActive": true,
    "UpdateDate": "2018-10-11T04:52:42.1",
    "RequestedUpdateDate": null
}
``` """,
    tags=['sku_management', 'product_management', 'seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_s_k_useller(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    seller_id: str = Path(..., alias='sellerId'),
    seller_sku_id: str = Path(..., alias='sellerSkuId'),
):
    """
    Get details of a seller's SKU
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pvt/specification/field',
    description=""" Creates a specification field in a category. 
>⚠️ This is a legacy endpoint. We recommend using [Create Specification](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-post-specification) instead.

## Request body example

```json
{
    "Name": "Material",
    "CategoryId": 4,
    "FieldId": 88,
    "IsActive": true,
    "IsRequired": true,
    "FieldTypeId": 1,
    "FieldValueId": 1,
    "IsStockKeepingUnit": false,
    "Description": "Composition of the product.",
    "IsFilter": true,
    "IsOnProductDetails": false,
    "Position": 1,
    "IsWizard": false,
    "IsTopMenuLinkActive": true,
    "IsSideMenuLinkActive": true,
    "DefaultValue": null,
    "FieldGroupId": 20,
    "FieldGroupName": "Clothes specifications"
}
```

## Response body example

```json
89
``` """,
    tags=[
        'specification_handling',
        'specification_management',
        'product_specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_insert_field(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SpecificationsInsertFieldRequest = ...,
):
    """
    Create Specification Field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog_system/pvt/specification/field',
    description=""" Updates a specification field in a category. 
>⚠️ This is a legacy endpoint. We recommend using [Update Specification](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-put-specification) instead.

## Request body example

```json
{
    "FieldId": 89,
    "Name": "Material",
    "CategoryId": 4,
    "IsActive": true,
    "IsRequired": true,
    "FieldTypeId": 1,
    "Description": "Composition of the product.",
    "IsStockKeepingUnit": false,
    "IsFilter": true,
    "IsOnProductDetails": true,
    "Position": 1,
    "IsWizard": false,
    "IsTopMenuLinkActive": false,
    "IsSideMenuLinkActive": false,
    "DefaultValue": "Cotton",
    "FieldGroupId": 20,
    "FieldGroupName": "Clothes specifications"
}
```

## Response body example

```json
89
``` """,
    tags=['specification_management', 'specification_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_insert_field_update(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SpecificationsInsertFieldUpdateRequest = ...,
):
    """
    Update Specification Field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/catalog_system/pvt/specification/fieldValue',
    description=""" Creates a specification field value by the specification field's ID. 
>⚠️ This is a legacy endpoint. We recommend using [Create Specification Value](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-post-specification-value) instead.


## Request body example

```json
{
    "FieldId": 34,
    "Name": "Cotton",
    "Text": "Cotton fibers",
    "IsActive": true,
    "Position": 100
}
```

## Response body example

```json
{
    "FieldValueId": 143,
    "FieldId": 34,
    "Name": "Cotton",
    "Text": "Cotton fibers",
    "IsActive": true,
    "Position": 100
}
``` """,
    tags=[
        'specification_handling',
        'specification_value_management',
        'specification_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_insert_field_value(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SpecificationsInsertFieldValueRequest = ...,
):
    """
    Create Specification Field Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/catalog_system/pvt/specification/fieldValue',
    description=""" Updates a specification field value by the specification field's ID. 
>⚠️ This is a legacy endpoint. We recommend using [Update Specification Field Value](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-put-specification-value-id) instead.


## Request body example

```json
{
    "FieldId": 1,
    "FieldValueId": 143,
    "Name": "Cotton",
    "Text": "Cotton fibers",
    "IsActive": true,
    "Position": 100
}
```

## Response body example (200 OK)

```json
"Field Value Updated"
``` """,
    tags=[
        'specification_management',
        'product_specification_handling',
        'specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_update_field_value(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SpecificationsUpdateFieldValueRequest = ...,
):
    """
    Update Specification Field Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/specification/fieldValue/{fieldValueId}',
    description=""" Retrieves details from a specification field's value by this value's ID. 
>⚠️ This is a legacy endpoint. We recommend using [Get Specification Value](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-get-specification-value-id) instead.

## Response body example

```json
{
    "FieldValueId": 143,
    "FieldId": 34,
    "Name": "TesteInsert",
    "Text": "Value Description",
    "IsActive": true,
    "Position": 100
}
``` """,
    tags=[
        'specification_management',
        'specification_value_management',
        'specification_handling',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_get_field_value(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    field_value_id: str = Path(..., alias='fieldValueId'),
):
    """
    Get Specification Field Value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/catalog_system/pvt/specification/groupbycategory/{categoryId}',
    description=""" Retrieves a list of specification groups by the category ID. 
## Response body example

```json
[
    {
      "CategoryId": 1,
      "Id": 5,
      "Name": "Materials",
      "Position": 2
    },
    {
      "CategoryId": 1,
      "Id": 6,
      "Name": "Sizes",
      "Position": 3
    }
  ]
``` """,
    tags=[
        'category_management',
        'specification_management',
        'specification_group_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def specifications_group_listby_category(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    category_id: str = Path(..., alias='categoryId'),
):
    """
    List Specification Group by Category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
