# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:52:30+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class AlternateIds(BaseModel):
    Ean: Optional[str] = Field(None, description='SKU EAN.')
    RefId: Optional[str] = Field(None, description='SKU Reference ID.')


class Domain(BaseModel):
    DomainValues: Optional[str] = Field(
        None,
        description='Allowed key values.',
        examples=['7,9,10'],
        title='DomainValues',
    )
    FieldName: Optional[str] = Field(
        None, description='Attachment key name.', examples=['Number'], title='FieldName'
    )
    MaxCaracters: Optional[str] = Field(
        None,
        description='Maximum number of characters in the attachment key.',
        examples=['1'],
        title='MaxCaracters',
    )


class AttachmentRequest(BaseModel):
    Domains: List[Domain] = Field(
        ...,
        description='List of characteristics related to the attachment.',
        title='Domains',
    )
    IsActive: bool = Field(
        ...,
        description='Defines if the attachment is active or not.',
        examples=[False],
        title='IsActive',
    )
    IsRequired: bool = Field(
        ...,
        description='Defines if the attachment is required or not.',
        examples=[False],
        title='IsRequired',
    )
    Name: str = Field(
        ...,
        description='Attachment Name.',
        examples=['Shirt customization'],
        title='Name',
    )


class AttachmentResponse(BaseModel):
    Domains: List[Domain] = Field(
        ...,
        description='List of characteristics related to the attachment.',
        title='Domains',
    )
    Id: int = Field(..., description='Attachment ID.', examples=[8], title='Id')
    IsActive: bool = Field(
        ...,
        description='Defines if the attachment is active or not.',
        examples=[False],
        title='IsActive',
    )
    IsRequired: bool = Field(
        ...,
        description='Defines if the attachment is required or not.',
        examples=[False],
        title='IsRequired',
    )
    Name: str = Field(
        ...,
        description='Attachment Name.',
        examples=['Shirt customization'],
        title='Name',
    )


class BrandCreateUpdate(BaseModel):
    Active: Optional[bool] = Field(
        None,
        description='Defines if the brand is active (`true`) or not (`false`).',
        examples=[True],
        title='Active',
    )
    AdWordsRemarketingCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    Id: int = Field(
        ..., description="Brand's unique numerical identifier.", examples=[2000003]
    )
    Keywords: Optional[str] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - Alternative search terms that will lead to the specific brand. The user can find the desired brand even when misspelling it. Used especially when words are of foreign origin and have a distinct spelling that is transcribed into a generic one, or when small spelling mistakes occur.\r\n',
        examples=['adidas'],
    )
    LinkId: Optional[str] = Field(
        None,
        description='Brand page slug. Only lowercase letters and hyphens (`-`) are allowed.',
        examples=['adidas-sports'],
        title='LinkID',
    )
    LomadeeCampaignCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    MenuHome: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - Defines if the Brand appears in the Department Menu control (`<vtex.cmc:departmentNavigator/>`).\r\n',
        examples=[True],
        title='MenuHome',
    )
    Name: str = Field(..., description='Brand name.', examples=['Adidas'])
    Score: Optional[int] = Field(
        None,
        description='Store Framework - Deprecated\r\nLegacy CMS Portal - Value used to set the priority on the search result page.\r\n',
        examples=[10],
    )
    SiteTitle: Optional[str] = Field(
        None,
        description='Meta Title for the Brand page.',
        examples=['Adidas'],
        title='SiteTitle',
    )
    Text: Optional[str] = Field(
        None,
        description='Meta Description for the Brand page. A brief description of the brand, displayed by search engines. Since search engines can only display less than 150 characters, we recommend not exceeding this character limit when creating the description.',
        examples=['Adidas'],
        title='Text',
    )


class BrandGet(BaseModel):
    id: int = Field(..., description="Brand's unique numerical identifier.")
    imageUrl: str = Field(..., description="URL of the brand's image.")
    isActive: bool = Field(
        ..., description='Defines if the brand is active (`true`) or not (`false`).'
    )
    metaTagDescription: str = Field(
        ...,
        description='Meta Description for the Brand page. A brief description of the brand, displayed by search engines. Since search engines can only display less than 150 characters, we recommend not exceeding this character limit when creating the description.',
    )
    name: str = Field(..., description='Brand name.')
    title: str = Field(..., description='Meta Title for the Brand page.')


class Category(BaseModel):
    ActiveStoreFrontLink: bool = Field(
        ...,
        description='Defines if the Category has an active link on the website (`true`) or not (`false`).',
    )
    AdWordsRemarketingCode: str = Field(
        ...,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    Description: str = Field(..., description='Describes details about the category.')
    FatherCategoryId: int = Field(
        ...,
        description='ID of the father category, apply in case of category and subcategory.',
    )
    GlobalCategoryId: int = Field(..., description='Google Global Category ID.')
    HasChildren: bool = Field(
        ...,
        description='Defines if the category has child categories (`true`) or not (`false`).',
    )
    Id: int = Field(..., description='Category ID.')
    IsActive: bool = Field(
        ..., description='Shows if the category is active (`true`) or not (`false`).'
    )
    Keywords: str = Field(..., description='Substitutes words for the category.')
    LinkId: str = Field(..., description='Text Link.')
    LomadeeCampaignCode: str = Field(
        ...,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    Name: str = Field(..., description='Category name.')
    Score: int = Field(..., description='Score for search ordination.')
    ShowBrandFilter: bool = Field(
        ...,
        description='Defines if the category has brand filter (`true`) or not (`false`).',
    )
    ShowInStoreFront: bool = Field(
        ...,
        description='Defines if the category is shown on side and upper menu (`true`) or not (`false`).',
    )
    StockKeepingUnitSelectionMode: str = Field(
        ..., description='Defines how the SKU will be exhibited.'
    )
    Title: str = Field(..., description='Category page title.')


class CategorySpecificationItem(BaseModel):
    CategoryId: Optional[int] = Field(None, description='Category ID.', examples=[1])
    FieldId: Optional[int] = Field(None, description='Specification ID.', examples=[1])
    IsActive: Optional[bool] = Field(
        None, description='Defines if the specification is active.', examples=[True]
    )
    IsStockKeepingUnit: Optional[bool] = Field(
        None, description='Defines if it is an SKU specification.', examples=[True]
    )
    Name: Optional[str] = Field(
        None, description='Specification name.', examples=['Composition']
    )


class CategorySpecification(RootModel[List[CategorySpecificationItem]]):
    root: List[CategorySpecificationItem] = Field(
        ...,
        description='Array of objects.',
        examples=[
            [
                {
                    'CategoryId': 1,
                    'FieldId': 33,
                    'IsActive': True,
                    'IsStockKeepingUnit': False,
                    'Name': 'Specification A',
                },
                {
                    'CategoryId': 1,
                    'FieldId': 34,
                    'IsActive': True,
                    'IsStockKeepingUnit': False,
                    'Name': 'Specification B',
                },
                {
                    'CategoryId': 1,
                    'FieldId': 35,
                    'IsActive': False,
                    'IsStockKeepingUnit': False,
                    'Name': 'Specification C',
                },
            ]
        ],
        title='Category Specification',
    )


class CreateCategoryRequest(BaseModel):
    ActiveStoreFrontLink: bool = Field(
        ...,
        description='If true, the Category link becomes active in store.',
        examples=[True],
        title='ActiveStoreFrontLink',
    )
    AdWordsRemarketingCode: str = Field(
        ...,
        description='This is a legacy field. Do not take this information into consideration.',
        examples=['Sale'],
    )
    Description: str = Field(
        ...,
        description='Text used in meta description tag for Category page.',
        examples=[
            'Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.'
        ],
        title='Description',
    )
    FatherCategoryId: int = Field(
        ...,
        description='ID of the parent category, apply in case of category and subcategory.',
        examples=[2],
        title='FatherCategoryId',
    )
    GlobalCategoryId: int = Field(
        ...,
        description='Google Global Category ID.',
        examples=[222],
        title='GlobalCategoryId',
    )
    Id: Optional[int] = Field(
        None,
        description='Category unique identifier. If not informed, it will be automatically generated by VTEX.',
        examples=[1],
        title='Id',
    )
    IsActive: bool = Field(
        ...,
        description='If true, the Category page becomes available in store.',
        examples=[True],
        title='IsActive',
    )
    Keywords: str = Field(
        ...,
        description='Substitute words for the Category.',
        examples=['Kitchen, Laundry, Appliances'],
        title='Keywords',
    )
    LomadeeCampaignCode: str = Field(
        ...,
        description='This is a legacy field. Do not take this information into consideration.',
        examples=['Sale'],
    )
    Name: str = Field(
        ..., description='Category name.', examples=['Home Appliances'], title='Name'
    )
    Score: int = Field(
        ..., description='Score for search sorting order.', examples=[3], title='Score'
    )
    ShowBrandFilter: bool = Field(
        ...,
        description='If true, the Category page displays a Brand filter.',
        examples=[True],
        title='ShowBrandFilter',
    )
    ShowInStoreFront: bool = Field(
        ...,
        description='If true, the Category is shown in the top and side menu.',
        examples=[True],
        title='ShowInStoreFront',
    )
    StockKeepingUnitSelectionMode: str = Field(
        ...,
        description='Defines how the SKU will be exhibited',
        examples=['SPECIFICATION'],
        title='StockKeepingUnitSelectionMode',
    )
    Title: str = Field(
        ...,
        description='Text used in title tag for Category page.',
        examples=['Home Appliances'],
        title='Title',
    )


class CreateSellerRequest(BaseModel):
    ArchiveId: int = Field(..., description='Seller archive ID.', examples=[1])
    CNPJ: str = Field(
        ..., description='Company registration number.', examples=['12035072751']
    )
    CSCIdentification: str = Field(
        ..., description='CSC identification.', examples=['pedrostore']
    )
    CatalogSystemEndpoint: str = Field(
        ...,
        description="URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.",
        examples=['http://pedrostore.vtexcommercestable.com.br/api/catalog_system/'],
    )
    CategoryCommissionPercentage: Optional[str] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
        examples=[
            '[{"CategoryId":14,"ProductCommission":15.0,"FreightCommission":0.0}]'
        ],
    )
    DeliveryPolicy: str = Field(
        ...,
        description='Text describing the delivery policy previously agreed between the marketplace and the seller.',
        examples=['Delivery policy text'],
    )
    Description: str = Field(
        ...,
        description='Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).',
        examples=['Brief description'],
    )
    Email: str = Field(
        ...,
        description='Email of the admin responsible for the seller.',
        examples=['breno@breno.com'],
    )
    ExchangeReturnPolicy: str = Field(
        ...,
        description='Text describing the exchange and return policy previously agreed between the marketplace and the seller.',
        examples=['Exchange return policy text'],
    )
    FreightCommissionPercentage: float = Field(
        ...,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
        examples=[0],
    )
    FulfillmentEndpoint: str = Field(
        ...,
        description="URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.",
        examples=[
            'http://pedrostore.vtexcommercestable.com.br/api/fulfillment?affiliateid=LDB&sc=1'
        ],
    )
    FulfillmentSellerId: int = Field(
        ...,
        description='Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.',
        examples=[1],
    )
    IsActive: bool = Field(
        ...,
        description='If the selle is active (`true`) or not (`false`).',
        examples=[True],
    )
    IsBetterScope: bool = Field(
        ...,
        description='Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).',
        examples=[False],
    )
    MerchantName: Optional[str] = Field(
        None,
        description='Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-payment--6k5JidhYRUxileNolY2VLx) article to know more.',
        examples=['pedrostore'],
    )
    Name: str = Field(
        ...,
        description="Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.",
        examples=['My pedrostore'],
    )
    Password: str = Field(..., description='Seller password.', examples=['passoword'])
    ProductCommissionPercentage: float = Field(
        ...,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
        examples=[0],
    )
    SecutityPrivacyPolicy: str = Field(
        ...,
        description='Text describing the security policy previously agreed between the marketplace and the seller.',
        examples=['Secutity privacy policy text'],
    )
    SellerId: str = Field(
        ...,
        description="Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.",
        examples=['pedrostore'],
    )
    SellerType: int = Field(..., description='Seller type.', examples=[1])
    TrustPolicy: Optional[str] = Field(
        None,
        description="Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.",
        examples=['Default'],
    )
    UrlLogo: str = Field(..., description='Seller URL logo.', examples=['/myseller'])
    UseHybridPaymentOptions: bool = Field(
        ...,
        description='Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.',
        examples=[False],
    )
    UserName: str = Field(..., description='Seller username.', examples=['myseller'])


class Dimension(BaseModel):
    cubicweight: float = Field(..., description='SKU Cubic Weight.')
    height: float = Field(..., description='SKU Height.')
    length: float = Field(..., description='SKU Length.')
    weight: float = Field(..., description='SKU Weight.')
    width: float = Field(..., description='SKU Width.')


class FieldModel(BaseModel):
    DomainValues: str = Field(..., description='Allowed key values.')
    FieldName: str = Field(..., description='Attachment field name.')
    MaxCaracters: str = Field(
        ...,
        description='Maximum number of characters accepted in the attachment field.',
    )


class GetCategoryTreeChild(BaseModel):
    MetaTagDescription: str = Field(
        ...,
        description='Category page Meta tag description.',
        examples=['New and used dolls for sale.'],
    )
    Title: str = Field(..., description='Category page title.', examples=['Dolls'])
    children: List = Field(
        ..., description="Array with information about the category's children."
    )
    hasChildren: bool = Field(
        ...,
        description='If the category has a category child (`true`) or not (`false`).',
        examples=[True],
    )
    id: int = Field(..., description='Category ID.', examples=[1])
    name: str = Field(..., description='Category name.', examples=['Dolls'])
    url: str = Field(
        ...,
        description='Category URL.',
        examples=['https://lojadobreno.vtexcommercestable.com.br/dolls'],
    )


class GetSpecFieldValue(BaseModel):
    FieldValueId: int = Field(..., description='Specification Field Value ID.')
    IsActive: bool = Field(
        ...,
        description='Defines if the Specification Field is active (`true`) or inactive (`false`).',
    )
    Position: int = Field(..., description='Specification Field Value Position.')
    Value: str = Field(..., description='Specification Field Value.')


class GetorUpdateProductSpecification(BaseModel):
    Id: Optional[int] = Field(
        None, description='ID of the Specification.', examples=[7]
    )
    Name: Optional[str] = Field(
        None, description='Name of the Specification.', examples=['Fabric']
    )
    Value: List[str] = Field(..., description='Array with Specification values.')


class Image(BaseModel):
    FileId: int = Field(..., description='SKU image ID.')
    ImageName: str = Field(..., description='Image label.')
    ImageUrl: str = Field(..., description='Image URL.')


class ProductSpecification(BaseModel):
    FieldId: int = Field(..., description='Specification ID.')
    FieldName: str = Field(..., description='Specification Name.')
    FieldValueIds: List[int] = Field(
        ..., description='Array with related Specification Values IDs.'
    )
    FieldValues: List[str] = Field(
        ..., description='Array with related Specification Values.'
    )


class RealDimension(BaseModel):
    realCubicWeight: float = Field(..., description='Real SKU Cubic Weight.')
    realHeight: float = Field(..., description='Real SKU Height.')
    realLength: float = Field(..., description='Real SKU Length.')
    realWeight: float = Field(..., description='Real SKU Weight.')
    realWidth: float = Field(..., description='Real SKU Width.')


class SKUFile(RootModel[bytes]):
    root: bytes = Field(
        ..., description='The image file has a size limit of 3200 x 3200 pixels.'
    )


class SKUFileURL(BaseModel):
    IsMain: Optional[bool] = Field(
        None,
        description='Defines if the Image is the main image of the SKU.',
        examples=[True],
        title='IsMain',
    )
    Label: Optional[str] = Field(
        None, description='SKU image label.', examples=['Main'], title='Label'
    )
    Name: str = Field(
        ...,
        description='SKU image name.',
        examples=['Nike-Red-Janoski-1'],
        title='Name',
    )
    Text: Optional[str] = Field(
        None,
        description='General text of the image.',
        examples=['Nike-Red-Janoski'],
        title='Text',
    )
    Url: str = Field(
        ...,
        description="External Image's URL.  The URL must start with the protocol identifier (`http://` or `https://`) and end with the file extension (`.jpg`, `.png` or `.gif`).",
        examples=['https://m.media-amazon.com/images/I/610G2-sJx5L._AC_UX695_.jpg'],
        title='Url',
    )


class SKUService(BaseModel):
    Id: Optional[int] = Field(None, description='SKU Service ID.', examples=[1])
    IsActive: Optional[bool] = Field(
        None,
        description='Defines if the SKU Service is active or not.',
        examples=[True],
    )
    Name: Optional[str] = Field(
        None,
        description='SKU Service Name. Maximum of 50 characters.',
        examples=['Engraving'],
    )
    SkuId: Optional[int] = Field(None, description='SKU ID.', examples=[1])
    SkuServiceTypeId: Optional[int] = Field(
        None, description='SKU Service Type ID.', examples=[1]
    )
    SkuServiceValueId: Optional[int] = Field(
        None, description='SKU Service Value ID.', examples=[1]
    )
    Text: Optional[str] = Field(
        None,
        description='Internal description of the SKU Service. Maximum of 100 characters.',
        examples=['Name engraving additional service.'],
    )


class SKUServiceTypeRequest(BaseModel):
    IsActive: bool = Field(
        ...,
        description='Defines if the SKU Service Type is active or not.',
        title='IsActive',
    )
    IsGiftCard: bool = Field(
        ...,
        description='Defines if the SKU Service Type is displayed as a Gift Card.',
        examples=[False],
        title='IsGiftCard',
    )
    IsRequired: bool = Field(
        ...,
        description='Defines if the SKU Service type is mandatory.',
        examples=[False],
        title='IsRequired',
    )
    Name: str = Field(
        ...,
        description='SKU Service Type Name. Maximum of 100 characters.',
        title='Name',
    )
    ShowOnAttachmentFront: bool = Field(
        ...,
        description='Defines if the SKU Service Type has an attachment.',
        examples=[False],
        title='ShowOnAttachmentFront',
    )
    ShowOnCartFront: bool = Field(
        ...,
        description='Defines if the SKU Service Type is displayed on the cart screen.',
        examples=[False],
        title='ShowOnCartFront',
    )
    ShowOnFileUpload: bool = Field(
        ...,
        description='Defines if the SKU Service Type can be associated with an attachment or not.',
        examples=[False],
        title='ShowOnFileUpload',
    )
    ShowOnProductFront: bool = Field(
        ..., description='Deprecated', examples=[False], title='ShowOnProductFront'
    )


class SKUServiceTypeResponse(BaseModel):
    Id: Optional[int] = Field(
        None, description='SKU Service Type ID.', examples=[2], title='Id'
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Defines if the SKU Service Type is active or not.',
        examples=[True],
        title='IsActive',
    )
    IsGiftCard: Optional[bool] = Field(
        False,
        description='Defines if the SKU Service Type is displayed as a Gift Card.',
        title='IsGiftCard',
    )
    IsRequired: Optional[bool] = Field(
        False,
        description='Defines if the SKU Service type is mandatory.',
        title='IsRequired',
    )
    Name: Optional[str] = Field(
        None,
        description='SKU Service Type Name. Maximum of 100 characters.',
        examples=['Test API Sku Services'],
        title='Name',
    )
    ShowOnAttachmentFront: Optional[bool] = Field(
        False,
        description='Defines if the SKU Service Type has an attachment.',
        title='ShowOnAttachmentFront',
    )
    ShowOnCartFront: Optional[bool] = Field(
        None,
        description='Defines if the SKU Service Type is displayed on the cart screen.',
        examples=[False],
        title='ShowOnCartFront',
    )
    ShowOnFileUpload: Optional[bool] = Field(
        False,
        description='Defines if the SKU Service Type can be associated with an attachment or not.',
        title='ShowOnFileUpload',
    )
    ShowOnProductFront: Optional[bool] = Field(
        None, description='Deprecated.', examples=[False], title='ShowOnProductFront'
    )


class SKUServiceValueRequest(BaseModel):
    Cost: float = Field(
        ..., description='SKU Service Value cost.', examples=[10.5], title='Cost'
    )
    Name: str = Field(
        ...,
        description='SKU Service Value name. Maximum of 100 characters.',
        examples=['Test ServiceValue API'],
        title='Name',
    )
    SkuServiceTypeId: int = Field(
        ..., description='SKU Service Type ID.', examples=[2], title='SkuServiceTypeId'
    )
    Value: float = Field(
        ..., description='SKU Service Value value.', examples=[10.5], title='Value'
    )


class SKUServiceValueResponse(BaseModel):
    Cost: float = Field(
        ..., description='SKU Service Value cost.', examples=[10.5], title='Cost'
    )
    Id: Optional[int] = Field(
        None, description='SKU Service Value ID.', examples=[2], title='Id'
    )
    Name: str = Field(
        ...,
        description='SKU Service Value name. Maximum of 100 characters.',
        examples=['Test ServiceValue API'],
        title='Name',
    )
    SkuServiceTypeId: int = Field(
        ..., description='SKU Service Type ID.', examples=[2], title='SkuServiceTypeId'
    )
    Value: float = Field(
        ..., description='SKU Service Value value.', examples=[10.5], title='Value'
    )


class SKUSpecificationResponse(BaseModel):
    FieldId: Optional[int] = Field(None, description='Specification ID.')
    FieldValueId: Optional[int] = Field(
        None,
        description='Specification Value ID. Required only for `FieldTypeId` as `5`, `6` and `7`.',
    )
    Id: Optional[int] = Field(
        None,
        description='ID of the association of the specification and the SKU. This ID is used to update or delete the specification.',
    )
    SkuId: Optional[int] = Field(None, description='SKU ID.')
    Text: Optional[str] = Field(
        None,
        description='Value of specification. Only for `FieldTypeId` different from `5`, `6` and `7`.',
    )


class SkuComplementItem(BaseModel):
    ComplementTypeId: Optional[int] = Field(
        None,
        description='Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.',
    )
    Id: Optional[int] = Field(
        None, description='SKU Complement’s unique numerical identifier.'
    )
    ParentSkuId: Optional[int] = Field(
        None, description='ID of the Parent SKU, where the Complement will be inserted.'
    )
    SkuId: Optional[int] = Field(
        None,
        description='ID of the SKU which will be inserted as a Complement in the Parent SKU.',
    )


class SkuComplement(RootModel[List[SkuComplementItem]]):
    root: List[SkuComplementItem] = Field(
        ...,
        examples=[[{'ComplementTypeId': 1, 'Id': 61, 'ParentSkuId': 1, 'SkuId': 7}]],
        title='SKU Complement',
    )


class SkuKit(BaseModel):
    Id: Optional[int] = Field(
        None, description='SKU Kit ID, same as `StockKeepingUnitParent`.'
    )
    Quantity: Optional[int] = Field(None, description='Component quantity.')
    StockKeepingUnitId: Optional[int] = Field(
        None, description='SKU ID of the kit component.'
    )
    StockKeepingUnitParent: Optional[int] = Field(None, description='Parent SKU ID.')
    UnitPrice: Optional[int] = Field(None, description='Component price per unit.')


class SkuSeller(BaseModel):
    FreightCommissionPercentage: float = Field(
        ..., description='Registered value for Seller Freight Commission.'
    )
    IsActive: bool = Field(..., description='Defines if the SKU is active.')
    ProductCommissionPercentage: float = Field(
        ..., description='Registered value for Seller Product Commission.'
    )
    SellerId: str = Field(
        ...,
        description='SKU Seller ID. This is the ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
    )
    SellerStockKeepingUnitId: str = Field(..., description='SKU ID for the SKU Seller.')
    StockKeepingUnitId: int = Field(..., description='SKU ID.')


class SkuSpecification(BaseModel):
    FieldId: int = Field(..., description='Specification ID.')
    FieldName: str = Field(..., description='Specification Name.')
    FieldValueIds: List[int] = Field(
        ..., description='Array with related Specification Values IDs.'
    )
    FieldValues: List[str] = Field(
        ..., description='Array with related Specification Values.'
    )


class SkulistbyProductId(BaseModel):
    ActivateIfPossible: Optional[bool] = Field(
        None,
        description='When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.',
    )
    CommercialConditionId: Optional[int] = Field(
        None, description='SKU Commercial Condition ID.'
    )
    CubicWeight: Optional[float] = Field(
        None,
        description='[Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).',
    )
    DateUpdated: Optional[str] = Field(
        None, description='Date when the product was updated for the most recent time.'
    )
    EstimatedDateArrival: Optional[str] = Field(
        None,
        description='SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.',
    )
    FlagKitItensSellApart: Optional[bool] = Field(
        None, description='Defines if the SKU bundle items can be sold separately.'
    )
    Height: Optional[float] = Field(None, description='SKU Height.')
    Id: Optional[int] = Field(None, description='SKU ID.')
    InternalNote: Optional[str] = Field(None, description='Internal note.')
    IsActive: Optional[bool] = Field(
        None, description='Defines if the SKU is active or not.'
    )
    IsDynamicKit: Optional[str] = None
    IsGiftCardRecharge: Optional[bool] = Field(
        None,
        description='Defines if the purchase of the SKU will generate reward value for the customer.',
    )
    IsInventoried: Optional[bool] = None
    IsKit: Optional[bool] = Field(
        None,
        description='Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.',
    )
    IsPersisted: Optional[bool] = Field(
        None, description='Defines if the SKU is persisted.'
    )
    IsRemoved: Optional[bool] = Field(
        None, description='Defines if the SKU is removed.'
    )
    IsTransported: Optional[bool] = None
    Length: Optional[float] = Field(None, description='SKU Length.')
    ManufacturerCode: Optional[str] = Field(None, description='Product Supplier ID.')
    MeasurementUnit: Optional[str] = Field(None, description='Measurement unit.')
    ModalId: Optional[int] = Field(None, description='Delivery Method (Modal Type) ID.')
    ModalType: Optional[str] = Field(
        None,
        description='Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).',
    )
    Name: Optional[str] = Field(None, description='SKU Name.')
    Position: Optional[int] = Field(None, description='SKU Position.')
    ProductId: Optional[int] = Field(None, description='Product ID.')
    RealHeight: Optional[float] = Field(None, description='Real SKU Height.')
    RealLength: Optional[float] = Field(None, description='Real SKU Length.')
    RealWeightKg: Optional[float] = Field(
        None,
        description='Real Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
    )
    RealWidth: Optional[float] = Field(None, description='Real SKU Width.')
    RefId: Optional[str] = Field(None, description='Product Reference ID.')
    ReferenceStockKeepingUnitId: Optional[str] = Field(
        None, description='SKU Reference ID.'
    )
    RewardValue: Optional[float] = Field(
        None, description='Reward value related to the SKU.'
    )
    UnitMultiplier: Optional[float] = Field(
        None,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
    )
    WeightKg: Optional[float] = Field(
        None,
        description='Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
    )
    Width: Optional[float] = Field(None, description='SKU Width.')
    isKitOptimized: Optional[bool] = Field(
        None, description='Defines if the SKU is a Optimized bundle.'
    )


class SpecificationGroupInsertRequest(BaseModel):
    CategoryId: int = Field(..., description='Category ID.')
    Name: str = Field(..., description='Specification Group Name.')


class SpecificationsGroup(BaseModel):
    CategoryId: int = Field(..., description='Category ID.')
    Id: int = Field(..., description='Specification Group ID.')
    Name: str = Field(..., description='Specification Group Name.')
    Position: int = Field(..., description='Specification Group Position.')


class SpecificationsInsertFieldRequest(BaseModel):
    CategoryId: int = Field(..., description='Category ID.')
    DefaultValue: str = Field(..., description='Specification Field default Value.')
    Description: str = Field(..., description='Specification Field Description.')
    FieldGroupId: int = Field(..., description='Specification Field Group ID.')
    FieldGroupName: str = Field(..., description='Specification Field Group Name.')
    FieldId: int = Field(..., description='Specification Field ID.')
    FieldTypeId: int = Field(..., description='Specification Field Type ID.')
    FieldValueId: int = Field(..., description='Specification Field Value ID.')
    IsActive: bool = Field(
        ...,
        description='Defines if the Specification Field is active. The default value is `true`.',
    )
    IsFilter: bool = Field(
        ...,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.\r\n',
    )
    IsOnProductDetails: bool = Field(
        ...,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal -If specification is visible on the product page.\r\n',
    )
    IsRequired: bool = Field(
        ...,
        description='Makes the Specification Field mandatory (`true`) or optional (`false`).',
    )
    IsSideMenuLinkActive: bool = Field(
        ...,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification field clickable in the search navigation bar.\r\n',
    )
    IsStockKeepingUnit: bool = Field(
        ...,
        description='If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.',
    )
    IsTopMenuLinkActive: bool = Field(
        ...,
        description="Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification visible in the store's upper menu.\r\n",
    )
    IsWizard: bool = Field(..., description='Deprecated field.')
    Name: str = Field(..., description='Specification Field ID.')
    Position: int = Field(..., description='Specification Field Position.')


class SpecificationsInsertFieldUpdateRequest(BaseModel):
    CategoryId: int = Field(..., description='Category ID.')
    DefaultValue: str = Field(..., description='Specification Field default Value.')
    Description: str = Field(..., description='Specification Field Description.')
    FieldGroupId: int = Field(..., description='Specification Field Group ID.')
    FieldGroupName: str = Field(..., description='Specification Field Group Name.')
    FieldId: int = Field(..., description='Specification Field ID.')
    FieldTypeId: int = Field(..., description='Specification Field Type ID.')
    FieldValueId: Optional[int] = Field(
        None, description='Specification Field Value ID.'
    )
    IsActive: bool = Field(
        ...,
        description='Enables(`true`) or disables (`false`) the Specification Field.',
        examples=[True],
    )
    IsFilter: bool = Field(
        ...,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.\r\n',
    )
    IsOnProductDetails: bool = Field(
        ...,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal -If specification is visible on the product page.\r\n',
    )
    IsRequired: bool = Field(
        ...,
        description='Makes the Specification Field mandatory (`true`) or optional (`false`).',
    )
    IsSideMenuLinkActive: bool = Field(
        ...,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification field clickable in the search navigation bar.\r\n',
        examples=[False],
    )
    IsStockKeepingUnit: bool = Field(
        ...,
        description='If `true`, it will be added as a SKU specification field. If `false`, it will be added as a product specification field.',
    )
    IsTopMenuLinkActive: bool = Field(
        ...,
        description="Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification visible in the store's upper menu.\r\n",
    )
    IsWizard: bool = Field(..., description='Deprecated field.')
    Name: str = Field(..., description='Specification Field ID.')
    Position: int = Field(..., description='Specification Field Position.')


class SpecificationsInsertFieldValueRequest(BaseModel):
    FieldId: int = Field(..., description='Specification Field ID.')
    IsActive: bool = Field(
        ...,
        description='Defines if the Specification Field Value is active (`true`) or inactive (`false`).',
    )
    Name: str = Field(..., description='Specification Field Value Name.')
    Position: int = Field(..., description='Specification Field Value Position.')
    Text: str = Field(..., description='Specification Field Value Description.')


class SpecificationsUpdateFieldValueRequest(BaseModel):
    FieldId: int = Field(..., description='Specification Field ID.')
    IsActive: bool = Field(
        ...,
        description='Defines if the Specification Field Value is active (`true`) or inactive (`false`).',
    )
    Name: str = Field(..., description='Specification Field Value Name.')
    Position: int = Field(..., description='Specification Field Position.')
    Text: str = Field(..., description='Specification Field Value Description.')


class SupplierRequest(BaseModel):
    CellPhone: str = Field(
        ...,
        description='Supplier Cellphone.',
        examples=['4444444444'],
        title='CellPhone',
    )
    Cnpj: str = Field(
        ...,
        description='Corporate legal ID.',
        examples=['33304981001272'],
        title='Cnpj',
    )
    CorporateName: str = Field(
        ...,
        description='Supplier Corporate Name.',
        examples=['TopStore'],
        title='CorporateName',
    )
    CorportePhone: str = Field(
        ...,
        description='Supplier Corporate Phone.',
        examples=['5555555555'],
        title='CorportePhone',
    )
    Email: str = Field(
        ..., description='Supplier email.', examples=['email@email.com'], title='Email'
    )
    IsActive: bool = Field(
        ...,
        description='Defines if the Supplier is active (`true`) or not (`false`).',
        examples=[False],
        title='IsActive',
    )
    Name: str = Field(
        ..., description='Supplier Name.', examples=['Supplier'], title='Name'
    )
    Phone: str = Field(
        ..., description='Supplier Phone.', examples=['3333333333'], title='Phone'
    )
    StateInscription: str = Field(
        ...,
        description='State Inscription.',
        examples=['123456'],
        title='StateInscription',
    )


class SupplierResponse(BaseModel):
    CellPhone: Optional[str] = Field(
        None,
        description='Supplier Cellphone.',
        examples=['4444444444'],
        title='CellPhone',
    )
    Cnpj: Optional[str] = Field(
        None,
        description='Corporate legal ID.',
        examples=['33304981001272'],
        title='Cnpj',
    )
    CorporateName: Optional[str] = Field(
        None,
        description='Supplier Corporate Name.',
        examples=['TopStore'],
        title='CorporateName',
    )
    CorportePhone: Optional[str] = Field(
        None,
        description='Supplier Corporate Phone.',
        examples=['5555555555'],
        title='CorportePhone',
    )
    Email: Optional[str] = Field(
        None, description='Supplier email.', examples=['email@email.com'], title='Email'
    )
    Id: Optional[int] = Field(
        None, description='Supplier unique identifier code.', examples=[123], title='Id'
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Defines if the Supplier is active (`true`) or not (`false`).',
        examples=[False],
        title='IsActive',
    )
    Name: Optional[str] = Field(
        None, description='Supplier Name.', examples=['Supplier'], title='Name'
    )
    Phone: Optional[str] = Field(
        None, description='Supplier Phone.', examples=['3333333333'], title='Phone'
    )
    StateInscription: Optional[str] = Field(
        None,
        description='State Inscription.',
        examples=['123456'],
        title='StateInscription',
    )


class UpdateSellerRequest(BaseModel):
    ArchiveId: int = Field(..., description='Seller archive ID.', examples=[1])
    CNPJ: str = Field(
        ..., description='Company registration number.', examples=['12035072751']
    )
    CSCIdentification: str = Field(
        ..., description='CSC identification.', examples=['pedrostore']
    )
    CatalogSystemEndpoint: str = Field(
        ...,
        description="URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.",
        examples=['http://pedrostore.vtexcommercestable.com.br/api/catalog_system/'],
    )
    CategoryCommissionPercentage: Optional[str] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
        examples=[
            '[{"CategoryId":14,"ProductCommission":15.0,"FreightCommission":0.0}]'
        ],
    )
    DeliveryPolicy: str = Field(
        ...,
        description='Text describing the delivery policy previously agreed between the marketplace and the seller.',
        examples=['Delivery policy text'],
    )
    Description: str = Field(
        ...,
        description='Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).',
        examples=['Brief description'],
    )
    Email: str = Field(
        ...,
        description='Email of the admin responsible for the seller.',
        examples=['breno@breno.com'],
    )
    ExchangeReturnPolicy: str = Field(
        ...,
        description='Text describing the exchange and return policy previously agreed between the marketplace and the seller.',
        examples=['Exchange return policy text'],
    )
    FreightCommissionPercentage: float = Field(
        ...,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
        examples=[0],
    )
    FulfillmentEndpoint: str = Field(
        ...,
        description="URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.",
        examples=[
            'http://pedrostore.vtexcommercestable.com.br/api/fulfillment?affiliateid=LDB&sc=1'
        ],
    )
    FulfillmentSellerId: int = Field(
        ...,
        description='Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.',
        examples=[1],
    )
    IsActive: bool = Field(
        ...,
        description='If the selle is active (`true`) or not (`false`).',
        examples=[True],
    )
    IsBetterScope: bool = Field(
        ...,
        description='Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).',
        examples=[False],
    )
    MerchantName: Optional[str] = Field(
        None,
        description='Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-payment--6k5JidhYRUxileNolY2VLx) article to know more.',
        examples=['pedrostore'],
    )
    Name: str = Field(
        ...,
        description="Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.",
        examples=['My pedrostore'],
    )
    Password: str = Field(..., description='Seller password.', examples=['passoword'])
    ProductCommissionPercentage: float = Field(
        ...,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
        examples=[0],
    )
    SecutityPrivacyPolicy: str = Field(
        ...,
        description='Text describing the security policy previously agreed between the marketplace and the seller.',
        examples=['Secutity privacy policy text'],
    )
    SellerId: str = Field(
        ...,
        description='ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
        examples=['pedrostore'],
    )
    SellerType: int = Field(..., description='Seller type.', examples=[1])
    TrustPolicy: Optional[str] = Field(
        None,
        description="Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.",
        examples=['Default'],
    )
    UrlLogo: str = Field(..., description='Seller URL logo.', examples=['/myseller'])
    UseHybridPaymentOptions: bool = Field(
        ...,
        description='Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.',
        examples=[False],
    )
    UserName: str = Field(..., description='Seller username.', examples=['myseller'])


class GiftListMember(BaseModel):
    clientId: Optional[str] = Field(None, description='Client ID.', title='clientId')
    giftListId: Optional[int] = Field(
        None, description='Gift List ID.', title='giftListId'
    )
    giftListMemberId: Optional[int] = Field(
        None, description='Gift List member ID.', title='giftListMemberId'
    )
    isActive: Optional[bool] = Field(
        None,
        description='Defines if the Gift List user is active or not.',
        title='isActive',
    )
    isAdmin: Optional[bool] = Field(
        None,
        description='Defines if the Gift List member is an administrator of the Gift List or not.',
        title='isAdmin',
    )
    name: Optional[str] = Field(
        None, description='Name of the Gift List member.', title='name'
    )
    surname: Optional[str] = Field(
        None, description='Surname of the Gift List member.', title='surname'
    )
    text1: Optional[str] = Field(None, description='Complementary text.', title='text1')
    text2: Optional[str] = Field(None, description='Complementary text.', title='text2')
    title: Optional[str] = Field(
        None, description='Title of the Gift List member.', title='title'
    )
    userId: Optional[str] = Field(None, description='User ID.', title='userId')


class ApiAddonPvtGiftlistGetListIdGetResponse(BaseModel):
    IsPublic: Optional[bool] = Field(
        None,
        description='Defines if the gift list is public.',
        examples=[True],
        title='IsPublic',
    )
    address: Optional[str] = Field(
        None,
        description='Address of the gift list.',
        examples=['Botafogo'],
        title='address',
    )
    dateCreated: Optional[str] = Field(
        None,
        description='Date when the gift list was created.',
        examples=['2013-10-31T19:03:00'],
        title='dateCreated',
    )
    eventCity: Optional[str] = Field(
        None,
        description='City of the event associated with the Gift List.',
        examples=['Rio de Janeiro'],
        title='eventCity',
    )
    eventDate: Optional[str] = Field(
        None,
        description='Date of the event associated with the Gift List.',
        examples=['2014-07-20T00:00:00'],
        title='eventDate',
    )
    eventLocation: Optional[str] = Field(
        None,
        description='Location of the event associated with the Gift List.',
        examples=['Botafogo'],
        title='eventLocation',
    )
    eventState: Optional[str] = Field(
        None,
        description='State of the event associated with the Gift List.',
        examples=['RJ'],
        title='eventState',
    )
    fileId: Optional[int] = Field(
        None, description='File ID.', examples=[155233], title='fileId'
    )
    fileUrl: Optional[str] = Field(
        None,
        description='File URL.',
        examples=['/arquivos/ids/155233-800-800/gl-0_635266293044683588.jpg'],
        title='fileUrl',
    )
    giftCardId: Optional[int] = Field(
        None, description='Gift Card ID.', examples=[2], title='giftCardId'
    )
    giftCardRechargeSkuId: Optional[int] = Field(
        None,
        description='ID of the SKU that recharges the gift card.',
        examples=[1],
        title='giftCardRechargeSkuId',
    )
    giftListId: Optional[int] = Field(
        None, description='Gift List ID.', examples=[1], title='giftListId'
    )
    giftListMembers: Optional[List[GiftListMember]] = Field(
        None, description='Array of members of the gift list.', title='giftListMembers'
    )
    giftListSkuIds: Optional[List[str]] = Field(
        None,
        description='Array with the IDs of SKUs that are part of the gift list.',
        title='giftListSkuIds',
    )
    giftListTypeId: Optional[int] = Field(
        None, description='Gift List Type ID.', examples=[1], title='giftListTypeId'
    )
    giftListTypeName: Optional[str] = Field(
        None,
        description='Gift List Type name.',
        examples=['Wedding list'],
        title='giftListTypeName',
    )
    isActive: Optional[bool] = Field(
        None,
        description='Defines if the gift list is active.',
        examples=[True],
        title='isActive',
    )
    isAddressOk: Optional[bool] = Field(
        None,
        description='Validates the address of the gift list.',
        examples=[False],
        title='isAddressOk',
    )
    memberNames: Optional[str] = Field(
        None,
        description='Name of the members of the gift list.',
        examples=['Rafael Villa-Verde'],
        title='memberNames',
    )
    message: Optional[str] = Field(
        None,
        description='Gift List message.',
        examples=['This is a gift list for my wedding.'],
        title='message',
    )
    name: Optional[str] = Field(
        None, description='Gift List name.', examples=['My list'], title='name'
    )
    profileSystemUserAddressName: Optional[str] = Field(
        None,
        description="Name of the user's address.",
        examples=['CASA'],
        title='profileSystemUserAddressName',
    )
    profileSystemUserId: Optional[str] = Field(
        None,
        description='User ID on Profile System.',
        examples=['a6e7d995-e884-409d-911f-36b25c40169a'],
        title='profileSystemUserId',
    )
    shipsToOwner: Optional[bool] = Field(
        None,
        description='Defines if items purchased from the gift list will be shipped to the owner of the gift list.',
        examples=[False],
        title='shipsToOwner',
    )
    telemarketingId: Optional[int] = Field(
        None, description='Telemarketing ID.', examples=[1], title='telemarketingId'
    )
    telemarketingObservation: Optional[str] = Field(
        None,
        description='Telemarketing observation.',
        examples=[''],
        title='telemarketingObservation',
    )
    urlFolder: Optional[str] = Field(
        None,
        description='Slug of the gift list that will be part of its URL.',
        examples=['myweddinglist'],
        title='urlFolder',
    )
    userId: Optional[str] = Field(
        None,
        description='User ID.',
        examples=['a6e7d995-e884-409d-911f-36b25c40169a'],
        title='userId',
    )
    version: Optional[int] = Field(
        None, description='Version of the gift list.', examples=[1], title='version'
    )


class ApiCatalogPvtAttachmentsGetResponse(BaseModel):
    Data: Optional[List[AttachmentResponse]] = Field(
        None, description='Array containing attachments data.', title='Data'
    )
    Page: Optional[int] = Field(
        None, description='Current page of results.', examples=[1], title='Page'
    )
    Size: Optional[int] = Field(
        None,
        description='Total number of results in the current page.',
        examples=[11],
        title='Size',
    )
    TotalPage: Optional[int] = Field(
        None,
        description='Total number of pages with results.',
        examples=[1],
        title='TotalPage',
    )
    TotalRows: Optional[int] = Field(
        None,
        description='Total number of rows with results.',
        examples=[11],
        title='TotalRows',
    )


class ApiCatalogPvtCategoryCategoryIdPutRequest(BaseModel):
    ActiveStoreFrontLink: bool = Field(
        ...,
        description='If true, the Category link becomes active in store.',
        examples=[True],
        title='ActiveStoreFrontLink',
    )
    AdWordsRemarketingCode: str = Field(
        ...,
        description='This is a legacy field. Do not take this information into consideration.',
        examples=['Sale'],
    )
    Description: str = Field(
        ...,
        description='Text used in meta description tag for Category page.',
        examples=[
            'Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.'
        ],
        title='Description',
    )
    FatherCategoryId: int = Field(
        ...,
        description='ID of the parent category, apply in case of category and subcategory.',
        examples=[2],
        title='FatherCategoryId',
    )
    GlobalCategoryId: int = Field(
        ...,
        description='Google Global Category ID.',
        examples=[222],
        title='GlobalCategoryId',
    )
    IsActive: bool = Field(
        ...,
        description='If true, the Category page becomes available in store.',
        examples=[True],
        title='IsActive',
    )
    Keywords: str = Field(
        ...,
        description='Substitute words for the Category.',
        examples=['Kitchen, Laundry, Appliances'],
        title='Keywords',
    )
    LomadeeCampaignCode: str = Field(
        ...,
        description='This is a legacy field. Do not take this information into consideration.',
        examples=['Sale'],
    )
    Name: str = Field(
        ..., description='Category name.', examples=['Home Appliances'], title='Name'
    )
    Score: int = Field(
        ..., description='Score for search sorting order.', examples=[3], title='Score'
    )
    ShowBrandFilter: bool = Field(
        ...,
        description='If true, the Category page displays a Brand filter.',
        examples=[True],
        title='ShowBrandFilter',
    )
    ShowInStoreFront: bool = Field(
        ...,
        description='If true, the Category is shown in the top and side menu.',
        examples=[True],
        title='ShowInStoreFront',
    )
    StockKeepingUnitSelectionMode: str = Field(
        ...,
        description='Defines how the SKU will be exhibited',
        examples=['SPECIFICATION'],
        title='StockKeepingUnitSelectionMode',
    )
    Title: str = Field(
        ...,
        description='Text used in title tag for Category page.',
        examples=['Home Appliances'],
        title='Title',
    )


class ApiCatalogPvtCollectionPostRequest(BaseModel):
    DateFrom: str = Field(
        ...,
        description='Initial value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateFrom',
    )
    DateTo: str = Field(
        ...,
        description='Final value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateTo',
    )
    Highlight: bool = Field(
        ...,
        description='Defines if the Collection is highlighted or not.',
        examples=[False],
        title='Highlight',
    )
    Name: str = Field(
        ..., description='Collection Name.', examples=['Test'], title='Name'
    )
    Searchable: bool = Field(
        ...,
        description='Defines if the Collection is searchable or not.',
        examples=[True],
        title='Searchable',
    )


class ApiCatalogPvtCollectionPostResponse(BaseModel):
    DateFrom: Optional[str] = Field(
        None,
        description='Initial value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateFrom',
    )
    DateTo: Optional[str] = Field(
        None,
        description='Final value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateTo',
    )
    Description: Optional[str] = Field(
        None,
        description='Collection description.',
        examples=['Winter outfits.'],
        title='Description',
    )
    Highlight: Optional[bool] = Field(
        None,
        description='Defines if the Collection is highlighted or not.',
        examples=[False],
        title='Highlight',
    )
    Id: Optional[int] = Field(
        None, description='Collection ID.', examples=[150], title='Id'
    )
    Name: Optional[str] = Field(
        None, description='Collection Name.', examples=['Test'], title='Name'
    )
    Searchable: Optional[bool] = Field(
        None,
        description='Defines if the Collection is searchable or not.',
        examples=[True],
        title='Searchable',
    )
    TotalProducts: Optional[int] = Field(
        None,
        description='Total quantity of products in the collection.',
        examples=[150],
        title='TotalProducts',
    )
    Type: Optional[str] = Field(
        None, description='Type of collection.', examples=['Manual'], title='Type'
    )


class ApiCatalogPvtCollectionPostRequest1(BaseModel):
    DateFrom: str = Field(
        ...,
        description='Collection start date and time. If a future date and time are set, the collection will have a scheduled status.',
        examples=['2020-11-26T15:23:00'],
        title='DateFrom',
    )
    DateTo: str = Field(
        ...,
        description='Collection end date and time.',
        examples=['2069-11-26T15:23:00'],
        title='DateTo',
    )
    Description: str = Field(
        ...,
        description="Collection's description for internal use, with the collection's details. It will not be used for search engines.",
        examples=['HomeHalloween'],
        title='Description',
    )
    Highlight: bool = Field(
        ...,
        description='Option if you want the collection to highlight specific products using a tag.',
        examples=[False],
        title='Highlight',
    )
    Name: str = Field(
        ...,
        description="Collection's Name.",
        examples=['Halloween costumes'],
        title='Name',
    )
    Searchable: bool = Field(
        ...,
        description='Option making the collection searchable in the store.',
        examples=[False],
        title='Searchable',
    )


class ApiCatalogPvtCollectionCollectionIdGetResponse(BaseModel):
    DateFrom: Optional[str] = Field(
        None,
        description='Initial value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateFrom',
    )
    DateTo: Optional[str] = Field(
        None,
        description='Final value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateTo',
    )
    Description: Optional[str] = Field(
        None,
        description='Collection description.',
        examples=['Winter outfits.'],
        title='Description',
    )
    Highlight: Optional[bool] = Field(
        None,
        description='Defines if the Collection is highlighted or not.',
        examples=[False],
        title='Highlight',
    )
    Id: Optional[int] = Field(
        None, description='Collection ID.', examples=[150], title='Id'
    )
    Name: Optional[str] = Field(
        None, description='Collection Name.', examples=['Test'], title='Name'
    )
    Searchable: Optional[bool] = Field(
        None,
        description='Defines if the Collection is searchable or not.',
        examples=[True],
        title='Searchable',
    )
    TotalProducts: Optional[int] = Field(
        None,
        description='Total quantity of products in the collection.',
        examples=[150],
        title='TotalProducts',
    )
    Type: Optional[str] = Field(
        None, description='Type of collection.', examples=['Manual'], title='Type'
    )


class ApiCatalogPvtCollectionCollectionIdPutRequest(BaseModel):
    DateFrom: str = Field(
        ...,
        description='Initial value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateFrom',
    )
    DateTo: str = Field(
        ...,
        description='Final value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateTo',
    )
    Highlight: bool = Field(
        ...,
        description='Defines if the Collection is highlighted or not',
        examples=[False],
        title='Highlight',
    )
    Name: str = Field(
        ..., description='Collection Name.', examples=['Test'], title='Name'
    )
    Searchable: bool = Field(
        ...,
        description='Defines if the Collection is searchable or not.',
        examples=[True],
        title='Searchable',
    )


class ApiCatalogPvtCollectionCollectionIdPutResponse(BaseModel):
    DateFrom: Optional[str] = Field(
        None,
        description='Initial value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateFrom',
    )
    DateTo: Optional[str] = Field(
        None,
        description='Final value date for the Collection.',
        examples=['2017-09-27T10:47:00'],
        title='DateTo',
    )
    Description: Optional[str] = Field(
        None,
        description='Collection description.',
        examples=['Winter outfits.'],
        title='Description',
    )
    Highlight: Optional[bool] = Field(
        None,
        description='Defines if the Collection is highlighted or not.',
        examples=[False],
        title='Highlight',
    )
    Id: Optional[int] = Field(
        None, description='Collection ID.', examples=[150], title='Id'
    )
    Name: Optional[str] = Field(
        None, description='Collection Name.', examples=['Test'], title='Name'
    )
    Searchable: Optional[bool] = Field(
        None,
        description='Defines if the Collection is searchable or not.',
        examples=[True],
        title='Searchable',
    )
    TotalProducts: Optional[int] = Field(
        None,
        description='Total quantity of products in the collection.',
        examples=[150],
        title='TotalProducts',
    )
    Type: Optional[str] = Field(
        None, description='Type of collection.', examples=['Manual'], title='Type'
    )


class ApiCatalogPvtCollectionCollectionIdPositionPostRequest(BaseModel):
    position: int = Field(..., description='SKU position.', examples=[1])
    skuId: int = Field(..., description='SKU ID.', examples=[1])
    subCollectionId: int = Field(..., description='Subcollection ID.', examples=[17])


class ApiCatalogPvtCollectionCollectionIdStockkeepingunitImportexcludePostRequest(
    BaseModel
):
    file: Optional[Any] = Field(
        None,
        description='XLS file with information about products to be added to a Collection. The file must be an imported template from [Import Collection file example](https://developers.vtex.com/vtex-developer-docs/reference/get-importfileexample) endpoint.',
    )


class ApiCatalogPvtCollectionCollectionIdStockkeepingunitImportinsertPostRequest(
    BaseModel
):
    file: Optional[Any] = Field(
        None,
        description='XLS file with information about products to be added to a Collection. The file must be an imported template from [Import Collection file example](https://developers.vtex.com/vtex-developer-docs/reference/get-importfileexample) endpoint.',
    )


class ApiCatalogPvtCollectionCollectionIdSubcollectionGetResponseItem(BaseModel):
    CollectionId: Optional[int] = Field(None, description='Collection ID.')
    Id: Optional[int] = Field(None, description='Subcollection ID.')
    Name: Optional[str] = Field(None, description='Subcollection Name.')
    PreSale: Optional[bool] = Field(
        None, description='Defines if the collection is on PreSale.'
    )
    Release: Optional[bool] = Field(
        None, description='Defines if the collection is a new released one.'
    )
    Type: Optional[str] = Field(
        None,
        description='Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).',
    )


class ApiCatalogPvtCollectionCollectionIdSubcollectionGetResponse(
    RootModel[List[ApiCatalogPvtCollectionCollectionIdSubcollectionGetResponseItem]]
):
    root: List[ApiCatalogPvtCollectionCollectionIdSubcollectionGetResponseItem] = Field(
        ..., title=''
    )


class ApiCatalogPvtProductPostRequest(BaseModel):
    AdWordsRemarketingCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    BrandId: Optional[int] = Field(
        None,
        description='ID of an existing Brand that will be associated with this product. It is mandatory to use either this field or the `BrandName` field.',
        examples=[12121219],
        title='BrandId',
    )
    BrandName: Optional[str] = Field(
        None,
        description='Name of the brand that will be associated with this product. It is mandatory to use either this field or the `BrandId` field. If you wish to create a new brand, that is, in case the brand does not exist yet, use this field instead of `BrandId`.',
        examples=['Sample Brand'],
    )
    CategoryId: Optional[int] = Field(
        None,
        description='ID of an existing Category that will be associated with this product. It is mandatory to use either this field or the `CategoryPath` field.',
        examples=[2000090],
        title='CategoryId',
    )
    CategoryPath: Optional[str] = Field(
        None,
        description='Path of categories associated with this product, from the highest level of category to the lowest level, separated by `/`. It is mandatory to use either this field or the `CategoryId` field.',
        examples=['Mens/Clothing/T-Shirts'],
    )
    Description: Optional[str] = Field(
        None,
        description='Product description.',
        examples=[
            "The Nike Zoom Stefan Janoski Men's Shoe is made with a premium leather upper for superior durability and a flexible midsole for all-day comfort. A tacky gum rubber outsole delivers outstanding traction."
        ],
        title='Description',
    )
    DescriptionShort: Optional[str] = Field(
        None,
        description='Short product description. This information can be displayed on both the product page and the shelf, using the following controls:\r\n Store Framework:  `$product.DescriptionShort`.\r\n Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.\r\n',
        examples=['The Nike Zoom Stefan Janoski is made with a premium leather.'],
        title='DescriptionShort',
    )
    Id: Optional[int] = Field(
        None,
        description='Product’s unique numerical identifier. If not informed, it will be automatically generated by VTEX.',
        examples=[42],
        title='Id',
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Activate (`true`) or inactivate (`false`) product.',
        examples=[True],
        title='IsActive',
    )
    IsVisible: Optional[bool] = Field(
        None,
        description='Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.',
        examples=[True],
        title='IsVisible',
    )
    KeyWords: Optional[str] = Field(
        None,
        description='Store Framework: Deprecated. \r\nLegacy CMS Portal: Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.\r\n',
        examples=['Zoom,Stefan,Janoski'],
        title='KeyWords',
    )
    LinkId: Optional[str] = Field(
        None,
        description="Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).",
        examples=['stefan-janoski-canvas-varsity-red'],
        title='LinkId',
    )
    LomadeeCampaignCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    MetaTagDescription: Optional[str] = Field(
        None,
        description='Brief description of the product for SEO. It is recommended not to exceed 150 characters.',
        examples=[
            "The Nike Zoom Stefan Janoski Men's Shoe is made with a premium leather upper for superior durability and a flexible midsole for all-day comfort. A tacky gum rubber outsole delivers outstanding traction."
        ],
        title='MetaTagDescription',
    )
    Name: str = Field(
        ...,
        description="Product's name. Limited to 150 characters.",
        examples=['Zoom Stefan Janoski Canvas RM SB Varsity Red'],
        title='Name',
    )
    RefId: Optional[str] = Field(
        None, description='Product Reference Code.', examples=['sr_1_90'], title='RefId'
    )
    ReleaseDate: Optional[str] = Field(
        None,
        description='Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.',
        examples=['2019-01-01T00:00:00'],
        title='ReleaseDate',
    )
    Score: Optional[int] = Field(
        None,
        description='Value used to set the priority on the search result page.',
        examples=[1],
        title='Score',
    )
    ShowWithoutStock: Optional[bool] = Field(
        None,
        description='If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.',
        examples=[True],
        title='ShowWithoutStock',
    )
    SupplierId: Optional[int] = None
    TaxCode: Optional[str] = Field(
        None,
        description='Product tax code, used for tax calculation.',
        examples=['12345'],
        title='TaxCode',
    )
    Title: Optional[str] = Field(
        None,
        description="Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.",
        examples=['Zoom Stefan Janoski Canvas RM SB Varsity Red'],
        title='Title',
    )


class ApiCatalogPvtProductPostResponse(BaseModel):
    AdWordsRemarketingCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    BrandId: Optional[int] = Field(
        None, description='Brand ID associated with this product.'
    )
    CategoryId: Optional[int] = Field(
        None, description='Category ID associated with this product.'
    )
    DepartmentId: Optional[int] = Field(
        None, description="Department ID according to the product's category."
    )
    Description: Optional[str] = Field(None, description='Product description.')
    DescriptionShort: Optional[str] = Field(
        None,
        description='Short product description. This information can be displayed on both the product page and the shelf, using the following controls:\r\n Store Framework:  `$product.DescriptionShort`.\r\n Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.\r\n',
        title='DescriptionShort',
    )
    Id: Optional[int] = Field(
        None, description='Product’s unique numerical identifier.'
    )
    IsActive: Optional[bool] = Field(
        None, description='Activate (`true`) or inactivate (`false`) product.'
    )
    IsVisible: Optional[bool] = Field(
        None,
        description='Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.',
    )
    KeyWords: Optional[str] = Field(
        None,
        description='Store Framework: Deprecated. \r\nLegacy CMS Portal:  Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.\r\n',
    )
    LinkId: Optional[str] = Field(
        None,
        description="Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).",
    )
    LomadeeCampaignCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    MetaTagDescription: Optional[str] = Field(
        None,
        description="Brief description of the product for SEO. It's recommended that you don't exceed 150 characters.",
    )
    Name: Optional[str] = Field(
        None, description="Product's name. Limited to 150 characters."
    )
    RefId: Optional[str] = Field(None, description='Product Reference Code.')
    ReleaseDate: Optional[str] = Field(
        None,
        description='Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.',
    )
    Score: Optional[int] = Field(
        None, description='Value used to set the priority on the search result page.'
    )
    ShowWithoutStock: Optional[bool] = Field(
        None,
        description='If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.',
    )
    SupplierId: Optional[int] = None
    TaxCode: Optional[str] = Field(
        None, description='Product tax  code, used for tax calculation.'
    )
    Title: Optional[str] = Field(
        None,
        description="Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.",
    )


class ApiCatalogPvtProductProductIdGetResponse(BaseModel):
    AdWordsRemarketingCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    BrandId: Optional[int] = Field(
        None, description='Brand ID associated with this product.'
    )
    CategoryId: Optional[int] = Field(
        None, description='Category ID associated with this product.'
    )
    DepartmentId: Optional[int] = Field(
        None, description="Department ID according to the product's category."
    )
    Description: Optional[str] = Field(None, description='Product description.')
    DescriptionShort: Optional[str] = Field(
        None,
        description='Short product description. This information can be displayed on both the product page and the shelf, using the following controls:\r\n Store Framework:  `$product.DescriptionShort`.\r\n Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.\r\n',
    )
    Id: Optional[int] = Field(
        None, description='Product’s unique numerical identifier.'
    )
    IsActive: Optional[bool] = Field(
        None, description='Activate (`true`) or inactivate (`false`) product.'
    )
    IsVisible: Optional[bool] = Field(
        None,
        description='Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.',
    )
    KeyWords: Optional[str] = Field(
        None,
        description='Store Framework: Deprecated. \r\nLegacy CMS Portal: Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.\r\n',
    )
    LinkId: Optional[str] = Field(
        None,
        description="Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).",
    )
    LomadeeCampaignCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    MetaTagDescription: Optional[str] = Field(
        None,
        description='Brief description of the product for SEO. It is recommended not to exceed 150 characters.',
    )
    Name: Optional[str] = Field(
        None, description="Product's name. Limited to 150 characters."
    )
    RefId: Optional[str] = Field(None, description='Product Reference Code.')
    ReleaseDate: Optional[str] = Field(
        None,
        description='Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.',
    )
    Score: Optional[int] = Field(
        None,
        description='Value used to set the priority on the search result page.',
        examples=[1],
    )
    ShowWithoutStock: Optional[bool] = Field(
        None,
        description='If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.',
    )
    SupplierId: Optional[int] = None
    TaxCode: Optional[str] = Field(
        None, description='Product tax code, used for tax calculation.'
    )
    Title: Optional[str] = Field(
        None,
        description="Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.",
    )


class ApiCatalogPvtProductProductIdPutRequest(BaseModel):
    AdWordsRemarketingCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    BrandId: int = Field(
        ...,
        description='Brand ID associated with this product.',
        examples=[12121219],
        title='BrandId',
    )
    CategoryId: int = Field(
        ...,
        description='Category ID associated with this product.',
        examples=[2000090],
        title='CategoryId',
    )
    DepartmentId: Optional[int] = Field(
        None,
        description="Department ID according to the product's category.",
        examples=[2000089],
        title='DepartmentId',
    )
    Description: Optional[str] = Field(
        None,
        description='Product description.',
        examples=[
            "The Nike Zoom Stefan Janoski Men's Shoe is made with a premium leather upper for superior durability and a flexible midsole for all-day comfort. A tacky gum rubber outsole delivers outstanding traction."
        ],
        title='Description',
    )
    DescriptionShort: Optional[str] = Field(
        None,
        description='Short product description. This information can be displayed on both the product page and the shelf, using the following controls:\r\n Store Framework:  `$product.DescriptionShort`.\r\n Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.\r\n',
        examples=['The Nike Zoom Stefan Janoski is made with a premium leather.'],
        title='DescriptionShort',
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Activate (`true`) or inactivate (`false`) product.',
        examples=[True],
        title='IsActive',
    )
    IsVisible: Optional[bool] = Field(
        None,
        description='Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.',
        examples=[True],
        title='IsVisible',
    )
    KeyWords: Optional[str] = Field(
        None,
        description='Store Framework: Deprecated. \r\nLegacy CMS Portal: Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.\r\n',
        examples=['Zoom,Stefan,Janoski'],
        title='KeyWords',
    )
    LinkId: Optional[str] = Field(
        None,
        description="Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).",
        examples=['stefan-janoski-canvas-varsity-red'],
        title='LinkId',
    )
    LomadeeCampaignCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    MetaTagDescription: Optional[str] = Field(
        None,
        description='Brief description of the product for SEO. It is recommended not to exceed 150 characters.',
        examples=[
            "The Nike Zoom Stefan Janoski Men's Shoe is made with a premium leather upper for superior durability and a flexible midsole for all-day comfort. A tacky gum rubber outsole delivers outstanding traction."
        ],
        title='MetaTagDescription',
    )
    Name: str = Field(
        ...,
        description="Product's name. Limited to 150 characters.",
        examples=['Zoom Stefan Janoski Canvas RM SB Varsity Red'],
        title='Name',
    )
    RefId: Optional[str] = Field(
        None, description='Product Reference Code.', examples=['sr_1_90'], title='RefId'
    )
    ReleaseDate: Optional[str] = Field(
        None,
        description='Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.',
        examples=['2019-01-01T00:00:00'],
        title='ReleaseDate',
    )
    Score: Optional[int] = Field(
        None,
        description='Value used to set the priority on the search result page.',
        examples=[1],
        title='Score',
    )
    ShowWithoutStock: Optional[bool] = Field(
        None,
        description='If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.',
        examples=[True],
        title='ShowWithoutStock',
    )
    SupplierId: Optional[int] = None
    TaxCode: Optional[str] = Field(
        None,
        description='Product tax code, used for tax calculation.',
        examples=['12345'],
        title='TaxCode',
    )
    Title: Optional[str] = Field(
        None,
        description="Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.",
        examples=['Zoom Stefan Janoski Canvas RM SB Varsity Red'],
        title='Title',
    )


class ApiCatalogPvtProductProductIdPutResponse(BaseModel):
    AdWordsRemarketingCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    BrandId: Optional[int] = Field(
        None, description='Brand ID associated with this product.'
    )
    CategoryId: Optional[int] = Field(
        None, description='Category ID associated with this product.'
    )
    DepartmentId: Optional[int] = Field(
        None, description="Department ID according to the product's category."
    )
    Description: Optional[str] = Field(None, description='Product description.')
    DescriptionShort: Optional[str] = Field(
        None,
        description='Short product description. This information can be displayed on both the product page and the shelf, using the following controls:\r\n Store Framework:  `$product.DescriptionShort`.\r\n Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.\r\n',
        title='DescriptionShort',
    )
    Id: Optional[int] = Field(
        None, description='Product’s unique numerical identifier.'
    )
    IsActive: Optional[bool] = Field(
        None, description='Activate (`true`) or inactivate (`false`) product.'
    )
    IsVisible: Optional[bool] = Field(
        None,
        description='Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.',
    )
    KeyWords: Optional[str] = Field(
        None,
        description='Store Framework: Deprecated. \r\nLegacy CMS Portal:  Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.\r\n',
    )
    LinkId: Optional[str] = Field(
        None,
        description="Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).",
    )
    LomadeeCampaignCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    MetaTagDescription: Optional[str] = Field(
        None,
        description="Brief description of the product for SEO. It's recommended that you don't exceed 150 characters.",
    )
    Name: Optional[str] = Field(
        None, description="Product's name. Limited to 150 characters."
    )
    RefId: Optional[str] = Field(None, description='Product Reference Code.')
    ReleaseDate: Optional[str] = Field(
        None,
        description='Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.',
    )
    Score: Optional[int] = Field(
        None, description='Value used to set the priority on the search result page.'
    )
    ShowWithoutStock: Optional[bool] = Field(
        None,
        description='If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.',
    )
    SupplierId: Optional[int] = None
    TaxCode: Optional[str] = Field(
        None, description='Product tax  code, used for tax calculation.'
    )
    Title: Optional[str] = Field(
        None,
        description="Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.",
    )


class ApiCatalogPvtProductProductIdSalespolicyGetResponseItem(BaseModel):
    ProductId: Optional[int] = Field(
        None, description='Product’s unique numerical identifier.', examples=[1]
    )
    StoreId: Optional[int] = Field(
        None, description="Trade policy's unique numerical identifier.", examples=[1]
    )


class ApiCatalogPvtProductProductIdSalespolicyGetResponse(
    RootModel[List[ApiCatalogPvtProductProductIdSalespolicyGetResponseItem]]
):
    root: List[ApiCatalogPvtProductProductIdSalespolicyGetResponseItem]


class ApiCatalogPvtProductProductIdSimilarcategoryGetResponseItem(BaseModel):
    CategoryId: Optional[int] = Field(
        None, description='Similar Category ID.', examples=[20]
    )
    ProductId: Optional[int] = Field(None, description='Product ID.', examples=[1])


class ApiCatalogPvtProductProductIdSimilarcategoryGetResponse(
    RootModel[List[ApiCatalogPvtProductProductIdSimilarcategoryGetResponseItem]]
):
    root: List[ApiCatalogPvtProductProductIdSimilarcategoryGetResponseItem] = Field(
        ..., description='Array of objects with similar category information.'
    )


class ApiCatalogPvtProductProductIdSimilarcategoryCategoryIdPostResponse(BaseModel):
    ProductId: Optional[int] = Field(None, description='Product ID.', examples=[1])
    StoreId: Optional[int] = Field(None, description='Trade Policy ID.', examples=[1])


class ApiCatalogPvtProductProductIdSpecificationGetResponseItem(BaseModel):
    FieldId: Optional[int] = Field(None, description='Specification ID.')
    FieldValueId: Optional[int] = Field(
        None, description='Current specification value ID.'
    )
    Id: Optional[int] = Field(
        None,
        description='ID of the association of the specification and the product. This ID is used to update or delete the specification.',
    )
    ProductId: Optional[int] = Field(None, description='Product ID.')
    Text: Optional[str] = Field(None, description='Current specification value text.')


class ApiCatalogPvtProductProductIdSpecificationGetResponse(
    RootModel[List[ApiCatalogPvtProductProductIdSpecificationGetResponseItem]]
):
    root: List[ApiCatalogPvtProductProductIdSpecificationGetResponseItem] = Field(
        ...,
        examples=[
            [
                {
                    'FieldId': 33,
                    'FieldValueId': 135,
                    'Id': 227,
                    'ProductId': 1,
                    'Text': 'ValueA',
                },
                {
                    'FieldId': 34,
                    'FieldValueId': 1,
                    'Id': 228,
                    'ProductId': 1,
                    'Text': 'Giant',
                },
            ]
        ],
        title='',
    )


class ApiCatalogPvtProductProductIdSpecificationPostRequest(BaseModel):
    FieldId: int = Field(
        ..., description='Specification ID.', examples=[19], title='Fieldid'
    )
    FieldValueId: Optional[int] = Field(
        None,
        description='Specification Value ID. Mandatory for `FieldTypeId` `5`, `6` and `7`. Must not be used for any other field types',
        examples=[12],
        title='Fieldvalueid',
    )
    Text: Optional[str] = Field(
        None,
        description='Value of specification. Only for `FieldTypeId` different from `5`, `6` and `7`.',
        examples=['Metal'],
        title='Text',
    )


class ApiCatalogPvtProductProductIdSpecificationPostResponse(BaseModel):
    FieldId: Optional[int] = Field(None, description='Specification ID.')
    FieldValueId: Optional[int] = Field(
        None,
        description='Specification Value ID. Mandatory for `FieldTypeId` `5`, `6` and `7`. Must not be used for any other field types',
    )
    Id: Optional[int] = Field(
        None,
        description='ID of the association of the specification and the product. This ID is used to update or delete the specification.',
    )
    ProductId: Optional[int] = Field(None, description='Product ID.')
    Text: Optional[str] = Field(
        None,
        description='Value of specification. Only for `FieldTypeId` different from `5`, `6` and `7`.',
    )


class ApiCatalogPvtProductProductIdSpecificationvaluePutRequest(BaseModel):
    FieldName: str = Field(
        ..., description='Specification name.', examples=['Material']
    )
    FieldValues: List[str] = Field(
        ...,
        description='Array of specification values.',
        examples=[['Cotton', 'Polyester']],
    )
    GroupName: str = Field(..., description='Group name.', examples=['Composition'])
    RootLevelSpecification: bool = Field(
        ..., description='Root level specification.', examples=[True]
    )


class ApiCatalogPvtProductProductIdSpecificationvaluePutResponseItem(BaseModel):
    FieldId: Optional[int] = Field(None, description='Specification ID.')
    FieldValueId: Optional[int] = Field(
        None, description='Current specification value ID.'
    )
    Id: Optional[int] = Field(
        None, description='ID of the association of the Product and the specification.'
    )
    ProductId: Optional[int] = Field(None, description='Product ID.')
    Text: Optional[str] = Field(None, description='Current specification value text.')


class ApiCatalogPvtProductProductIdSpecificationvaluePutResponse(
    RootModel[List[ApiCatalogPvtProductProductIdSpecificationvaluePutResponseItem]]
):
    root: List[ApiCatalogPvtProductProductIdSpecificationvaluePutResponseItem] = Field(
        ...,
        description='Array with information of all product specifications.',
        examples=[
            [
                {
                    'FieldId': 85,
                    'FieldValueId': 193,
                    'Id': 239,
                    'ProductId': 1,
                    'Text': 'Value123',
                }
            ]
        ],
        title='',
    )


class ApiCatalogPvtSkuattachmentPostRequest(BaseModel):
    AttachmentId: int = Field(
        ..., description='Attachment ID.', examples=[1], title='AttachmentId'
    )
    SkuId: int = Field(
        ..., description='Unique identifier of an SKU.', examples=[1], title='SkuId'
    )


class ApiCatalogPvtSkuattachmentPostResponse(BaseModel):
    AttachmentId: Optional[int] = Field(
        None, description='Attachment ID.', examples=[1]
    )
    Id: Optional[int] = Field(
        None,
        description="Identifier of the SKU's association to the attachment.",
        examples=[31],
    )
    SkuId: Optional[int] = Field(
        None, description='Unique identifier of the SKU.', examples=[7]
    )


class ApiCatalogPvtSkucomplementPostRequest(BaseModel):
    ComplementTypeId: int = Field(
        ...,
        description='Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.',
        examples=[1],
        title='ComplementTypeId',
    )
    ParentSkuId: int = Field(
        ...,
        description='ID of the Parent SKU, where the Complement is inserted.',
        examples=[1],
        title='ParentSkuId',
    )
    SkuId: int = Field(
        ...,
        description='ID of the SKU which will be inserted as a Complement in the Parent SKU.',
        examples=[1],
        title='SkuId',
    )


class ApiCatalogPvtSkuservicePostRequest(BaseModel):
    IsActive: bool = Field(
        ..., description='Defines if the SKU Service is active or not.', examples=[True]
    )
    Name: str = Field(
        ...,
        description='SKU Service Name. Maximum of 50 characters.',
        examples=['Engraving'],
    )
    SkuId: int = Field(..., description='SKU ID.', examples=[1])
    SkuServiceTypeId: int = Field(..., description='SKU Service Type ID.', examples=[1])
    SkuServiceValueId: int = Field(
        ..., description='SKU Service Value ID.', examples=[1]
    )
    Text: str = Field(
        ...,
        description='Internal description of the SKU Service. Maximum of 100 characters.',
        examples=['Name engraving additional service.'],
    )


class ApiCatalogPvtSkuserviceSkuServiceIdPutRequest(BaseModel):
    IsActive: bool = Field(
        ...,
        description='Defines if the SKU Service is active or not.',
        examples=[True],
        title='IsActive',
    )
    Name: str = Field(
        ...,
        description='SKU Service Name. Maximum of 50 characters.',
        examples=['Test name'],
        title='Name',
    )
    SkuId: int = Field(..., description='SKU ID.', examples=[1], title='SkuId')
    SkuServiceTypeId: int = Field(
        ..., description='SKU Service Type ID.', examples=[2], title='SkuServiceTypeId'
    )
    SkuServiceValueId: int = Field(
        ...,
        description='SKU Service Value ID.',
        examples=[1],
        title='SkuServiceValueId',
    )
    Text: str = Field(
        ...,
        description='Internal description for the SKU Service. Maximum of 100 characters.',
        examples=['Text'],
        title='Text',
    )


class ApiCatalogPvtSkuservicetypeattachmentPostRequest(BaseModel):
    AttachmentId: int = Field(
        ..., description='Attachment ID.', examples=[1], title='AttachmentId'
    )
    SkuServiceTypeId: int = Field(
        ...,
        description='An explanation about the purpose of this instance.',
        examples=[1],
        title='SkuServiceTypeId',
    )


class ApiCatalogPvtSkuservicetypeattachmentPostResponse(BaseModel):
    AttachmentId: Optional[int] = Field(
        None, description='Attachment ID.', examples=[1]
    )
    Id: Optional[int] = Field(
        None, description='SKU Service Type Attachment association ID.', examples=[1]
    )
    SkuServiceTypeId: Optional[int] = Field(
        None, description='SKU Service Type ID.', examples=[1]
    )


class ApiCatalogPvtSpecificationPostRequest(BaseModel):
    CategoryId: Optional[int] = Field(
        None,
        description='Category ID associated with this specification.',
        examples=[1],
        title='CategoryId',
    )
    DefaultValue: Optional[str] = Field(
        None,
        description='Specification default value.',
        examples=['Cotton'],
        title='DefaultValue',
    )
    Description: Optional[str] = Field(None, examples=['Composition of the product.'])
    FieldGroupId: int = Field(
        ...,
        description='ID of the group of specifications that contains the new specification.',
        examples=[22],
        title='FieldGroupId',
    )
    FieldTypeId: int = Field(
        ...,
        description='Field Type ID can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.',
        examples=[1],
        title='FieldTypeId',
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Enable (`true`) or disable (`false`) specification.',
        examples=[True],
        title='IsActive',
    )
    IsFilter: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.\r\n',
        examples=[False],
        title='IsFilter',
    )
    IsOnProductDetails: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal -If specification is visible on the product page.\r\n',
        examples=[True],
        title='IsOnProductDetails',
    )
    IsRequired: Optional[bool] = Field(
        None,
        description='Makes the specification mandatory (`true`) or optional (`false`).',
        examples=[False],
        title='IsRequired',
    )
    IsSideMenuLinkActive: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification field clickable in the search navigation bar.\r\n',
        examples=[False],
        title='IsSideMenuLinkActive',
    )
    IsStockKeepingUnit: Optional[bool] = Field(
        None,
        description='If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.',
        examples=[False],
        title='IsStockKeepingUnit',
    )
    IsTopMenuLinkActive: Optional[bool] = Field(
        None,
        description="Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification visible in the store's upper menu.\r\n",
        examples=[False],
        title='IsTopMenuLinkActive',
    )
    IsWizard: Optional[bool] = None
    Name: str = Field(
        ..., description='Specification name.', examples=['Material'], title='Name'
    )
    Position: Optional[int] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - This position number is used in ordering the specifications both in the navigation menu and in the specification listing on the product page.\r\n',
        examples=[1],
        title='Position',
    )


class ApiCatalogPvtSpecificationPostResponse(BaseModel):
    CategoryId: Optional[int] = Field(
        None, description='Category ID associated with this specification.'
    )
    DefaultValue: Optional[str] = Field(
        None, description='Specification default value.'
    )
    Description: Optional[str] = None
    FieldGroupId: Optional[int] = Field(
        None,
        description='ID of the group of specifications that contains the new specification.',
    )
    FieldTypeId: Optional[int] = Field(
        None,
        description='Field Type ID can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.',
        title='The FieldTypeId schema',
    )
    Id: Optional[int] = Field(None, description='Specification ID.')
    IsActive: Optional[bool] = Field(
        None, description='Enable (`true`) or disable (`false`) specification.'
    )
    IsFilter: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.\r\n',
    )
    IsOnProductDetails: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal -If specification is visible on the product page.\r\n',
    )
    IsRequired: Optional[bool] = Field(
        None,
        description='Makes the specification mandatory (`true`) or optional (`false`).',
    )
    IsSideMenuLinkActive: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification field clickable in the search navigation bar.\r\n',
    )
    IsStockKeepingUnit: Optional[bool] = Field(
        None,
        description='If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.',
    )
    IsTopMenuLinkActive: Optional[bool] = Field(
        None,
        description="Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification visible in the store's upper menu.\r\n",
    )
    IsWizard: Optional[bool] = None
    Name: Optional[str] = Field(None, description='Specification name.')
    Position: Optional[int] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - This position number is used in ordering the specifications both in the navigation menu and in the specification listing on the product page.\r\n',
    )


class ApiCatalogPvtSpecificationNonstructuredGetResponseItem(BaseModel):
    Id: Optional[int] = Field(
        None,
        description='Non Structured Specification’s unique numerical identifier.',
        examples=[1010],
        title='Id',
    )
    SkuId: Optional[int] = Field(
        None,
        description="SKU's unique numerical identifier.",
        examples=[310119072],
        title='SkuId',
    )
    SpecificationName: Optional[str] = Field(
        None,
        description='Name of the Non Structured Specification.',
        examples=['size'],
        title='SpecificationName',
    )
    SpecificationValue: Optional[str] = Field(
        None,
        description='Value of the Non Structured Specification.',
        examples=['Small'],
        title='SpecificationValue',
    )


class ApiCatalogPvtSpecificationNonstructuredGetResponse(
    RootModel[List[ApiCatalogPvtSpecificationNonstructuredGetResponseItem]]
):
    root: List[ApiCatalogPvtSpecificationNonstructuredGetResponseItem]


class ApiCatalogPvtSpecificationNonstructuredIdGetResponseItem(BaseModel):
    Id: Optional[int] = Field(
        None,
        description='Non Structured Specification’s unique numerical identifier.',
        examples=[1010],
        title='Id',
    )
    SkuId: Optional[int] = Field(
        None,
        description="SKU's unique numerical identifier.",
        examples=[310119072],
        title='SkuId',
    )
    SpecificationName: Optional[str] = Field(
        None,
        description='Name of the Non Structured Specification.',
        examples=['size'],
        title='SpecificationName',
    )
    SpecificationValue: Optional[str] = Field(
        None,
        description='Value of the Non Structured Specification.',
        examples=['Small'],
        title='SpecificationValue',
    )


class ApiCatalogPvtSpecificationNonstructuredIdGetResponse(
    RootModel[List[ApiCatalogPvtSpecificationNonstructuredIdGetResponseItem]]
):
    root: List[ApiCatalogPvtSpecificationNonstructuredIdGetResponseItem]


class ApiCatalogPvtSpecificationSpecificationIdGetResponse(BaseModel):
    CategoryId: int = Field(
        ..., description='Specification Category ID.', examples=[0], title='CategoryId'
    )
    DefaultValue: str = Field(
        ...,
        description='Specification Default Value.',
        examples=[''],
        title='DefaultValue',
    )
    Description: str = Field(
        ...,
        description='Specification Description.',
        examples=[''],
        title='Description',
    )
    FieldGroupId: int = Field(
        ...,
        description='Numerical ID of the Group of Specifications that contains the new Specification.',
        examples=[0],
        title='FieldGroupId',
    )
    FieldTypeId: int = Field(
        ...,
        description='Field Type can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.',
        examples=[1],
        title='FieldTypeId',
    )
    Id: int = Field(
        ..., description='Created Specification’s ID.', examples=[32], title='Id'
    )
    IsActive: bool = Field(
        ...,
        description='Defines if the Specification is active or not.',
        examples=[False],
        title='IsActive',
    )
    IsFilter: bool = Field(
        ...,
        description='Defines if the Specification can be used as a Filter.',
        examples=[False],
        title='IsFilter',
    )
    IsOnProductDetails: bool = Field(
        ...,
        description='Defines if the Specification will be shown on the Product screen in the specification area.',
        examples=[False],
        title='IsOnProductDetails',
    )
    IsRequired: bool = Field(
        ...,
        description='Defines if the Specification is required or not.',
        examples=[False],
        title='IsRequired',
    )
    IsSideMenuLinkActive: bool = Field(
        ...,
        description='Defines if the Specification is shown in the side menu.',
        examples=[False],
        title='IsSideMenuLinkActive',
    )
    IsStockKeepingUnit: bool = Field(
        ...,
        description='Defines if the Specification is applied to a specific SKU.',
        examples=[False],
        title='IsStockKeepingUnit',
    )
    IsTopMenuLinkActive: bool = Field(
        ...,
        description='Defines if the Specification is shown in the main menu of the site.',
        examples=[False],
        title='IsTopMenuLinkActive',
    )
    IsWizard: bool = Field(
        ..., description='Deprecated', examples=[False], title='IsWizard'
    )
    Name: str = Field(
        ..., description='Specification Name.', examples=[''], title='Name'
    )
    Position: int = Field(
        ...,
        description="The current Specification's position in comparison to the other Specifications.",
        examples=[0],
        title='Position',
    )


class ApiCatalogPvtSpecificationSpecificationIdPutRequest(BaseModel):
    CategoryId: int = Field(
        ..., description='Specification Category ID.', examples=[0], title='CategoryId'
    )
    DefaultValue: str = Field(
        ...,
        description='Specification Default Value.',
        examples=['Leather'],
        title='DefaultValue',
    )
    Description: str = Field(
        ...,
        description='Specification Description.',
        examples=['Composition of the product.'],
        title='Description',
    )
    FieldGroupId: int = Field(
        ...,
        description='Numerical ID of the Group of Specifications that contains the new Specification.',
        examples=[0],
        title='FieldGroupId',
    )
    FieldTypeId: int = Field(
        ...,
        description='Field Type can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.',
        examples=[1],
        title='FieldTypeId',
    )
    IsActive: bool = Field(
        ...,
        description='Defines if the Specification is active or not.',
        examples=[False],
        title='IsActive',
    )
    IsFilter: bool = Field(
        ...,
        description='Defines if the Specification can be used as a Filter.',
        examples=[False],
        title='IsFilter',
    )
    IsOnProductDetails: bool = Field(
        ...,
        description='Defines if the Specification will be  shown on the Product screen in the specification area.',
        examples=[False],
        title='IsOnProductDetails',
    )
    IsRequired: bool = Field(
        ...,
        description='Defines if the Specification is required or not.',
        examples=[False],
        title='IsRequired',
    )
    IsSideMenuLinkActive: bool = Field(
        ...,
        description='Defines if the Specification is shown in the side menu.',
        examples=[False],
        title='IsSideMenuLinkActive',
    )
    IsStockKeepingUnit: bool = Field(
        ...,
        description='Defines if the Specification is applied to a specific SKU.',
        examples=[False],
        title='IsStockKeepingUnit',
    )
    IsTopMenuLinkActive: bool = Field(
        ...,
        description='Defines if the Specification is shown in the main menu of the site.',
        examples=[False],
        title='IsTopMenuLinkActive',
    )
    IsWizard: bool = Field(
        ..., description='Deprecated', examples=[False], title='IsWizard'
    )
    Name: str = Field(
        ..., description='Specification Name.', examples=['Material'], title='Name'
    )
    Position: int = Field(
        ...,
        description="The current Specification's position in comparison to the other Specifications.",
        examples=[1],
        title='Position',
    )


class ApiCatalogPvtSpecificationSpecificationIdPutResponse(BaseModel):
    CategoryId: Optional[int] = Field(
        None, description='Category ID associated with this specification.'
    )
    DefaultValue: Optional[str] = Field(
        None, description='Specification default value.'
    )
    Description: Optional[str] = None
    FieldGroupId: Optional[int] = Field(
        None,
        description='ID of the group of specifications that contains the new specification.',
    )
    FieldTypeId: Optional[int] = Field(
        None,
        description='Field Type ID can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.',
        title='The FieldTypeId schema',
    )
    Id: Optional[int] = Field(None, description='Specification ID.')
    IsActive: Optional[bool] = Field(
        None, description='Enable (`true`) or disable (`false`) specification.'
    )
    IsFilter: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.\r\n',
    )
    IsOnProductDetails: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal -If specification is visible on the product page.\r\n',
    )
    IsRequired: Optional[bool] = Field(
        None,
        description='Makes the specification mandatory (`true`) or optional (`false`).',
    )
    IsSideMenuLinkActive: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification field clickable in the search navigation bar.\r\n',
    )
    IsStockKeepingUnit: Optional[bool] = Field(
        None,
        description='If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.',
    )
    IsTopMenuLinkActive: Optional[bool] = Field(
        None,
        description="Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification visible in the store's upper menu.\r\n",
    )
    IsWizard: Optional[bool] = None
    Name: Optional[str] = Field(None, description='Specification name.')
    Position: Optional[int] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - This position number is used in ordering the specifications both in the navigation menu and in the specification listing on the product page.\r\n',
    )


class ApiCatalogPvtSpecificationgroupPostResponse(BaseModel):
    CategoryId: Optional[int] = Field(None, description='Category ID.')
    Id: Optional[int] = Field(None, description='Specification Group ID.')
    Name: Optional[str] = Field(None, description='Specification Group Name.')
    Position: Optional[int] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - Specification Group Position.',
    )


class ApiCatalogPvtSpecificationgroupGroupIdPutRequest(BaseModel):
    CategoryId: int = Field(
        ...,
        description='Category ID where the Specification Group is contained.',
        examples=[1],
        title='CategoryId',
    )
    Id: int = Field(..., description='Specification Group ID.', examples=[24])
    Name: str = Field(
        ..., description='Specification Group Name.', examples=['Sizes'], title='Name'
    )
    Position: int = Field(
        ..., description='Specification Group Position.', examples=[1], title='Position'
    )


class ApiCatalogPvtSpecificationgroupGroupIdPutResponse(BaseModel):
    CategoryId: Optional[int] = Field(
        None,
        description='Category ID where the Specification Group is contained.',
        examples=[1],
        title='CategoryId',
    )
    Id: Optional[int] = Field(
        None, description='Specification Group ID.', examples=[24]
    )
    Name: Optional[str] = Field(
        None, description='Specification Group Name.', examples=['Sizes'], title='Name'
    )
    Position: Optional[int] = Field(
        None,
        description='Specification Group Position.',
        examples=[1],
        title='Position',
    )


class ApiCatalogPvtSpecificationvaluePostRequest(BaseModel):
    FieldId: int = Field(
        ...,
        description='Specification ID associated with this specification value.',
        examples=[193],
        title='FieldId',
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Enable (`true`) or disable (`false`) specification value.',
        examples=[True],
        title='IsActive',
    )
    Name: str = Field(
        ..., description='Specification Value name.', examples=['Metal'], title='Name'
    )
    Position: Optional[int] = Field(
        None,
        description='The position of the value to be shown on product registration page (`/admin/Site/Produto.aspx`).',
        examples=[1],
        title='Position',
    )
    Text: Optional[str] = Field(None, description='Specification Value Text.')


class ApiCatalogPvtSpecificationvaluePostResponse(BaseModel):
    FieldId: Optional[int] = Field(
        None, description='Specification ID associated with this specification value.'
    )
    FieldValueId: Optional[int] = Field(None, description='Specification value ID.')
    IsActive: Optional[bool] = Field(
        None, description='Enable (`true`) or disable (`false`) specification value.'
    )
    Name: Optional[str] = Field(None, description='Specification Value name.')
    Position: Optional[int] = Field(
        None,
        description='The position of the value to be shown on product registration page (`/admin/Site/Produto.aspx`).',
    )
    Text: Optional[str] = Field(None, description='Specification Value Text.')


class ApiCatalogPvtSpecificationvalueSpecificationValueIdGetResponse(BaseModel):
    FieldId: Optional[int] = Field(None, description='Specification Field ID.')
    FieldValueId: Optional[int] = Field(
        None, description='Specification Field Value ID.'
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Defines if the Specification Field Value is active (`true`) or inactive (`false`).',
    )
    Name: Optional[str] = Field(None, description='Specification Field Value Name.')
    Position: Optional[int] = Field(
        None, description='Specification Field Value Position.'
    )
    Text: Optional[str] = Field(
        None, description='Specification Field Value Description.'
    )


class ApiCatalogPvtSpecificationvalueSpecificationValueIdPutRequest(BaseModel):
    FieldId: int = Field(
        ...,
        description='Specification ID associated with this specification value.',
        examples=[193],
        title='FieldId',
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Enable (`true`) or disable (`false`) specification value.',
        examples=[True],
        title='IsActive',
    )
    Name: str = Field(
        ..., description='Specification Value name.', examples=['Metal'], title='Name'
    )
    Position: Optional[int] = Field(
        None,
        description='The position of the value to be shown on product registration page (`/admin/Site/Produto.aspx`).',
        examples=[1],
        title='Position',
    )
    Text: Optional[str] = Field(None, description='Specification Value Text.')


class ApiCatalogPvtSpecificationvalueSpecificationValueIdPutResponse(BaseModel):
    FieldId: Optional[int] = Field(
        None, description='Specification ID associated with this specification value.'
    )
    FieldValueId: Optional[int] = Field(None, description='Specification value ID.')
    IsActive: Optional[bool] = Field(
        None, description='Enable (`true`) or disable (`false`) specification value.'
    )
    Name: Optional[str] = Field(None, description='Specification Value name.')
    Position: Optional[int] = Field(
        None,
        description='The position of the value to be shown on product registration page (`/admin/Site/Produto.aspx`).',
    )
    Text: Optional[str] = Field(None, description='Specification Value Text.')


class ApiCatalogPvtStockkeepingunitGetResponse(BaseModel):
    ActivateIfPossible: Optional[bool] = Field(
        None,
        description='When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.',
    )
    CommercialConditionId: Optional[int] = Field(
        None, description='Commercial Condition ID.'
    )
    CreationDate: Optional[str] = Field(None, description='SKU Creation Date.')
    CubicWeight: Optional[float] = Field(
        None,
        description='[Cubic Weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).',
    )
    EstimatedDateArrival: Optional[str] = Field(
        None,
        description='SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.',
    )
    Height: Optional[float] = Field(None, description='SKU Height.')
    Id: Optional[int] = Field(None, description='SKU ID.')
    IsActive: Optional[bool] = Field(
        None, description='Defines if the SKU is active (`true`) or not (`false`).'
    )
    IsKit: Optional[bool] = Field(
        None, description='Shows if the SKU is a Kit (`true`) or not (`false`).'
    )
    KitItensSellApart: Optional[bool] = Field(
        None, description='Defines if Kit components can be sold apart.'
    )
    Length: Optional[float] = Field(None, description='SKU Length.')
    ManufacturerCode: Optional[str] = Field(None, description='Manufacturer Code.')
    MeasurementUnit: Optional[str] = Field(None, description='Measurement Unit.')
    ModalType: Optional[str] = Field(
        None,
        description='Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).',
    )
    Name: Optional[str] = Field(None, description='SKU Name.')
    PackagedHeight: Optional[float] = Field(None, description='Packaged Height.')
    PackagedLength: Optional[float] = Field(None, description='Packaged Length.')
    PackagedWeightKg: Optional[float] = Field(
        None,
        description='Packaged Weight, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
    )
    PackagedWidth: Optional[float] = Field(None, description='Packaged Width.')
    ProductId: Optional[int] = Field(None, description='Product ID.')
    RefId: Optional[str] = Field(None, description='SKU RefId.')
    RewardValue: Optional[float] = Field(
        None,
        description='Defines the value of the reward for clients who purchase the SKU.',
    )
    UnitMultiplier: Optional[float] = Field(
        None,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
    )
    Videos: Optional[str] = Field(None, description='Video URLs.')
    WeightKg: Optional[float] = Field(
        None,
        description='Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
    )
    Width: Optional[float] = Field(None, description='SKU Width.')


class ApiCatalogPvtStockkeepingunitPostRequest(BaseModel):
    ActivateIfPossible: Optional[bool] = Field(
        None,
        description='When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.',
        examples=[True],
        title='ActivateIfPossible',
    )
    CommercialConditionId: Optional[int] = Field(
        None,
        description='Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).',
        examples=[1],
        title='CommercialConditionId',
    )
    CreationDate: Optional[str] = Field(
        None,
        description="Date and time of the SKU's creation.",
        examples=['2020-01-25T15:51:29.2614605'],
        title='CreationDate',
    )
    CubicWeight: Optional[float] = Field(
        None,
        description='[Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).',
        examples=[0.1667],
        title='CubicWeight',
    )
    Ean: Optional[str] = Field(
        None,
        description='EAN code. Required only if `RefId` is not informed, but can be used alongside `RefId` as well.',
        examples=['8949461894984'],
        title='Ean',
    )
    EstimatedDateArrival: Optional[str] = Field(
        None,
        description='To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.',
        examples=[None],
        title='EstimatedDateArrival',
    )
    Height: Optional[float] = Field(
        None, description='SKU real height.', examples=[1], title='Height'
    )
    Id: Optional[int] = Field(
        None,
        description='SKU unique identifier. If not informed, it will be automatically generated by VTEX.',
        examples=[1],
        title='Id',
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Shows if the SKU is active (`true`) or not (`false`).',
        examples=[False],
        title='IsActive',
    )
    IsKit: Optional[bool] = Field(
        None,
        description='Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.',
        examples=[False],
        title='IsKit',
    )
    KitItensSellApart: Optional[bool] = Field(
        None,
        description='Defines if Kit components can be sold apart.',
        examples=[False],
        title='KitItensSellApart',
    )
    Length: Optional[float] = Field(
        None, description='SKU real length.', examples=[1], title='Length'
    )
    ManufacturerCode: Optional[str] = Field(
        None,
        description='Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.',
        examples=['123'],
        title='ManufacturerCode',
    )
    MeasurementUnit: Optional[str] = Field(
        None,
        description="Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.",
        examples=['un'],
        title='MeasurementUnit',
    )
    ModalType: Optional[str] = Field(
        None,
        description='Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).',
        examples=[None],
        title='ModalType',
    )
    Name: str = Field(
        ...,
        description='SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.',
        examples=['Size 10'],
        title='Name',
    )
    PackagedHeight: float = Field(
        ...,
        description='Height used for shipping calculation.',
        examples=[10],
        title='PackagedHeight',
    )
    PackagedLength: float = Field(
        ...,
        description='Length used for shipping calculation.',
        examples=[10],
        title='PackagedLength',
    )
    PackagedWeightKg: int = Field(
        ...,
        description='Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        examples=[10],
        title='PackagedWeightKg',
    )
    PackagedWidth: float = Field(
        ...,
        description='Width used for shipping calculation.',
        examples=[10],
        title='PackagedWidth',
    )
    ProductId: int = Field(
        ...,
        description='ID of the Product associated with this SKU.',
        examples=[42],
        title='ProductId',
    )
    RefId: Optional[str] = Field(
        None,
        description='Reference code used internally for organizational purposes. Must be unique. Required only if `Ean` is not informed, but can be used alongside `Ean` as well.',
        examples=['B096QW8Y8Z'],
        title='RefId',
    )
    RewardValue: Optional[float] = Field(
        None,
        description='Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.',
        examples=[1],
        title='RewardValue',
    )
    UnitMultiplier: Optional[float] = Field(
        None,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
        examples=[2],
        title='UnitMultiplier',
    )
    Videos: Optional[List[str]] = Field(
        None,
        description='Videos URLs',
        examples=[['https://www.youtube.com/']],
        title='Videos',
    )
    WeightKg: Optional[float] = Field(
        None,
        description='Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        examples=[1],
        title='WeightKg',
    )
    Width: Optional[float] = Field(
        None, description='SKU real width.', examples=[1], title='Width'
    )


class ApiCatalogPvtStockkeepingunitPostResponse(BaseModel):
    ActivateIfPossible: Optional[bool] = Field(
        None,
        description='When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.',
        title='ActivateIfPossible',
    )
    CommercialConditionId: Optional[int] = Field(
        None,
        description='Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).',
        title='CommercialConditionId',
    )
    CreationDate: Optional[str] = Field(
        None, description="Date and time of the SKU's creation.", title='CreationDate'
    )
    CubicWeight: Optional[float] = Field(
        None,
        description='[Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).',
        title='CubicWeight',
    )
    Ean: Optional[str] = Field(
        None,
        description='EAN code. Required only if `RefId` is not informed, but can be used alongside `RefId` as well.',
        title='Ean',
    )
    EstimatedDateArrival: Optional[str] = Field(
        None,
        description='SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.',
        title='EstimatedDateArrival',
    )
    Height: Optional[float] = Field(
        None, description='SKU real height.', title='Height'
    )
    Id: Optional[int] = Field(None, description='SKU unique identifier.')
    IsActive: Optional[bool] = Field(
        None,
        description='Shows if the SKU is active (`true`) or not (`false`).',
        title='IsActive',
    )
    IsKit: Optional[bool] = Field(
        None,
        description='Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.',
        title='IsKit',
    )
    KitItensSellApart: Optional[bool] = Field(
        None,
        description='Defines if Kit components can be sold apart.',
        title='KitItensSellApart',
    )
    Length: Optional[float] = Field(
        None, description='SKU real length.', title='Length'
    )
    ManufacturerCode: Optional[str] = Field(
        None,
        description='Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.',
        title='ManufacturerCode',
    )
    MeasurementUnit: Optional[str] = Field(
        None,
        description="Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.",
        examples=['un'],
        title='MeasurementUnit',
    )
    ModalType: Optional[str] = Field(
        None,
        description='Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).',
        title='ModalType',
    )
    Name: Optional[str] = Field(
        None,
        description='SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.',
        title='Name',
    )
    PackagedHeight: Optional[float] = Field(
        None,
        description='Height used for shipping calculation.',
        title='PackagedHeight',
    )
    PackagedLength: Optional[float] = Field(
        None,
        description='Length used for shipping calculation.',
        title='PackagedLength',
    )
    PackagedWeightKg: Optional[int] = Field(
        None,
        description='Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        title='PackagedWeightKg',
    )
    PackagedWidth: Optional[float] = Field(
        None, description='Width used for shipping calculation.', title='PackagedWidth'
    )
    ProductId: Optional[int] = Field(
        None,
        description='ID of the Product associated with this SKU.',
        title='ProductId',
    )
    RefId: Optional[str] = Field(
        None,
        description='Reference code used internally for organizational purposes. Must be unique. Required only if `Ean` is not informed, but can be used alongside `Ean` as well.',
        title='RefId',
    )
    RewardValue: Optional[float] = Field(
        None,
        description='Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.',
        title='RewardValue',
    )
    UnitMultiplier: Optional[float] = Field(
        None,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
        title='UnitMultiplier',
    )
    Videos: Optional[List[str]] = Field(
        None, description='Videos URLs.', title='Videos'
    )
    WeightKg: Optional[float] = Field(
        None,
        description='Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        title='WeightKg',
    )
    Width: Optional[float] = Field(None, description='SKU real width.', title='Width')


class ApiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutResponseItem(BaseModel):
    ArchiveId: Optional[int] = Field(
        None, description='Unique identifier of the image file.', examples=[155404]
    )
    Id: Optional[int] = Field(
        None,
        description='Unique identifier of the association of the Image to the SKU.',
        examples=[1],
        title='Id',
    )
    IsMain: Optional[bool] = Field(
        None,
        description='Defines if the Image is the Main Image of the SKU.',
        examples=[True],
        title='IsMain',
    )
    Label: Optional[str] = Field(
        None, description='Image label.', examples=['cat'], title='Label'
    )
    SkuId: Optional[int] = Field(
        None, description='Unique identifier of the SKU.', examples=[1], title='SkuId'
    )


class ApiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutResponse(
    RootModel[
        List[ApiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutResponseItem]
    ]
):
    root: List[ApiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutResponseItem] = (
        Field(
            ...,
            description="Array with objects containing information about each of the target SKU's Files.",
            examples=[
                [
                    {
                        'ArchiveId': 155404,
                        'Id': 1964,
                        'IsMain': True,
                        'Label': '',
                        'SkuId': 1,
                    },
                    {
                        'ArchiveId': 155429,
                        'Id': 1965,
                        'IsMain': False,
                        'Label': '',
                        'SkuId': 1,
                    },
                ]
            ],
        )
    )


class ApiCatalogPvtStockkeepingunitSkuIdGetResponse(BaseModel):
    ActivateIfPossible: Optional[bool] = Field(
        None,
        description='When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.',
        title='ActivateIfPossible',
    )
    CommercialConditionId: Optional[int] = Field(
        None,
        description='Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).',
        title='CommercialConditionId',
    )
    CreationDate: Optional[str] = Field(
        None, description="Date and time of the SKU's creation.", title='CreationDate'
    )
    CubicWeight: Optional[float] = Field(
        None,
        description='[Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).',
        title='CubicWeight',
    )
    EstimatedDateArrival: Optional[str] = Field(
        None,
        description='SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.',
        title='EstimatedDateArrival',
    )
    Height: Optional[float] = Field(
        None, description='SKU real height.', title='Height'
    )
    Id: Optional[int] = Field(None, description='SKU unique identifier.')
    IsActive: Optional[bool] = Field(
        None,
        description='Shows if the SKU is active (`true`) or not (`false`).',
        title='IsActive',
    )
    IsKit: Optional[bool] = Field(
        None,
        description='Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.',
        title='IsKit',
    )
    KitItensSellApart: Optional[bool] = Field(
        None,
        description='Defines if Kit components can be sold apart.',
        title='KitItensSellApart',
    )
    Length: Optional[float] = Field(
        None, description='SKU real length.', title='Length'
    )
    ManufacturerCode: Optional[str] = Field(
        None,
        description='Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.',
        title='ManufacturerCode',
    )
    MeasurementUnit: Optional[str] = Field(
        None,
        description="Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.",
        examples=['un'],
        title='MeasurementUnit',
    )
    ModalType: Optional[str] = Field(
        None,
        description='Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).',
        title='ModalType',
    )
    Name: Optional[str] = Field(
        None,
        description='SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.',
        title='Name',
    )
    PackagedHeight: Optional[float] = Field(
        None,
        description='Height used for shipping calculation.',
        title='PackagedHeight',
    )
    PackagedLength: Optional[float] = Field(
        None,
        description='Length used for shipping calculation.',
        title='PackagedLength',
    )
    PackagedWeightKg: Optional[int] = Field(
        None,
        description='Weight used for shipping calculation.',
        title='PackagedWeightKg',
    )
    PackagedWidth: Optional[float] = Field(
        None, description='Width used for shipping calculation.', title='PackagedWidth'
    )
    ProductId: Optional[int] = Field(
        None,
        description='ID of the Product associated with this SKU.',
        title='ProductId',
    )
    RefId: Optional[str] = Field(
        None,
        description='Reference code used internally for organizational purposes. Must be unique. It is not required only if EAN code already exists. If not, this field must be provided.',
        title='RefId',
    )
    RewardValue: Optional[float] = Field(
        None,
        description='Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.',
        title='RewardValue',
    )
    UnitMultiplier: Optional[float] = Field(
        None,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
        title='UnitMultiplier',
    )
    Videos: Optional[List[str]] = Field(
        None, description='Videos URLs.', title='Videos'
    )
    WeightKg: Optional[float] = Field(
        None,
        description='Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        title='WeightKg',
    )
    Width: Optional[float] = Field(None, description='SKU real width.', title='Width')


class ApiCatalogPvtStockkeepingunitSkuIdPutRequest(BaseModel):
    ActivateIfPossible: Optional[bool] = Field(
        None,
        description='When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.',
        examples=[False],
        title='ActivateIfPossible',
    )
    CommercialConditionId: Optional[int] = Field(
        None,
        description='Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).',
        examples=[1],
        title='CommercialConditionId',
    )
    CreationDate: Optional[str] = Field(
        None,
        description="Date and time of the SKU's creation.",
        examples=['2020-01-25T15:51:00'],
        title='CreationDate',
    )
    CubicWeight: Optional[float] = Field(
        None,
        description='[Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).',
        examples=[0.1667],
        title='CubicWeight',
    )
    EstimatedDateArrival: Optional[str] = Field(
        None,
        description='To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.',
        examples=[None],
        title='EstimatedDateArrival',
    )
    Height: Optional[float] = Field(
        None, description='SKU real height.', examples=[1], title='Height'
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Shows if the SKU is active (`true`) or not (`false`).',
        examples=[False],
        title='IsActive',
    )
    IsKit: Optional[bool] = Field(
        None,
        description='Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.',
        examples=[False],
        title='IsKit',
    )
    KitItensSellApart: Optional[bool] = Field(
        None,
        description='Defines if Kit components can be sold apart.',
        examples=[False],
        title='KitItensSellApart',
    )
    Length: Optional[float] = Field(
        None, description='SKU real length.', examples=[1], title='Length'
    )
    ManufacturerCode: Optional[str] = Field(
        None,
        description='Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.',
        examples=['123'],
        title='ManufacturerCode',
    )
    MeasurementUnit: Optional[str] = Field(
        None,
        description="Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.",
        examples=['un'],
        title='MeasurementUnit',
    )
    ModalType: Optional[str] = Field(
        None,
        description='Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).',
        examples=[None],
        title='ModalType',
    )
    Name: str = Field(
        ...,
        description='SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.',
        examples=['Size 10'],
        title='Name',
    )
    PackagedHeight: float = Field(
        ...,
        description='Height used for shipping calculation.',
        examples=[10],
        title='PackagedHeight',
    )
    PackagedLength: float = Field(
        ...,
        description='Length used for shipping calculation.',
        examples=[10],
        title='PackagedLength',
    )
    PackagedWeightKg: int = Field(
        ...,
        description='Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        examples=[10],
        title='PackagedWeightKg',
    )
    PackagedWidth: float = Field(
        ...,
        description='Width used for shipping calculation.',
        examples=[10],
        title='PackagedWidth',
    )
    ProductId: int = Field(
        ...,
        description='ID of the Product associated with this SKU.',
        examples=[42],
        title='ProductId',
    )
    RefId: Optional[str] = Field(
        None,
        description='Reference code used internally for organizational purposes. Must be unique. It is not required only if EAN code already exists. If not, this field must be provided.',
        examples=['B096QW8Y8Z'],
        title='RefId',
    )
    RewardValue: Optional[float] = Field(
        None,
        description='Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.',
        examples=[1],
        title='RewardValue',
    )
    UnitMultiplier: Optional[float] = Field(
        None,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
        examples=[2],
        title='UnitMultiplier',
    )
    Videos: Optional[List[str]] = Field(
        None,
        description='Videos URLs',
        examples=[['https://www.youtube.com/']],
        title='Videos',
    )
    WeightKg: Optional[float] = Field(
        None,
        description='Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        examples=[1],
        title='WeightKg',
    )
    Width: Optional[float] = Field(
        None, description='SKU real width.', examples=[1], title='Width'
    )


class ApiCatalogPvtStockkeepingunitSkuIdPutResponse(BaseModel):
    ActivateIfPossible: Optional[bool] = Field(
        None,
        description='When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.',
        title='ActivateIfPossible',
    )
    CommercialConditionId: Optional[int] = Field(
        None,
        description='Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).',
        title='CommercialConditionId',
    )
    CreationDate: Optional[str] = Field(
        None, description="Date and time of the SKU's creation."
    )
    CubicWeight: Optional[float] = Field(
        None,
        description='[Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).',
        title='CubicWeight',
    )
    EstimatedDateArrival: Optional[str] = Field(
        None,
        description='SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.',
        title='EstimatedDateArrival',
    )
    Height: Optional[float] = Field(
        None, description='SKU real height.', title='Height'
    )
    Id: Optional[int] = Field(None, description='SKU unique identifier.')
    IsActive: Optional[bool] = Field(
        None,
        description='Shows if the SKU is active (`true`) or not (`false`).',
        title='IsActive',
    )
    IsKit: Optional[bool] = Field(
        None,
        description='Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.',
        title='IsKit',
    )
    KitItensSellApart: Optional[bool] = Field(
        None,
        description='Defines if Kit components can be sold apart.',
        title='KitItensSellApart',
    )
    Length: Optional[float] = Field(
        None, description='SKU real length.', title='Length'
    )
    ManufacturerCode: Optional[str] = Field(
        None,
        description='Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.',
        title='ManufacturerCode',
    )
    MeasurementUnit: Optional[str] = Field(
        None,
        description="Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.",
        examples=['un'],
        title='MeasurementUnit',
    )
    ModalType: Optional[str] = Field(
        None,
        description='Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).',
        title='ModalType',
    )
    Name: Optional[str] = Field(
        None,
        description='SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.',
        title='Name',
    )
    PackagedHeight: Optional[float] = Field(
        None,
        description='Height used for shipping calculation.',
        title='PackagedHeight',
    )
    PackagedLength: Optional[float] = Field(
        None,
        description='Length used for shipping calculation.',
        title='PackagedLength',
    )
    PackagedWeightKg: Optional[int] = Field(
        None,
        description='Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        title='PackagedWeightKg',
    )
    PackagedWidth: Optional[float] = Field(
        None, description='Width used for shipping calculation.', title='PackagedWidth'
    )
    ProductId: Optional[int] = Field(
        None,
        description='ID of the Product associated with this SKU.',
        title='ProductId',
    )
    RefId: Optional[str] = Field(
        None,
        description='Reference code used internally for organizational purposes. Must be unique. It is not required only if EAN code already exists. If not, this field must be provided.',
        title='RefId',
    )
    RewardValue: Optional[float] = Field(
        None,
        description='Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.',
        title='RewardValue',
    )
    UnitMultiplier: Optional[float] = Field(
        None,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
        title='UnitMultiplier',
    )
    Videos: Optional[List[str]] = Field(
        None, description='Videos URLs.', title='Videos'
    )
    WeightKg: Optional[float] = Field(
        None,
        description='Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.',
        title='WeightKg',
    )
    Width: Optional[float] = Field(None, description='SKU real width.', title='Width')


class ApiCatalogPvtStockkeepingunitSkuIdAttachmentGetResponseItem(BaseModel):
    AttachmentId: Optional[int] = Field(
        None, description='Attachment ID.', examples=[1]
    )
    Id: Optional[int] = Field(
        None,
        description="Identifier of the SKU's association to the attachment.",
        examples=[31],
    )
    SkuId: Optional[int] = Field(
        None, description='Unique identifier of the SKU.', examples=[7]
    )


class ApiCatalogPvtStockkeepingunitSkuIdAttachmentGetResponse(
    RootModel[List[ApiCatalogPvtStockkeepingunitSkuIdAttachmentGetResponseItem]]
):
    root: List[ApiCatalogPvtStockkeepingunitSkuIdAttachmentGetResponseItem] = Field(
        ...,
        description='Array of objects with information about the association between the attachments and the SKU.',
    )


class ApiCatalogPvtStockkeepingunitSkuIdEanGetResponse(RootModel[List[str]]):
    root: List[str] = Field(..., description='Array with EANs associated with the SKU.')


class ApiCatalogPvtStockkeepingunitSkuIdFileGetResponseItem(BaseModel):
    ArchiveId: Optional[int] = Field(
        None,
        description='Unique identifier of the Image.',
        examples=[1],
        title='ArchiveId',
    )
    Id: Optional[int] = Field(
        None,
        description='Unique identifier of the association of the Image to the SKU.',
        examples=[1],
        title='Id',
    )
    IsMain: Optional[bool] = Field(
        None,
        description='Defines if the Image is the Main Image of the SKU.',
        examples=[True],
        title='IsMain',
    )
    Label: Optional[str] = Field(
        None, description='Image label.', examples=['cat'], title='Label'
    )
    Name: Optional[str] = Field(
        None, description='Image name.', examples=['cat-picture'], title='Name'
    )
    SkuId: Optional[int] = Field(
        None, description='Unique identifier of the SKU.', examples=[1], title='SkuId'
    )


class ApiCatalogPvtStockkeepingunitSkuIdFileGetResponse(
    RootModel[List[ApiCatalogPvtStockkeepingunitSkuIdFileGetResponseItem]]
):
    root: List[ApiCatalogPvtStockkeepingunitSkuIdFileGetResponseItem] = Field(
        ...,
        description='Array with objects containing SKU Files information.',
        examples=[
            [
                {
                    'ArchiveId': 155485,
                    'Id': 549,
                    'IsMain': True,
                    'Label': 'miau',
                    'Name': 'chimera-cat-quimera-5',
                    'SkuId': 310118490,
                },
                {
                    'ArchiveId': 155486,
                    'Id': 550,
                    'IsMain': False,
                    'Label': 'Gato siames',
                    'Name': 'Gato-siames',
                    'SkuId': 310118490,
                },
                {
                    'ArchiveId': 155491,
                    'Id': 555,
                    'IsMain': False,
                    'Label': None,
                    'Name': 'Cat-Sleeping-Pics',
                    'SkuId': 310118490,
                },
            ]
        ],
    )


class ApiCatalogPvtStockkeepingunitSkuIdFilePostResponse(BaseModel):
    ArchiveId: Optional[int] = Field(
        None, description='Unique identifier of the image file.'
    )
    Id: Optional[int] = Field(
        None,
        description='ID of the association of the SKU and the image (`SkuFileId`). This is the ID that is used to update or delete it.',
    )
    IsMain: Optional[bool] = Field(
        None, description='Set the image as the main image for the product.'
    )
    Label: Optional[str] = Field(None, description='Image label.')
    SkuId: Optional[int] = Field(None, description='SKU ID.')


class ApiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdPutResponse(BaseModel):
    ArchiveId: Optional[int] = Field(
        None, description='Unique identifier of the image file.'
    )
    Id: Optional[int] = Field(
        None,
        description='ID of the association of the SKU and the image (`SkuFileId`). This is the ID that is used to update or delete it.',
    )
    IsMain: Optional[bool] = Field(
        None, description='Set the image as the main image for the product.'
    )
    Label: Optional[str] = Field(None, description='Image label.')
    SkuId: Optional[int] = Field(None, description='SKU ID.')


class ApiCatalogPvtStockkeepingunitSkuIdSpecificationGetResponse(
    RootModel[List[SKUSpecificationResponse]]
):
    root: List[SKUSpecificationResponse]


class ApiCatalogPvtStockkeepingunitSkuIdSpecificationPostRequest(BaseModel):
    FieldId: int = Field(
        ..., description='Specification ID.', examples=[13], title='FieldId'
    )
    FieldValueId: Optional[int] = Field(
        None,
        description='Specification Value ID. Required only for `FieldTypeId` as `5`, `6` and `7`.',
        examples=[101],
        title='FieldValueId',
    )


class ApiCatalogPvtStockkeepingunitSkuIdSpecificationPutRequest(BaseModel):
    FieldId: int = Field(
        ...,
        description='Specification unique identifier. This field cannot be updated.',
        examples=[32],
        title='FieldId',
    )
    FieldValueId: int = Field(
        ...,
        description='Specification value unique identifier. This field can only be updated with other values of the same `FieldId`.',
        examples=[131],
        title='FieldValueId',
    )
    Id: int = Field(
        ...,
        description='Specification and SKU association unique identifier. This field cannot be updated.',
        examples=[65],
        title='Id',
    )
    SkuId: Optional[int] = Field(
        None,
        description='SKU unique identifier. This field cannot be updated.',
        examples=[21],
        title='SkuId',
    )
    Text: Optional[str] = Field(
        None,
        description='Specification Value Name. This field is automatically updated if the `FieldValue` is updated. Otherwise, the value cannot be modified.',
        examples=['Red'],
        title='Text',
    )


class ApiCatalogPvtStockkeepingunitSkuIdSpecificationPutResponse(
    RootModel[List[SKUSpecificationResponse]]
):
    root: List[SKUSpecificationResponse]


class ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest(BaseModel):
    FieldName: str = Field(
        ..., description='Specification name.', examples=['Material']
    )
    FieldValues: List[str] = Field(
        ...,
        description='Array of specification values. SKU Specifications must contain only one value.',
        examples=[['M']],
    )
    GroupName: str = Field(..., description='Group name.', examples=['Composition'])
    RootLevelSpecification: bool = Field(
        ..., description='Root level specification.', examples=[True]
    )


class ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutResponseItem(BaseModel):
    FieldId: Optional[int] = Field(None, description='Specification ID.')
    FieldValueId: Optional[int] = Field(
        None, description='Current specification value ID.'
    )
    Id: Optional[int] = Field(
        None, description='ID of the association of the SKU and the specification.'
    )
    SkuId: Optional[int] = Field(None, description='SKU ID.')
    Text: Optional[str] = Field(None, description='Current specification value text.')


class ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutResponse(
    RootModel[List[ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutResponseItem]]
):
    root: List[ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutResponseItem] = (
        Field(
            ...,
            description='Array with information of all SKU specifications.',
            examples=[
                [
                    {
                        'FieldId': 29,
                        'FieldValueId': 76,
                        'Id': 418,
                        'SkuId': 5,
                        'Text': 'M',
                    }
                ]
            ],
            title='',
        )
    )


class ApiCatalogPvtStockkeepingunitkitPostRequest(BaseModel):
    Quantity: int = Field(
        ..., description='Component quantity.', examples=[3], title='Quantity'
    )
    StockKeepingUnitId: int = Field(
        ...,
        description='Component SKU ID.',
        examples=[31018374],
        title='StockKeepingUnitId',
    )
    StockKeepingUnitParent: int = Field(
        ...,
        description='SKU ID of the SKU Kit.',
        examples=[31018373],
        title='StockKeepingUnitParent',
    )
    UnitPrice: float = Field(
        ..., description='Component price per unit.', examples=[15.5], title='UnitPrice'
    )


class ApiCatalogPvtSubcollectionPostRequest(BaseModel):
    CollectionId: int = Field(
        ..., description='SubCollection ID.', examples=[17], title='CollectionId'
    )
    Name: str = Field(
        ..., description='SubCollection Name.', examples=['group 1'], title='Name'
    )
    PreSale: bool = Field(
        ..., description='Defines PreSale date.', examples=[False], title='PreSale'
    )
    Release: bool = Field(
        ..., description='Defines Release date.', examples=[False], title='Release'
    )
    Type: str = Field(
        ...,
        description='Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).',
        examples=['Inclusive'],
        title='Type',
    )


class ApiCatalogPvtSubcollectionPostResponse(BaseModel):
    CollectionId: Optional[int] = Field(None, description='Collection ID.')
    Id: Optional[int] = Field(None, description='Subcollection ID.')
    Name: Optional[str] = Field(None, description='Subcollection Name.')
    PreSale: Optional[bool] = Field(
        None, description='Defines if the collection is on PreSale.'
    )
    Release: Optional[bool] = Field(
        None, description='Defines if the collection is a new released one.'
    )
    Type: Optional[str] = Field(
        None,
        description='Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).',
    )


class ApiCatalogPvtSubcollectionSubCollectionIdGetResponse(BaseModel):
    CollectionId: Optional[int] = Field(None, description='Collection ID.')
    Id: Optional[int] = Field(None, description='Subcollection ID.')
    Name: Optional[str] = Field(None, description='Subcollection Name.')
    PreSale: Optional[bool] = Field(
        None, description='Defines if the collection is on PreSale.'
    )
    Release: Optional[bool] = Field(
        None, description='Defines if the collection is a new released one.'
    )
    Type: Optional[str] = Field(
        None,
        description='Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).',
    )


class ApiCatalogPvtSubcollectionSubCollectionIdPutRequest(BaseModel):
    CollectionId: int = Field(
        ..., description='Collection ID.', examples=[17], title='CollectionId'
    )
    Name: str = Field(
        ..., description='Subcollection Name.', examples=['group 1'], title='Name'
    )
    PreSale: bool = Field(
        ..., description='Defines PreSale date.', examples=[False], title='PreSale'
    )
    Release: bool = Field(
        ..., description='Defines Release date.', examples=[False], title='Release'
    )
    Type: str = Field(
        ...,
        description='Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).',
        examples=['Inclusive'],
        title='Type',
    )


class ApiCatalogPvtSubcollectionSubCollectionIdPutResponse(BaseModel):
    CollectionId: Optional[int] = Field(None, description='Collection ID.')
    Id: Optional[int] = Field(None, description='Subcollection ID.')
    Name: Optional[str] = Field(None, description='Subcollection Name.')
    PreSale: Optional[bool] = Field(
        None, description='Defines if the collection is on PreSale.'
    )
    Release: Optional[bool] = Field(
        None, description='Defines if the collection is a new released one.'
    )
    Type: Optional[str] = Field(
        None,
        description='Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).',
    )


class ApiCatalogPvtSubcollectionSubCollectionIdBrandPostRequest(BaseModel):
    BrandId: int = Field(
        ...,
        description='Unique identifier of a Brand.',
        examples=[2000000],
        title='BrandId',
    )


class ApiCatalogPvtSubcollectionSubCollectionIdBrandPostResponse(BaseModel):
    BrandId: Optional[int] = Field(
        None, description='Unique identifier of the Brand.', examples=[2000000]
    )
    SubCollectionId: Optional[int] = Field(
        None, description='Subcollection’s unique numerical identifier.', examples=[17]
    )


class ApiCatalogPvtSubcollectionSubCollectionIdCategoryPostRequest(BaseModel):
    CategoryId: int = Field(
        ...,
        description='Unique identifier of a Category.',
        examples=[0],
        title='CategoryId',
    )


class ApiCatalogPvtSubcollectionSubCollectionIdCategoryPostResponse(BaseModel):
    CategoryId: Optional[int] = Field(
        None,
        description='Unique identifier of the Category.',
        examples=[1],
        title='CategoryId',
    )
    SubCollectionId: Optional[int] = Field(
        None, description='Subcollection’s unique numerical identifier.', examples=[17]
    )


class ApiCatalogPvtSubcollectionSubCollectionIdStockkeepingunitPostRequest(BaseModel):
    SkuId: int = Field(
        ..., description='Unique identifier of an SKU.', examples=[1], title='SkuId'
    )


class ApiCatalogPvtSubcollectionSubCollectionIdStockkeepingunitPostResponse(BaseModel):
    SkuId: Optional[int] = Field(
        None, description='Unique identifier of the SKU.', examples=[1]
    )
    SubCollectionId: Optional[int] = Field(
        None, description='Subcollection’s unique numerical identifier.', examples=[17]
    )


class Measures(BaseModel):
    cubicweight: Optional[float] = Field(None, description='Cubic weight.')
    height: Optional[float] = Field(None, description='Height.')
    length: Optional[float] = Field(None, description='Length.')
    weight: Optional[float] = Field(None, description='Weight.')
    width: Optional[float] = Field(None, description='Width.')


class Sku(BaseModel):
    available: Optional[bool] = Field(
        None, description='Defines if the SKU is available (`true`) or not (`false`).'
    )
    availablequantity: Optional[int] = Field(
        None, description='Available quantity of the SKU in stock.'
    )
    bestPrice: Optional[int] = Field(None, description='Best price.')
    bestPriceFormated: Optional[str] = Field(
        None, description='Best price formatted according to the valid currency.'
    )
    cacheVersionUsedToCallCheckout: Optional[str] = Field(
        None, description='Cache version used to call Checkout.'
    )
    dimensions: Optional[Dict[str, str]] = Field(
        None, description='Lists SKU specifications and their respective values.'
    )
    image: Optional[str] = Field(None, description='SKU image URL.')
    installments: Optional[int] = Field(None, description='Number of installments.')
    installmentsInsterestRate: Optional[int] = Field(
        None, description='Interest rate of installments.'
    )
    installmentsValue: Optional[int] = Field(None, description='Value of installments.')
    listPrice: Optional[int] = Field(None, description='List price.')
    listPriceFormated: Optional[str] = Field(
        None, description='List price formatted according to the valid currency.'
    )
    measures: Optional[Measures] = Field(None, description='SKU measures.')
    rewardValue: Optional[int] = Field(
        None, description='SKU reward value for rewards program.'
    )
    sellerId: Optional[str] = Field(None, description='Seller ID.')
    sku: Optional[int] = Field(None, description='SKU ID.')
    skuname: Optional[str] = Field(None, description='SKU Name.')
    spotPrice: Optional[int] = Field(None, description='Spot price.')
    taxAsInt: Optional[int] = Field(None, description='Tax value.')
    taxFormated: Optional[str] = Field(
        None, description='Tax value formatted according to the valid currency.'
    )
    unitMultiplier: Optional[float] = Field(None, description='SKU Unit Multiplier.')


class ApiCatalogSystemPubProductsVariationsProductIdGetResponse(BaseModel):
    available: Optional[bool] = Field(
        None,
        description='Defines if the product is available (`true`) or not (`false`).',
    )
    dimensions: Optional[List[str]] = Field(
        None, description='Lists SKU specifications.'
    )
    dimensionsInputType: Optional[Dict[str, str]] = Field(
        None,
        description='Lists SKU specifications and their field type, in the following format: `"{specificationName}":"{fieldType}"`.',
    )
    dimensionsMap: Optional[Dict[str, List]] = Field(
        None,
        description='Lists SKU specifications and their possible values inside arrays.',
    )
    displayMode: Optional[str] = Field(
        None, description='Defines the mannner SKUs are displayed.'
    )
    name: Optional[str] = Field(None, description='Product name.')
    productId: Optional[int] = Field(
        None, description='Product’s unique numerical identifier.'
    )
    salesChannel: Optional[str] = Field(None, description='Trade policy ID.')
    skus: Optional[List[Sku]] = Field(
        None, description="Array containing information about the product's SKUs."
    )


class CurrencyFormatInfo(BaseModel):
    CurrencyDecimalDigits: Optional[int] = Field(
        None,
        description='Quantity of Currency Decimal Digits.',
        examples=[1],
        title='CurrencyDecimalDigits',
    )
    CurrencyDecimalSeparator: Optional[str] = Field(
        None,
        description='Defines which Currency Decimal Separator will be applied.',
        examples=[','],
        title='CurrencyDecimalSeparator',
    )
    CurrencyGroupSeparator: Optional[str] = Field(
        None,
        description='Defines which Currency Group Separator will be applied.',
        examples=['.'],
        title='CurrencyGroupSeparator',
    )
    CurrencyGroupSize: Optional[int] = Field(
        None,
        description='Define how many characters will be grouped.',
        examples=[3],
        title='CurrencyGroupSize',
    )
    StartsWithCurrencySymbol: Optional[bool] = Field(
        None,
        description='Defines if all prices will be initiated with Currency Symbol (`true`) or not (`false`).',
        examples=[True],
        title='StartsWithCurrencySymbol',
    )


class ApiCatalogSystemPubSaleschannelSalesChannelIdGetResponse(BaseModel):
    ConditionRule: Optional[str] = Field(
        None,
        description='Defines what is the conditional rule to activate de Sales Channel.',
        examples=['approved=true'],
        title='ConditionRule',
    )
    CountryCode: Optional[str] = Field(
        None,
        description='Country Code in ISO 3166-1 alfa-3 Standard.',
        examples=['BRA'],
        title='Id',
    )
    CultureInfo: Optional[str] = Field(
        None,
        description='Language Country code in LCIDstring Standard.',
        examples=['pt-BR'],
        title='CultureInfo',
    )
    CurrencyCode: Optional[str] = Field(
        None,
        description='Currency Code in ISO 4217 standard.',
        examples=['BRL'],
        title='CurrencyCode',
    )
    CurrencyDecimalDigits: Optional[int] = Field(
        None,
        description='Quantity of Currency Decimal Digits.',
        examples=[1],
        title='CurrencyDecimalDigits',
    )
    CurrencyFormatInfo_1: Optional[CurrencyFormatInfo] = Field(
        None,
        alias='CurrencyFormatInfo',
        description='Object with currency format.',
        title='CurrencyFormatInfo',
    )
    CurrencyLocale: Optional[int] = Field(
        None,
        description='Currency Locale Code in LCID standard.',
        examples=[1046],
        title='CurrencyLocale',
    )
    CurrencySymbol: Optional[str] = Field(
        None, description='Currency symbol.', examples=['R$'], title='CurrencySymbol'
    )
    Id: Optional[int] = Field(
        None, description='Sales Channel unique identifier.', examples=[1], title='Id'
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Defines if the Sales Channel is active (`true`) or not (`false`).',
        title='IsActive',
    )
    Name: Optional[str] = Field(
        None, description='Sales Channel name.', examples=['Loja Principal'], title='Id'
    )
    Origin: Optional[str] = Field(
        None,
        description='Origin of products in the Sales Channel.',
        examples=[None],
        title='Origin',
    )
    Position: Optional[int] = Field(
        None,
        description='Defines the position on index.',
        examples=[1],
        title='Position',
    )
    ProductClusterId: Optional[int] = Field(
        None,
        description='Product Cluster ID, if the Sales Channel has releated Product Cluster.',
        examples=[None],
        title='ProductClusterId',
    )
    TimeZone: Optional[str] = Field(
        None,
        description='Name of Time Zone.',
        examples=['E. South America Standard Time'],
        title='TimeZone',
    )


class ApiCatalogSystemPubSkuStockkeepingunitidsbyrefidsPostRequest(
    RootModel[List[str]]
):
    root: List[str] = Field(
        ...,
        description="Array with SKU reference IDs from which you need to retrieve the related SKU IDs. Don't repeat values in the array, or the API will return an error 500.",
        title='body',
    )


class ApiCatalogSystemPubSkuStockkeepingunitidsbyrefidsPostResponse(
    RootModel[Optional[Dict[str, str]]]
):
    root: Optional[Dict[str, str]] = Field(None, description='Reference ID.')


class ApiCatalogSystemPubSpecificationFieldGetFieldIdGetResponse(BaseModel):
    DefaultValue: Optional[str] = Field(
        None, description='Specification default value.'
    )
    Description: Optional[str] = None
    FieldGroupId: Optional[int] = Field(
        None,
        description='ID of the group of specifications that contains the new specification.',
    )
    FieldGroupName: Optional[str] = Field(
        None, description='Specification Field Group Name.'
    )
    FieldId: Optional[int] = Field(None, description='Specification field ID.')
    FieldTypeId: Optional[int] = Field(
        None,
        description='Field Type ID can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.',
        title='FieldTypeId',
    )
    FieldTypeName: Optional[str] = Field(
        None,
        description='Field Type name, which can be `Text`, `Multi-Line Text`, `Number`, `Combo`, `Radio`, `Checkbox`, `Indexed Text` or `Indexed Multi-Line Text`.',
        title='FieldTypeName',
    )
    FieldValueId: Optional[int] = Field(None, description='Specification value ID.')
    IsActive: Optional[bool] = Field(
        None, description='Enable (`true`) or disable (`false`) specification.'
    )
    IsFilter: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.\r\n',
    )
    IsOnProductDetails: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal -If specification is visible on the product page.\r\n',
    )
    IsRequired: Optional[bool] = Field(
        None,
        description='Makes the specification mandatory (`true`) or optional (`false`).',
    )
    IsSideMenuLinkActive: Optional[bool] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification field clickable in the search navigation bar.\r\n',
    )
    IsStockKeepingUnit: Optional[bool] = Field(
        None,
        description='If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.',
    )
    IsTopMenuLinkActive: Optional[bool] = Field(
        None,
        description="Store Framework - Deprecated.\r\nLegacy CMS Portal - To make the specification visible in the store's upper menu.\r\n",
    )
    IsWizard: Optional[bool] = None
    Name: Optional[str] = Field(None, description='Specification field name.')
    Position: Optional[int] = Field(
        None,
        description='Store Framework - Deprecated.\r\nLegacy CMS Portal - This position number is used in ordering the specifications both in the navigation menu and in the specification listing on the product page.\r\n',
    )


class ApiCatalogSystemPubSpecificationFieldvalueFieldIdGetResponse(
    RootModel[List[GetSpecFieldValue]]
):
    root: List[GetSpecFieldValue]


class ApiCatalogSystemPvtBrandListGetResponse(RootModel[List[BrandGet]]):
    root: List[BrandGet] = Field(
        ..., description='An array with all brands registered in the store.'
    )


class Paging(BaseModel):
    page: int = Field(
        ..., description='Page number of the brand list.', examples=[1], title='page'
    )
    pages: int = Field(
        ..., description='Total number of pages.', examples=[2], title='pages'
    )
    perPage: int = Field(
        ..., description='Quantity of brands per page.', examples=[3], title='perPage'
    )
    total: int = Field(
        ..., description='Total of brands in the store.', examples=[6], title='total'
    )


class ApiCatalogSystemPvtBrandPagedlistGetResponse(BaseModel):
    items: List[BrandGet] = Field(
        ...,
        description="Array of objects with information of the store's brands.",
        title='items',
    )
    paging: Paging = Field(
        ...,
        description='Object with pagination information.',
        examples=[{'page': 1, 'pages': 2, 'perPage': 3, 'total': 6}],
        title='paging',
    )


class ApiCatalogSystemPvtCommercialconditionListGetResponseItem(BaseModel):
    Id: Optional[int] = Field(
        None, description='Commercial condition ID.', examples=[1], title='Id'
    )
    IsDefault: Optional[bool] = Field(
        None,
        description='Defines if the commercial condition is default (`true`) or not (`false`).',
        examples=[True],
        title='IsDefault',
    )
    Name: Optional[str] = Field(
        None,
        description='Commercial condition name.',
        examples=['Padrão'],
        title='Name',
    )


class ApiCatalogSystemPvtCommercialconditionListGetResponse(
    RootModel[List[ApiCatalogSystemPvtCommercialconditionListGetResponseItem]]
):
    root: List[ApiCatalogSystemPvtCommercialconditionListGetResponseItem] = Field(
        ...,
        examples=[
            [
                {'Id': 1, 'IsDefault': True, 'Name': 'Padrão'},
                {'Id': 2, 'IsDefault': False, 'Name': 'Secundária'},
                {'Id': 3, 'IsDefault': False, 'Name': 'Parcelamento 18x'},
            ]
        ],
        title='Array with information of all the commercial conditions.',
    )


class ApiCatalogSystemPvtCommercialconditionCommercialConditionIdGetResponse(BaseModel):
    Id: Optional[int] = Field(
        None, description='Commercial condition ID.', examples=[1], title='Id'
    )
    IsDefault: Optional[bool] = Field(
        None,
        description='If the commercial condition is default (`true`) or not (`false`).',
        examples=[True],
        title='IsDefault',
    )
    Name: Optional[str] = Field(
        None,
        description='Commercial condition name.',
        examples=['Padrão'],
        title='Name',
    )


class ProductID(BaseModel):
    SKU_ID_: Optional[int] = Field(None, alias='SKU ID.', description='Product SKU ID.')


class Data(BaseModel):
    Product_ID: Optional[Union[List, ProductID]] = Field(
        None, alias='Product ID', description='Array with SKU IDs of a certain product.'
    )


class Range(BaseModel):
    from_: Optional[int] = Field(None, alias='from', description='Initial product ID.')
    to: Optional[int] = Field(None, description='Final product ID.')
    total: Optional[int] = Field(None, description='Total quantity of SKUs.')


class ApiCatalogSystemPvtProductsGetProductAndSkuIdsGetResponse(BaseModel):
    data: Optional[Data] = Field(
        None,
        description='Object composed by Product IDs and SKU IDs, where the parent ID is from Products and the SKU IDs are the Child IDs.',
    )
    range: Optional[Range] = Field(
        None, description='Object with information about the product and SKUs list.'
    )


class ApiCatalogSystemPvtProductsProductgetProductIdGetResponse(BaseModel):
    AdWordsRemarketingCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    BrandId: Optional[int] = Field(
        None, description='Product brand ID.', examples=[2000000], title='BrandId'
    )
    CategoryId: Optional[int] = Field(
        None, description='Product category ID.', examples=[10], title='CategoryId'
    )
    DepartmentId: Optional[int] = Field(
        None, description='Product department ID.', examples=[1], title='DepartmentId'
    )
    Description: Optional[str] = Field(
        None,
        description='Product description.',
        examples=['Description'],
        title='Description',
    )
    DescriptionShort: Optional[str] = Field(
        None,
        description='Product complement name.',
        examples=[''],
        title='DescriptionShort',
    )
    Id: Optional[int] = Field(None, description='Product ID.', examples=[1], title='Id')
    IsActive: Optional[bool] = Field(
        None,
        description='If the product is active (`true`) or not (`false`) at the store.',
        examples=[True],
        title='IsActive',
    )
    IsVisible: Optional[bool] = Field(
        None,
        description='If the Product is visible on the store.',
        examples=[True],
        title='IsVisible',
    )
    KeyWords: Optional[str] = Field(
        None,
        description='Substitutes words for the product.',
        examples=['ração, racao, animal'],
        title='KeyWords',
    )
    LinkId: Optional[str] = Field(
        None,
        description='Product text link.',
        examples=['racao-royal-canin-feline-urinary'],
        title='LinkId',
    )
    ListStoreId: Optional[List] = Field(
        None,
        description='List with the Trade Policies IDs that the product is included.',
        examples=[[1, 2]],
        title='ListStoreId',
    )
    LomadeeCampaignCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    MetaTagDescription: Optional[str] = Field(
        None,
        description='Product meta tag description.',
        examples=['Description'],
        title='MetaTagDescription',
    )
    Name: Optional[str] = Field(
        None,
        description="Product's name. Limited to 150 characters.",
        examples=['Ração Royal Canin Feline Urinary'],
        title='Name',
    )
    RefId: Optional[str] = Field(
        None, description='Product referecial code.', examples=[''], title='RefId'
    )
    ReleaseDate: Optional[str] = Field(
        None,
        description='Product release date.',
        examples=['2020-01-06T00:00:00'],
        title='ReleaseDate',
    )
    ShowWithoutStock: Optional[bool] = Field(
        None,
        description='Defines if the Product will remain being shown in the store even if it’s out of stock.',
        examples=[True],
        title='ShowWithoutStock',
    )
    SupplierId: Optional[int] = Field(
        None, description='Product supplier ID.', examples=[1], title='SupplierId'
    )
    TaxCode: Optional[str] = Field(
        None, description='Product fiscal code.', examples=[''], title='TaxCode'
    )
    Title: Optional[str] = Field(
        None,
        description="Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.",
        examples=['Ração Royal Canin Feline Urinary'],
        title='Title',
    )


class ApiCatalogSystemPvtProductsProductgetbyrefidRefIdGetResponse(BaseModel):
    AdWordsRemarketingCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    BrandId: Optional[int] = Field(None, description='ID of the product Brand.')
    CategoryId: Optional[int] = Field(None, description='ID of product Category.')
    DepartmentId: Optional[int] = Field(None, description='ID of product department.')
    Description: Optional[str] = Field(
        None, description='Product Description, HTML is allowed.'
    )
    DescriptionShort: Optional[str] = Field(
        None, description='Product Short Description.'
    )
    Id: Optional[int] = Field(None, description='ID of the Product.')
    IsActive: Optional[bool] = Field(None, description='If the product is Active.')
    IsVisible: Optional[bool] = Field(
        None, description='If the product are visible in search and list pages.'
    )
    KeyWords: Optional[str] = Field(
        None, description='Alternatives Keywords to improve the product findability.'
    )
    LinkId: Optional[str] = Field(None, description='Category URL.')
    ListStoreId: Optional[List[int]] = Field(
        None,
        description='Array with the ID of all the trade policies that are related to the product.',
    )
    LomadeeCampaignCode: Optional[str] = Field(
        None,
        description='This is a legacy field. Do not take this information into consideration.',
    )
    MetaTagDescription: Optional[str] = Field(
        None, description='Meta Description for the Product page.'
    )
    Name: Optional[str] = Field(None, description='Name of the Product.')
    RefId: Optional[str] = Field(None, description='Product Reference ID.')
    ReleaseDate: Optional[str] = Field(
        None,
        description='Product Release Date, for list ordering and product cluster highlight.',
    )
    ShowWithoutStock: Optional[bool] = Field(
        None, description='If the product can be visible without stock.'
    )
    SupplierId: Optional[int] = Field(None, description='Product Supplier ID.')
    TaxCode: Optional[str] = Field(None, description='SKU Tax Code.')
    Title: Optional[str] = Field(
        None,
        description="Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.",
    )


class ApiCatalogSystemPvtProductsProductIdSpecificationGetResponse(
    RootModel[List[GetorUpdateProductSpecification]]
):
    root: List[GetorUpdateProductSpecification] = Field(
        ..., examples=[[{'Id': 30, 'Name': 'Material', 'Value': ['Iron', 'Plastic']}]]
    )


class ApiCatalogSystemPvtProductsProductIdSpecificationPostRequest(
    RootModel[List[GetorUpdateProductSpecification]]
):
    root: List[GetorUpdateProductSpecification]


class ApiCatalogSystemPvtSaleschannelListGetResponseItem(BaseModel):
    ConditionRule: Optional[str] = Field(
        None,
        description='Defines what is the conditional rule to activate de Sales Channel.',
        examples=['approved=true'],
        title='ConditionRule',
    )
    CountryCode: Optional[str] = Field(
        None,
        description='Country Code in ISO 3166-1 alfa-3 Standard.',
        examples=['BRA'],
        title='Id',
    )
    CultureInfo: Optional[str] = Field(
        None,
        description='Language Country code in LCIDstring Standard.',
        examples=['pt-BR'],
        title='CultureInfo',
    )
    CurrencyCode: Optional[str] = Field(
        None,
        description='Currency Code in ISO 4217 standard.',
        examples=['BRL'],
        title='CurrencyCode',
    )
    CurrencyDecimalDigits: Optional[int] = Field(
        None,
        description='Quantity of Currency Decimal Digits.',
        examples=[1],
        title='CurrencyDecimalDigits',
    )
    CurrencyFormatInfo_1: Optional[CurrencyFormatInfo] = Field(
        None,
        alias='CurrencyFormatInfo',
        description='Object with currency format.',
        title='CurrencyFormatInfo',
    )
    CurrencyLocale: Optional[int] = Field(
        None,
        description='Currency Locale Code in LCID standard.',
        examples=[1046],
        title='CurrencyLocale',
    )
    CurrencySymbol: Optional[str] = Field(
        None, description='Currency symbol.', examples=['R$'], title='CurrencySymbol'
    )
    Id: Optional[int] = Field(
        None, description='Sales Channel unique identifier.', examples=[1], title='Id'
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Defines if the Sales Channel is active (`true`) or not (`false`).',
        title='IsActive',
    )
    Name: Optional[str] = Field(
        None, description='Sales Channel name.', examples=['Loja Principal'], title='Id'
    )
    Origin: Optional[str] = Field(
        None,
        description='Origin of products in the Sales Channel.',
        examples=[None],
        title='Origin',
    )
    Position: Optional[int] = Field(
        None,
        description='Defines the position on index.',
        examples=[1],
        title='Position',
    )
    ProductClusterId: Optional[int] = Field(
        None,
        description='Product Cluster ID, if the Sales Channel has releated Product Cluster.',
        examples=[None],
        title='ProductClusterId',
    )
    TimeZone: Optional[str] = Field(
        None,
        description='Name of Time Zone.',
        examples=['E. South America Standard Time'],
        title='TimeZone',
    )


class ApiCatalogSystemPvtSaleschannelListGetResponse(
    RootModel[List[ApiCatalogSystemPvtSaleschannelListGetResponseItem]]
):
    root: List[ApiCatalogSystemPvtSaleschannelListGetResponseItem]


class ApiCatalogSystemPvtSellerPostResponse(BaseModel):
    ArchiveId: Optional[int] = Field(None, description='Seller archive ID.')
    CNPJ: Optional[str] = Field(None, description='Company registration number.')
    CSCIdentification: Optional[str] = Field(None, description='CSC identification.')
    CatalogSystemEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.",
    )
    CategoryCommissionPercentage: Optional[str] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    DeliveryPolicy: Optional[str] = Field(
        None,
        description='Text describing the delivery policy previously agreed between the marketplace and the seller.',
    )
    Description: Optional[str] = Field(
        None,
        description='Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).',
    )
    Email: Optional[str] = Field(
        None, description='Email of the admin responsible for the seller. '
    )
    ExchangeReturnPolicy: Optional[str] = Field(
        None,
        description='Text describing the exchange and return policy previously agreed between the marketplace and the seller.',
    )
    FreightCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    FulfillmentEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.",
    )
    FulfillmentSellerId: Optional[int] = Field(
        None,
        description='Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.',
    )
    IsActive: Optional[bool] = Field(
        None, description='If the selle is active (`true`) or not (`false`).'
    )
    IsBetterScope: Optional[bool] = Field(
        None,
        description='Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).',
    )
    MerchantName: Optional[str] = Field(
        None,
        description='Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.',
    )
    Name: Optional[str] = Field(
        None,
        description="Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.",
    )
    Password: Optional[str] = Field(None, description='Seller password.')
    ProductCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    SecutityPrivacyPolicy: Optional[str] = Field(
        None,
        description='Text describing the security policy previously agreed between the marketplace and the seller.',
    )
    SellerId: Optional[str] = Field(
        None,
        description="Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.",
    )
    SellerType: Optional[int] = Field(None, description='Seller type.')
    TrustPolicy: Optional[str] = Field(
        None,
        description="Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.",
    )
    UrlLogo: Optional[str] = Field(None, description='Seller URL logo.')
    UseHybridPaymentOptions: Optional[bool] = Field(
        None,
        description='Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller. ',
    )
    UserName: Optional[str] = Field(None, description='Seller username.')


class ApiCatalogSystemPvtSellerPutResponse(BaseModel):
    ArchiveId: Optional[int] = Field(None, description='Seller archive ID.')
    CNPJ: Optional[str] = Field(None, description='Company registration number.')
    CSCIdentification: Optional[str] = Field(None, description='CSC identification.')
    CatalogSystemEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.",
    )
    CategoryCommissionPercentage: Optional[str] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    DeliveryPolicy: Optional[str] = Field(
        None,
        description='Text describing the delivery policy previously agreed between the marketplace and the seller.',
    )
    Description: Optional[str] = Field(
        None,
        description='Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).',
    )
    Email: Optional[str] = Field(
        None, description='Email of the admin responsible for the seller.'
    )
    ExchangeReturnPolicy: Optional[str] = Field(
        None,
        description='Text describing the exchange and return policy previously agreed between the marketplace and the seller.',
    )
    FreightCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    FulfillmentEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.",
    )
    FulfillmentSellerId: Optional[int] = Field(
        None,
        description='Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.',
    )
    IsActive: Optional[bool] = Field(
        None, description='If the selle is active (`true`) or not (`false`).'
    )
    IsBetterScope: Optional[bool] = Field(
        None,
        description='Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).',
    )
    MerchantName: Optional[str] = Field(
        None,
        description='Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.',
    )
    Name: Optional[str] = Field(
        None,
        description="Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.",
    )
    Password: Optional[str] = Field(None, description='Seller password.')
    ProductCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    SecutityPrivacyPolicy: Optional[str] = Field(
        None,
        description='Text describing the security policy previously agreed between the marketplace and the seller.',
    )
    SellerId: Optional[str] = Field(
        None,
        description="Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.",
    )
    SellerType: Optional[int] = Field(None, description='Seller type.')
    TrustPolicy: Optional[str] = Field(
        None,
        description="Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.",
    )
    UrlLogo: Optional[str] = Field(None, description='Seller URL logo.')
    UseHybridPaymentOptions: Optional[bool] = Field(
        None,
        description='Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.',
    )
    UserName: Optional[str] = Field(None, description='Seller username.')


class ApiCatalogSystemPvtSellerListGetResponse(BaseModel):
    ArchiveId: Optional[int] = Field(None, description='Seller archive ID.')
    CNPJ: Optional[str] = Field(None, description='Company registration number.')
    CSCIdentification: Optional[str] = Field(None, description='CSC identification.')
    CatalogSystemEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.",
    )
    CategoryCommissionPercentage: Optional[str] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    DeliveryPolicy: Optional[str] = Field(
        None,
        description='Text describing the delivery policy previously agreed between the marketplace and the seller.',
    )
    Description: Optional[str] = Field(
        None,
        description='Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).',
    )
    Email: Optional[str] = Field(
        None, description='Email of the admin responsible for the seller.'
    )
    ExchangeReturnPolicy: Optional[str] = Field(
        None,
        description='Text describing the exchange and return policy previously agreed between the marketplace and the seller.',
    )
    FreightCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    FulfillmentEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.",
    )
    FulfillmentSellerId: Optional[int] = Field(
        None,
        description='Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.',
    )
    IsActive: Optional[bool] = Field(
        None, description='If the selle is active (`true`) or not (`false`).'
    )
    IsBetterScope: Optional[bool] = Field(
        None,
        description='Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).',
    )
    MerchantName: Optional[str] = Field(
        None,
        description='Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.',
    )
    Name: Optional[str] = Field(
        None,
        description="Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.",
    )
    Password: Optional[str] = Field(None, description='Seller password.')
    ProductCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    SecutityPrivacyPolicy: Optional[str] = Field(
        None,
        description='Text describing the security policy previously agreed between the marketplace and the seller.',
    )
    SellerId: Optional[str] = Field(
        None,
        description="Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.",
    )
    SellerType: Optional[int] = Field(None, description='Seller type.')
    TrustPolicy: Optional[str] = Field(
        None,
        description="Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.",
    )
    UrlLogo: Optional[str] = Field(None, description='Seller URL logo.')
    UseHybridPaymentOptions: Optional[bool] = Field(
        None,
        description='Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.',
    )
    UserName: Optional[str] = Field(None, description='Seller username.')


class ApiCatalogSystemPvtSellerSellerIdGetResponse(BaseModel):
    ArchiveId: Optional[int] = Field(None, description='Seller archive ID.')
    CNPJ: Optional[str] = Field(None, description='Company registration number.')
    CSCIdentification: Optional[str] = Field(None, description='CSC identification.')
    CatalogSystemEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.",
    )
    CategoryCommissionPercentage: Optional[str] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    DeliveryPolicy: Optional[str] = Field(
        None,
        description='Text describing the delivery policy previously agreed between the marketplace and the seller.',
    )
    Description: Optional[str] = Field(
        None,
        description='Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).',
    )
    Email: Optional[str] = Field(
        None, description='Email of the admin responsible for the seller.'
    )
    ExchangeReturnPolicy: Optional[str] = Field(
        None,
        description='Text describing the exchange and return policy previously agreed between the marketplace and the seller.',
    )
    FreightCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    FulfillmentEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.",
    )
    FulfillmentSellerId: Optional[int] = Field(
        None,
        description='Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.',
    )
    IsActive: Optional[bool] = Field(
        None, description='If the selle is active (`true`) or not (`false`).'
    )
    IsBetterScope: Optional[bool] = Field(
        None,
        description='Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).',
    )
    MerchantName: Optional[str] = Field(
        None,
        description='Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.',
    )
    Name: Optional[str] = Field(
        None,
        description="Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.",
    )
    Password: Optional[str] = Field(None, description='Seller password.')
    ProductCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    SecutityPrivacyPolicy: Optional[str] = Field(
        None,
        description='Text describing the security policy previously agreed between the marketplace and the seller.',
    )
    SellerId: Optional[str] = Field(
        None,
        description="Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.",
    )
    SellerType: Optional[int] = Field(None, description='Seller type.')
    TrustPolicy: Optional[str] = Field(
        None,
        description="Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.",
    )
    UrlLogo: Optional[str] = Field(None, description='Seller URL logo.')
    UseHybridPaymentOptions: Optional[bool] = Field(
        None,
        description='Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller. ',
    )
    UserName: Optional[str] = Field(None, description='Seller username.')


class ApiCatalogSystemPvtSellersSellerIdGetResponse(BaseModel):
    ArchiveId: Optional[int] = Field(None, description='Seller archive ID.')
    CNPJ: Optional[str] = Field(None, description='Company registration number.')
    CSCIdentification: Optional[str] = Field(None, description='CSC identification.')
    CatalogSystemEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.",
    )
    CategoryCommissionPercentage: Optional[str] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    DeliveryPolicy: Optional[str] = Field(
        None,
        description='Text describing the delivery policy previously agreed between the marketplace and the seller.',
    )
    Description: Optional[str] = Field(
        None,
        description='Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).',
    )
    Email: Optional[str] = Field(
        None, description='Email of the admin responsible for the seller. '
    )
    ExchangeReturnPolicy: Optional[str] = Field(
        None,
        description='Text describing the exchange and return policy previously agreed between the marketplace and the seller.',
    )
    FreightCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    FulfillmentEndpoint: Optional[str] = Field(
        None,
        description="URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.",
    )
    FulfillmentSellerId: Optional[int] = Field(
        None,
        description='Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.',
    )
    IsActive: Optional[bool] = Field(
        None, description='If the selle is active (`true`) or not (`false`).'
    )
    IsBetterScope: Optional[bool] = Field(
        None,
        description='Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).',
    )
    MerchantName: Optional[str] = Field(
        None,
        description='Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.',
    )
    Name: Optional[str] = Field(
        None,
        description="Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.",
    )
    Password: Optional[str] = Field(None, description='Seller password.')
    ProductCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    SecutityPrivacyPolicy: Optional[str] = Field(
        None,
        description='Text describing the security policy previously agreed between the marketplace and the seller.',
    )
    SellerId: Optional[str] = Field(
        None,
        description="Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.",
    )
    SellerType: Optional[int] = Field(None, description='Seller type.')
    TrustPolicy: Optional[str] = Field(
        None,
        description="Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.",
    )
    UrlLogo: Optional[str] = Field(None, description='Seller URL logo.')
    UseHybridPaymentOptions: Optional[bool] = Field(
        None,
        description='Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller. ',
    )
    UserName: Optional[str] = Field(None, description='Seller username.')


class ApiCatalogSystemPvtSkuAssociateattachmentsPostRequest(BaseModel):
    AttachmentNames: List[str] = Field(
        ...,
        description='Array with all the names of the attachments that you need to associate to the SKU.',
    )
    SkuId: int = Field(..., description='Unique identifier of the SKU.', examples=[1])


class ApiCatalogSystemPvtSkuComplementsParentSkuIdTypeGetResponse(BaseModel):
    ComplementSkuIds: List[int] = Field(
        ...,
        description='Array with SKU complements IDs.',
        examples=[[7]],
        title='ComplementSkuIds',
    )
    ParentSkuId: int = Field(
        ...,
        description='ID of the Parent SKU, where the Complement is inserted.',
        examples=[1],
        title='ParentSkuId',
    )
    Type: str = Field(
        ...,
        description='Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.',
        examples=['1'],
        title='Type',
    )


class ApiCatalogSystemPvtSkuStockkeepingunitByProductIdProductIdGetResponse(
    RootModel[List[SkulistbyProductId]]
):
    root: List[SkulistbyProductId] = Field(
        ...,
        examples=[
            [
                {
                    'ActivateIfPossible': True,
                    'ApprovedAdminId': 123,
                    'CommercialConditionId': 1,
                    'CubicWeight': 0.2,
                    'DateUpdated': '2015-11-06T19:10:00',
                    'EditionAdminId': 123,
                    'EditionSkuId': None,
                    'EstimatedDateArrival': None,
                    'FlagKitItensSellApart': False,
                    'Height': 8,
                    'Id': 2000035,
                    'InternalNote': None,
                    'IsActive': True,
                    'IsDynamicKit': None,
                    'IsGiftCardRecharge': None,
                    'IsInventoried': None,
                    'IsKit': False,
                    'IsPersisted': True,
                    'IsRemoved': False,
                    'IsTransported': None,
                    'Length': 8,
                    'ManufacturerCode': '',
                    'MeasurementUnit': 'un',
                    'ModalId': 1,
                    'ModalType': None,
                    'Name': '33 - Preto',
                    'Position': 0,
                    'ProductId': 2000024,
                    'RealHeight': None,
                    'RealLength': None,
                    'RealWeightKg': None,
                    'RealWidth': None,
                    'RefId': '',
                    'ReferenceStockKeepingUnitId': None,
                    'RewardValue': 0.01,
                    'SupplierCode': None,
                    'UnitMultiplier': 2,
                    'WeightKg': 340,
                    'Width': 15,
                }
            ]
        ],
    )


class ApiCatalogSystemPvtSkuStockkeepingunitidsGetResponse(RootModel[List[int]]):
    root: List[int] = Field(
        ...,
        description='Array composed by SKU IDs, in the search context.',
        examples=[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]],
    )


class ApiCatalogSystemPvtSkuStockkeepingunitidsbysaleschannelGetResponse(
    RootModel[List[int]]
):
    root: List[int] = Field(
        ..., description='List of SKU IDs of the Trade Policy.', title='data'
    )


class ApiCatalogSystemPvtSkusellerSellerIdSellerSkuIdGetResponse(BaseModel):
    IsActive: bool = Field(..., description='Defines if the SKU binding is active.')
    IsPersisted: bool = Field(..., description='Defines if the seller is persisted.')
    IsRemoved: bool = Field(..., description='Defines if the seller is removed.')
    RequestedUpdateDate: str = Field(
        ...,
        description='Date when an SKU binding update was requested for the last time, in UTC format.',
    )
    SellerId: str = Field(
        ...,
        description='ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
    )
    SellerStockKeepingUnitId: str = Field(..., description='SKU seller ID.')
    SkuSellerId: int = Field(..., description="SKU ID in the seller's store.")
    StockKeepingUnitId: int = Field(..., description='SKU ID in the VTEX marketplace.')
    UpdateDate: str = Field(
        ...,
        description='Date when the SKU binding was updated for the last time, in UTC format.',
    )


class ApiCatalogSystemPvtSpecificationFieldValuePostResponse(BaseModel):
    FieldId: Optional[int] = Field(None, description='Specification Field ID.')
    FieldValueId: Optional[int] = Field(
        None, description='Specification Field Value ID.'
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Defines if the Specification Field Value is active (`true`) or inactive (`false`).',
    )
    Name: Optional[str] = Field(None, description='Specification Field Value Name.')
    Position: Optional[int] = Field(
        None, description='Specification Field Value Position.'
    )
    Text: Optional[str] = Field(
        None, description='Specification Field Value Description.'
    )


class ApiCatalogSystemPvtSpecificationFieldValueFieldValueIdGetResponse(BaseModel):
    FieldId: Optional[int] = Field(None, description='Specification Field ID.')
    FieldValueId: Optional[int] = Field(
        None, description='Specification Field Value ID.'
    )
    IsActive: Optional[bool] = Field(
        None,
        description='Defines if the Specification Field Value is active (`true`) or inactive (`false`).',
    )
    Name: Optional[str] = Field(None, description='Specification Field Value Name.')
    Position: Optional[int] = Field(
        None, description='Specification Field Value Position.'
    )
    Text: Optional[str] = Field(
        None, description='Specification Field Value Description.'
    )


class ApiCatalogSystemPvtSpecificationGroupbycategoryCategoryIdGetResponse(
    RootModel[List[SpecificationsGroup]]
):
    root: List[SpecificationsGroup]


class Attachment(BaseModel):
    Fields: List[FieldModel] = Field(
        ..., description='Array containing Attachment fields.'
    )
    Id: int = Field(..., description='Attachment ID.')
    IsActive: bool = Field(
        ..., description='Defines if the Attachment is active or not.'
    )
    IsRequired: bool = Field(
        ..., description='Defines if the Attachment is required or not.'
    )
    Keys: List[str] = Field(..., description='Attachment Keys.')
    Name: str = Field(..., description='Attachment Name.')


class GetCategoryTree(BaseModel):
    MetaTagDescription: str = Field(
        ...,
        description='Category page Meta tag description.',
        examples=['New and used toys for sale.'],
    )
    Title: str = Field(..., description='Category page title.', examples=['Toys'])
    children: List[GetCategoryTreeChild] = Field(
        ..., description="Array with information about the category's children."
    )
    hasChildren: bool = Field(
        ...,
        description='If the category has a category child (`true`) or not (`false`).',
        examples=[True],
    )
    id: int = Field(..., description='Category ID.', examples=[1])
    name: str = Field(..., description='Category name.', examples=['Toys'])
    url: str = Field(
        ...,
        description='Category URL.',
        examples=['https://lojadobreno.vtexcommercestable.com.br/toys'],
    )


class GetSKUAltID(BaseModel):
    AlternateIdValues: List[str] = Field(
        ..., description='Array with values of alternative SKU IDs.'
    )
    AlternateIds_1: AlternateIds = Field(..., alias='AlternateIds')
    Attachments: List[Attachment] = Field(
        ..., description='Array with Attachments ID that are related to the SKU.'
    )
    BrandId: str = Field(..., description='Brand ID.')
    BrandName: str = Field(..., description='Brand Name.')
    CSCIdentification: str = Field(..., description='SKU Seller Identification.')
    Categories: List[str] = Field(..., description='Categories of the related product.')
    CategoriesFullPath: Optional[List[str]] = Field(
        None, description='Path of Categories of the related product.'
    )
    Collections: List[str] = Field(
        ..., description='Array with Collections IDs that are related to the Product.'
    )
    CommercialConditionId: int = Field(..., description='SKU Commercial Condition ID.')
    ComplementName: Optional[str] = Field(None, description='Product Complement Name.')
    DetailUrl: str = Field(..., description='Product slug.')
    Dimension_1: Dimension = Field(..., alias='Dimension')
    EstimatedDateArrival: str = Field(
        ...,
        description='SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.',
    )
    Id: int = Field(..., description='SKU ID.')
    ImageUrl: str = Field(..., description='SKU image URL.')
    Images: List[Image] = Field(
        ..., description='Array of objects with SKU image details.'
    )
    InformationSource: str = Field(..., description='Information Source.')
    IsActive: bool = Field(..., description='Defines if the SKU is active or not.')
    IsDirectCategoryActive: Optional[bool] = Field(
        None, description='Indicates if the direct Product Category is active or not.'
    )
    IsGiftCardRecharge: bool = Field(
        ...,
        description='Defines if the purchase of the SKU will generate reward value for the customer.',
    )
    IsInventoried: bool
    IsKit: bool = Field(..., description='Defines if the SKU is part of a bundle.')
    IsProductActive: Optional[bool] = Field(
        None, description='Defines if the product is active or not.'
    )
    IsTransported: bool
    KeyWords: Optional[str] = Field(
        None, description='Keywords related to the product.'
    )
    KitItems: List[str] = Field(
        ..., description='Array with SKU IDs of bundle components.'
    )
    ManufacturerCode: str = Field(..., description='Product Supplier ID.')
    MeasurementUnit: str = Field(..., description='Measurement unit.')
    ModalType: str = Field(
        ...,
        description='Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).',
    )
    NameComplete: str = Field(..., description='Product Name and SKU Name combined.')
    PositionsInClusters: Optional[Dict[str, int]] = Field(
        None,
        description='Product Clusters position in each Cluster. Structure: "{Product Cluster ID}": {Position}.\n\n`{Product Cluster ID}` is a string, while `{Position}` is an integer.',
    )
    ProductCategories: Dict[str, str] = Field(
        ...,
        description='Object containing product categories. Structure: "{CategoryID}": "{CategoryName}". Both the key and the value are strings.',
    )
    ProductCategoryIds: str = Field(
        ..., description='Category path composed by category IDs separated by `/`.'
    )
    ProductClusterHighlights: Optional[Dict[str, str]] = Field(
        None,
        description='Product Clusters Highlights. Structure: "{Product Cluster ID}": "{Product Cluster Name}". Both the key and the value are strings.',
    )
    ProductClusterNames: Optional[Dict[str, str]] = Field(
        None,
        description='Product Clusters Names. Structure: "{Product Cluster ID}": "{Product Cluster Name}". Both the key and the value are strings.',
    )
    ProductClustersIds: str = Field(
        ..., description='Product Cluster IDs separated by comma (`,`).'
    )
    ProductDescription: str = Field(
        ..., description='Product Description. HTML is allowed.'
    )
    ProductFinalScore: Optional[int] = Field(None, description='Product Final Score.')
    ProductGlobalCategoryId: int = Field(..., description='Product Global Category ID.')
    ProductId: int = Field(..., description='Product ID.')
    ProductIsVisible: Optional[bool] = Field(
        None, description='Defines if the product is visible or not.'
    )
    ProductName: str = Field(..., description='Product Name.')
    ProductRefId: Optional[str] = Field(None, description='Product Reference ID.')
    ProductSpecifications: List[ProductSpecification] = Field(
        ..., description='Array with related Product Specifications.'
    )
    RealDimension_1: RealDimension = Field(..., alias='RealDimension')
    ReleaseDate: Optional[str] = Field(None, description='Release date of the product.')
    RewardValue: float = Field(..., description='Reward value related to the SKU.')
    SalesChannels: List[int] = Field(..., description='Array of trade policy IDs.')
    Services: List[str] = Field(
        ..., description='Array with Service IDs that are related to the SKU.'
    )
    ShowIfNotAvailable: Optional[bool] = Field(
        None, description='Defines if the product will be shown if it is not available.'
    )
    SkuName: str = Field(..., description='SKU Name.')
    SkuSellers: List[SkuSeller] = Field(
        ..., description='Array with related Sellers data.'
    )
    SkuSpecifications: List[SkuSpecification] = Field(
        ..., description='Array with related SKU Specifications.'
    )
    TaxCode: Optional[str] = Field(None, description='SKU Tax Code.')
    UnitMultiplier: float = Field(
        ...,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
    )


class GetSKUandContext(BaseModel):
    AlternateIdValues: List[str] = Field(
        ..., description='Array with values of alternative SKU IDs.'
    )
    AlternateIds_1: AlternateIds = Field(..., alias='AlternateIds')
    Attachments: List[Attachment] = Field(
        ..., description='Array with Attachments ID that are related to the SKU.'
    )
    BrandId: str = Field(..., description='Product Brand ID.')
    BrandName: str = Field(..., description='Product Brand Name.')
    CSCIdentification: str = Field(..., description='SKU Seller identification.')
    Categories: List[str] = Field(
        ..., description='Array with Categories from the related Product.'
    )
    Collections: List[str] = Field(
        ..., description='Array with Collections ID that are related to the Product.'
    )
    CommercialConditionId: int = Field(..., description='SKU Commercial Condition ID.')
    ComplementName: Optional[str] = Field(None, description='Product Complement Name.')
    DetailUrl: str = Field(..., description='Product URL.')
    Dimension_1: Dimension = Field(..., alias='Dimension')
    EstimatedDateArrival: str = Field(
        ...,
        description='To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.',
    )
    Id: int = Field(..., description='SKU ID.')
    ImageUrl: str = Field(..., description='SKU image URL.')
    Images: List[Image] = Field(..., description='Array with SKU images.')
    InformationSource: str = Field(..., description='Information Source.')
    IsActive: bool = Field(..., description='Defines if the SKU is active or not.')
    IsGiftCardRecharge: bool = Field(
        ..., description='Defines if the purchase will generate a reward.'
    )
    IsInventoried: bool
    IsKit: bool = Field(..., description='Defines if the SKU is part of a bundle.')
    IsProductActive: Optional[bool] = Field(
        None, description='Defines if the product is active or not.'
    )
    IsTransported: bool
    KeyWords: Optional[str] = Field(
        None, description='Keywords related to the product.'
    )
    KitItems: List[str] = Field(
        ..., description='Array with SKU IDs of bundle components.'
    )
    ManufacturerCode: str = Field(..., description='Product Supplier ID.')
    MeasurementUnit: str = Field(..., description='SKU Measurement Unit.')
    ModalType: str = Field(..., description='Modal Type.')
    NameComplete: str = Field(
        ..., description='Product Name and SKU Name concatenated.'
    )
    ProductCategories: Dict[str, str] = Field(
        ...,
        description='Object containing product categories. Structure: "{CategoryID}": "{CategoryName}".',
    )
    ProductCategoryIds: str = Field(
        ..., description='Category Hierarchy with Category IDs.'
    )
    ProductClustersIds: str = Field(..., description='Product Clusters IDs.')
    ProductDescription: str = Field(
        ..., description='Product Description. HTML is allowed.'
    )
    ProductFinalScore: Optional[int] = Field(None, description='Product Final Score.')
    ProductGlobalCategoryId: int = Field(..., description='Global Category ID.')
    ProductId: int = Field(..., description='ID of the related Product.')
    ProductIsVisible: Optional[bool] = Field(
        None, description='Defines if the product is visible or not.'
    )
    ProductName: str = Field(..., description='Product Name.')
    ProductRefId: Optional[str] = Field(
        None, description='Reference ID of the related Product.'
    )
    ProductSpecifications: List[ProductSpecification] = Field(
        ..., description='Array with related Product Specifications.'
    )
    RealDimension_1: RealDimension = Field(..., alias='RealDimension')
    ReleaseDate: Optional[str] = Field(None, description='Release date of the product.')
    RewardValue: float = Field(..., description='Reward value related to the SKU.')
    SalesChannels: List[int] = Field(
        ...,
        description='Array with the ID of all the Sales Channels that are related to the product.',
    )
    Services: List[str] = Field(
        ..., description='Array with Service IDs that are related to the SKU.'
    )
    ShowIfNotAvailable: Optional[bool] = Field(
        None, description='Defines if the product will be shown if it is not available.'
    )
    SkuName: str = Field(..., description='SKU Name.')
    SkuSellers: List[SkuSeller] = Field(..., description='Array with SKU Sellers data.')
    SkuSpecifications: List[SkuSpecification] = Field(
        ..., description='Array with related SKU Specifications.'
    )
    TaxCode: Optional[str] = Field(None, description='SKU Tax Code.')
    UnitMultiplier: float = Field(
        ...,
        description='This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.',
    )


class ApiCatalogSystemPubCategoryTreeCategoryLevelsGetResponse(
    RootModel[List[GetCategoryTree]]
):
    root: List[GetCategoryTree]
